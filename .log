2023-01-25 15:31:37,299 [26536] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-25 15:31:37,308 [26536] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-01-25 15:31:37,308 [26536] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-01-25 15:31:37,309 [26536] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 0 in part parser)
2023-01-25 15:31:37,309 [26536] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-25 15:31:37,451 [26536] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\collections\__init__.py
2023-01-25 15:31:37,513 [26536] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\collections\__init__.pyi
2023-01-25 15:31:37,586 [26536] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\functools.py
2023-01-25 15:31:37,596 [26536] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\functools.pyi
2023-01-25 15:31:53,777 [26536] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-25 15:31:53,777 [26536] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-01-25 15:31:53,777 [26536] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-01-25 15:31:53,778 [26536] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-25 15:31:53,778 [26536] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-25 15:31:57,691 [26536] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-25 15:31:57,692 [26536] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-01-25 15:31:57,693 [26536] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-01-25 15:31:57,696 [26536] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-25 15:31:57,697 [26536] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-25 15:32:13,743 [26536] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3': 'https://d3js.org/d3.v5.min'}, 'shim': {}}
2023-01-25 15:32:31,555 [26536] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3': 'https://d3js.org/d3.v5.min'}, 'shim': {}}
2023-01-25 15:32:39,966 [26536] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3': 'https://d3js.org/d3.v5.min'}, 'shim': {}}
2023-01-25 15:32:46,891 [26536] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3': 'https://d3js.org/d3.v5.min'}, 'shim': {}}
2023-01-25 18:08:12,078 [26536] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-25 18:08:12,088 [26536] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-01-25 18:08:12,088 [26536] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-01-25 18:08:12,097 [26536] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-25 18:08:12,098 [26536] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-25 18:08:12,175 [26536] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\numpy\__init__.py
2023-01-25 18:08:12,208 [26536] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\numpy\core\fromnumeric.py
2023-01-25 18:25:10,050 [26536] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-25 18:25:10,050 [26536] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-01-25 18:25:10,050 [26536] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-01-25 18:25:10,052 [26536] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-25 18:25:10,052 [26536] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-25 18:26:39,497 [26536] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-25 18:26:39,498 [26536] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-01-25 18:26:39,498 [26536] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-01-25 18:26:39,498 [26536] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-25 18:26:39,499 [26536] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-25 18:26:39,543 [26536] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\numpy\__init__.pyi
2023-01-25 18:31:55,261 [26536] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-25 18:31:55,263 [26536] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-01-25 18:31:55,263 [26536] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-01-25 18:31:55,264 [26536] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-25 18:31:55,265 [26536] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-25 18:32:34,623 [26536] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-25 18:32:34,624 [26536] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-01-25 18:32:34,625 [26536] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-01-25 18:32:34,625 [26536] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-25 18:32:34,625 [26536] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-25 18:35:35,565 [26536] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-25 18:35:35,568 [26536] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-01-25 18:35:35,568 [26536] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-01-25 18:35:35,569 [26536] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-25 18:35:35,569 [26536] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-25 18:36:27,990 [26536] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-25 18:36:27,992 [26536] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-01-25 18:36:27,992 [26536] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-01-25 18:36:27,993 [26536] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-25 18:36:27,993 [26536] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-25 18:36:37,257 [26536] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-25 18:36:37,258 [26536] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 2
2023-01-25 18:36:37,258 [26536] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:2]
2023-01-25 18:36:37,259 [26536] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2023-01-25 18:36:37,260 [26536] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-25 18:42:55,854 [26536] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-25 18:42:55,855 [26536] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 1
2023-01-25 18:42:55,855 [26536] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:2] new[1:1]
2023-01-25 18:42:55,856 [26536] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-25 18:42:55,856 [26536] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-25 18:42:55,926 [26536] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\matplotlib\pyplot.py
2023-01-25 18:42:59,198 [26536] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-25 18:42:59,199 [26536] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-01-25 18:42:59,199 [26536] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-01-25 18:42:59,200 [26536] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-25 18:42:59,200 [26536] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 10:25:40,329 [32872] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-01-26 10:25:40,330 [32872] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-01-26 10:25:40,331 [32872] INFO     root:247: [JupyterRequire] Initializing comms.
2023-01-26 10:25:40,335 [32872] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-01-26 10:25:40,335 [32872] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-01-26 10:25:40,336 [32872] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-01-26 10:25:41,138 [32872] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-01-26 10:25:41,139 [32872] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-01-26 10:25:41,139 [32872] INFO     root:247: [JupyterRequire] Initializing comms.
2023-01-26 10:25:41,141 [32872] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-01-26 10:25:41,142 [32872] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-01-26 10:25:41,143 [32872] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-01-26 10:26:44,181 [32872] INFO     numexpr.utils:145: [JupyterRequire] Note: NumExpr detected 12 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
2023-01-26 10:26:44,181 [32872] INFO     numexpr.utils:157: [JupyterRequire] NumExpr defaulting to 8 threads.
2023-01-26 10:26:45,080 [32872] DEBUG    matplotlib:224: [JupyterRequire] matplotlib data path: C:\Users\sunny\anaconda3\lib\site-packages\matplotlib\mpl-data
2023-01-26 10:26:45,094 [32872] DEBUG    matplotlib:224: [JupyterRequire] CONFIGDIR=C:\Users\sunny\.matplotlib
2023-01-26 10:26:45,097 [32872] DEBUG    matplotlib:1394: [JupyterRequire] matplotlib version 3.4.3
2023-01-26 10:26:45,098 [32872] DEBUG    matplotlib:1395: [JupyterRequire] interactive is False
2023-01-26 10:26:45,098 [32872] DEBUG    matplotlib:1396: [JupyterRequire] platform is win32
2023-01-26 10:26:45,098 [32872] DEBUG    matplotlib:1397: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', '_io', 'marshal', 'nt', 'winreg', '_frozen_importlib_external', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', 'encodings.cp1252', '_signal', 'encodings.latin_1', '_abc', 'abc', 'io', '__main__', '_stat', 'stat', '_collections_abc', 'genericpath', 'ntpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', '_distutils_hack', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', '_heapq', 'heapq', 'itertools', 'keyword', '_operator', 'operator', 'reprlib', '_collections', 'collections', 'collections.abc', '_functools', 'functools', 'contextlib', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', 'typing.io', 'typing.re', 'typing', 'importlib.abc', 'importlib.util', 'google', 'google.cloud', 'google.logging', 'mpl_toolkits', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'msvcrt', '_winapi', 'subprocess', 'jupyter_client._version', 'posixpath', 'fnmatch', 'glob', '_socket', 'math', 'select', 'selectors', 'socket', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_bisect', 'bisect', '_random', '_sha512', 'random', 'tempfile', 'getpass', 'platform', 'zmq.libzmq', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_24', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'copy', '_struct', 'struct', '_compat_pickle', '_pickle', 'pickle', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'atexit', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', '_ast', 'ast', '_opcode', 'opcode', 'dis', 'token', 'tokenize', 'linecache', 'inspect', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.traitlets', 'traitlets.utils.decorators', 'traitlets._version', 'traitlets', 'traceback', '_string', 'string', 'logging', 'pprint', 'gettext', 'argparse', 'traitlets.config.loader', 'textwrap', 'traitlets.utils.text', 'traitlets.config.configurable', 'traitlets.config.application', 'traitlets.config', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'urllib', 'urllib.parse', 'pathlib', 'jupyter_core.paths', 'jupyter_client.utils', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_ssl', 'binascii', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.threads', '_overlapped', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.selector_events', 'asyncio.windows_utils', 'asyncio.windows_events', 'asyncio', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', '_queue', 'queue', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', '_uuid', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', '_datetime', 'datetime', 'numbers', 'logging.handlers', 'html.entities', 'html', 'array', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', '_ctypes', 'ctypes._endian', 'ctypes', 'ctypes.wintypes', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', '__future__', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'sysconfig', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'locale', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_win32', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'IPython.lib.security', 'IPython.lib', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.deduplicate', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout.scrollable_pane', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'prompt_toolkit.patch_stdout', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'parso._compatibility', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.file_io', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.common', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.lib.clipboard', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'nturl2path', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'dataclasses', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'ipython_genutils._version', 'ipython_genutils', 'ipython_genutils.encoding', 'ipython_genutils.py3compat', 'ipython_genutils.path', 'imp', 'hmac', 'dateutil._version', 'dateutil', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.control', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'setuptools._distutils', 'distutils.debug', 'distutils.errors', 'distutils.fancy_getopt', 'distutils.dep_util', 'distutils._log', 'distutils.spawn', 'distutils.util', 'distutils.dist', 'distutils.dir_util', 'distutils.file_util', 'zipfile', 'distutils.archive_util', 'distutils.cmd', 'configparser', 'distutils.config', 'distutils.extension', 'distutils.core', '_distutils_hack.override', 'setuptools._deprecation_warning', 'xml.parsers', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'plistlib', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'importlib._common', 'importlib.resources', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources._vendor.more_itertools.more', 'pkg_resources._vendor.more_itertools', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.functools', 'pkg_resources.extern.jaraco.context', 'pkg_resources.extern.jaraco.text', 'pkg_resources._vendor.platformdirs.api', 'pkg_resources._vendor.platformdirs.version', 'pkg_resources._vendor.platformdirs.windows', 'pkg_resources._vendor.platformdirs', 'pkg_resources.extern.platformdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources._vendor.packaging', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.version', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.tags', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources._vendor.pyparsing.util', 'pkg_resources._vendor.pyparsing.unicode', 'pkg_resources._vendor.pyparsing.exceptions', 'pkg_resources._vendor.pyparsing.actions', 'pkg_resources._vendor.pyparsing.results', 'pkg_resources._vendor.pyparsing.core', 'pkg_resources._vendor.pyparsing.helpers', 'pkg_resources._vendor.pyparsing.testing', 'pkg_resources._vendor.pyparsing.common', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'pkg_resources.extern.packaging.requirements', 'encodings.cp437', 'pkg_resources', 'setuptools.version', 'distutils.filelist', 'setuptools.monkey', 'setuptools.extension', 'distutils.log', 'distutils.command', 'setuptools.extern', 'setuptools._vendor', 'setuptools._vendor.packaging.__about__', 'setuptools._vendor.packaging', 'setuptools.extern.packaging', 'setuptools._vendor.ordered_set', 'setuptools.extern.ordered_set', 'setuptools._vendor.more_itertools.recipes', 'setuptools._vendor.more_itertools.more', 'setuptools._vendor.more_itertools', 'setuptools.extern.more_itertools', '_csv', 'csv', 'setuptools._vendor.zipp', 'setuptools._vendor.importlib_metadata._functools', 'setuptools._vendor.importlib_metadata._text', 'setuptools._vendor.importlib_metadata._adapters', 'setuptools._vendor.importlib_metadata._compat', 'setuptools._vendor.importlib_metadata._meta', 'setuptools._vendor.importlib_metadata._collections', 'setuptools._vendor.importlib_metadata._itertools', 'setuptools._vendor.importlib_metadata', 'setuptools.extern.importlib_metadata', 'zipp', 'importlib_metadata._functools', 'importlib_metadata._text', 'importlib_metadata._adapters', 'importlib_metadata._compat', 'importlib_metadata._meta', 'importlib_metadata._collections', 'importlib_metadata._itertools', 'importlib_metadata', 'setuptools._importlib', 'distutils.command.bdist', 'setuptools.command', 'setuptools.windows_support', 'setuptools._vendor.pyparsing.util', 'setuptools._vendor.pyparsing.unicode', 'setuptools._vendor.pyparsing.exceptions', 'setuptools._vendor.pyparsing.actions', 'setuptools._vendor.pyparsing.results', 'setuptools._vendor.pyparsing.core', 'setuptools._vendor.pyparsing.helpers', 'setuptools._vendor.pyparsing.testing', 'setuptools._vendor.pyparsing.common', 'setuptools._vendor.pyparsing', 'setuptools.extern.pyparsing', 'setuptools._vendor.packaging._manylinux', 'setuptools._vendor.packaging._musllinux', 'setuptools.extern.packaging.tags', 'setuptools.extern.packaging._structures', 'setuptools.extern.packaging.version', 'setuptools.extern.packaging.utils', 'setuptools.extern.packaging.specifiers', 'setuptools.extern.packaging.markers', 'setuptools.extern.packaging.requirements', 'setuptools._path', 'setuptools.config.expand', 'setuptools.config.setupcfg', 'setuptools.config', 'setuptools.errors', 'email._header_value_parser', 'email.headerregistry', 'setuptools.config._apply_pyprojecttoml', 'setuptools.config.pyprojecttoml', 'setuptools.discovery', 'setuptools._vendor.jaraco', 'setuptools.extern.jaraco', 'setuptools.extern.jaraco.functools', 'setuptools.extern.jaraco.context', 'setuptools.extern.jaraco.text', 'setuptools._reqs', 'setuptools._itertools', 'setuptools._entry_points', 'setuptools.dist', 'setuptools.py34compat', 'setuptools._imp', 'setuptools.depends', 'setuptools.logging', 'setuptools.msvc', 'unittest.util', 'unittest.result', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.signals', 'unittest.runner', 'unittest.main', 'unittest', 'unittest.mock', 'distutils.ccompiler', 'distutils._msvccompiler', 'setuptools', 'distutils', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.compiler', 'debugpy._version', 'debugpy.common', 'debugpy.common.json', 'debugpy.common.fmt', 'debugpy.common.compat', 'debugpy', 'debugpy._vendored._util', 'debugpy._vendored', '_pydevd_bundle', 'encodings.ascii', 'stringprep', 'encodings.idna', '_pydevd_bundle.pydevd_vm_type', '_pydev_imps', 'xmlrpc', 'gzip', 'xmlrpc.client', 'socketserver', 'http.server', 'xmlrpc.server', '_pydev_imps._pydev_saved_modules', '_pydevd_bundle.pydevd_constants', '_pydev_bundle', '_pydev_runfiles', '_pydevd_frame_eval', 'pydev_ipython', 'pydevd_concurrency_analyser', 'pydevd_plugins', '_pydev_bundle.pydev_log', '_pydev_bundle._pydev_filesystem_encoding', '_pydevd_bundle.pydevd_comm_constants', 'pydevd_file_utils', '_pydev_imps._pydev_execfile', '_pydevd_bundle.pydevd_exec2', '_pydev_bundle.pydev_imports', '_pydev_bundle.pydev_is_thread_alive', '_pydev_bundle.pydev_override', 'pydevd_plugins.extensions', '_pydevd_bundle.pydevd_extension_utils', '_pydevd_bundle.pydevd_frame_utils', '_pydevd_bundle.pydevd_filtering', '_pydevd_bundle.pydevd_io', '_pydevd_bundle.pydevd_utils', '_pydev_bundle._pydev_tipper_common', '_pydev_bundle._pydev_imports_tipper', '_pydev_bundle._pydev_calltip_util', '_pydevd_bundle.pydevd_safe_repr', '_pydevd_bundle.pydevd_resolver', '_pydevd_bundle.pydevd_extension_api', '_pydevd_bundle.pydevd_xml', '_pydevd_bundle.pydevd_dont_trace', '_pydevd_frame_eval.vendored', '_pydevd_frame_eval.vendored.bytecode.flags', '_pydevd_frame_eval.vendored.bytecode.instr', '_pydevd_frame_eval.vendored.bytecode.bytecode', '_pydevd_frame_eval.vendored.bytecode.concrete', '_pydevd_frame_eval.vendored.bytecode.cfg', '_pydevd_frame_eval.vendored.bytecode', '_pydevd_bundle.pydevd_bytecode_utils', '_pydevd_bundle.pydevd_cython', '_pydevd_bundle.pydevd_cython_wrapper', '_pydevd_bundle.pydevd_additional_thread_info', '_pydevd_bundle.pydevd_thread_lifecycle', '_pydevd_bundle.pydevd_save_locals', '_pydevd_bundle.pydevd_defaults', '_pydev_bundle.pydev_monkey', 'pydevd_tracing', '_pydevd_bundle.pydevd_daemon_thread', '_pydevd_bundle.pydevd_timeout', '_pydevd_bundle.pydevd_vars', '_pydev_bundle.pydev_console_utils', '_pydevd_bundle.pydevd_import_class', '_pydevd_bundle.pydevd_breakpoints', '_pydevd_bundle.pydevd_custom_frames', '_pydevd_bundle.pydevd_dont_trace_files', '_pydevd_bundle.pydevd_net_command', '_pydev_bundle.pydev_umd', 'pydevconsole', '_pydev_bundle._pydev_completer', '_pydevd_bundle.pydevd_net_command_factory_xml', '_pydevd_bundle.pydevd_frame', '_pydevd_bundle.pydevd_additional_thread_info_regular', '_pydevd_bundle.pydevd_trace_dispatch', '_pydevd_frame_eval.pydevd_frame_eval_main', '_pydevd_bundle.pydevd_source_mapping', 'pydevd_concurrency_analyser.pydevd_thread_wrappers', 'pydevd_concurrency_analyser.pydevd_concurrency_logger', '_pydevd_bundle._debug_adapter', '_pydevd_bundle._debug_adapter.pydevd_schema_log', '_pydevd_bundle._debug_adapter.pydevd_base_schema', '_pydevd_bundle._debug_adapter.pydevd_schema', '_pydevd_bundle.pydevd_reload', '_pydev_bundle.fsnotify', '_pydevd_bundle.pydevd_console', '_pydevd_bundle.pydevd_comm', '_pydevd_bundle.pydevd_net_command_factory_json', '_pydevd_bundle.pydevd_collect_bytecode_info', '_pydevd_bundle.pydevd_api', '_pydevd_bundle.pydevd_json_debug_options', '_pydevd_bundle.pydevd_process_net_command_json', '_pydevd_bundle.pydevd_traceproperty', '_pydevd_bundle.pydevd_process_net_command', '_pydevd_bundle.pydevd_suspended_frames', '_pydevd_bundle.pydevd_trace_api', 'pydevd_plugins.django_debug', 'pydevd_plugins.jinja2_debug', '_pydevd_bundle.pydevd_plugin_utils', 'pydevd_plugins.extensions.types', 'pydevd_plugins.extensions.types.pydevd_helpers', 'pydevd_plugins.extensions.types.pydevd_plugin_numpy_types', 'pydevd_plugins.extensions.types.pydevd_plugins_django_form_str', 'pydevd', 'debugpy._vendored.force_pydevd', 'debugpy.server', 'debugpy.adapter', 'debugpy.common.timestamp', 'debugpy.common.util', 'debugpy.common.log', 'debugpy.common.sockets', 'debugpy.server.api', 'ipykernel.debugger', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'IPython.core.completerlib', 'storemagic', 'pyforest._importable', 'pyforest.user_specific_imports', 'pyforest._imports', 'pyforest.utils', 'pyforest', 'logging.config', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.types', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'jupyter_require', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'mkl._mklinit', 'mkl._py_mkl_service', 'mkl', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._add_newdocs_scalars', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'mmap', 'pandas._typing', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.tzconversion', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.tslibs', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.hashtable', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._libs', 'pandas.util._decorators', 'pandas.core', 'pandas.core.util', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas._libs.hashing', 'pandas.core.dtypes', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.util.hashing', 'pandas.util', 'pandas.util.version', 'pandas.compat.numpy', 'pyarrow._generated_version', '_cython_0_29_28', 'cloudpickle.compat', 'typing_extensions', 'cloudpickle.cloudpickle', 'cloudpickle.cloudpickle_fast', 'cloudpickle', 'pyarrow.util', 'pyarrow.lib', 'pyarrow._hdfsio', 'pyarrow.filesystem', 'pyarrow.hdfs', 'pyarrow.ipc', 'pyarrow.serialization', 'pyarrow.types', 'pyarrow', 'pandas.compat.pyarrow', 'pandas.compat', 'pandas.core.config_init', 'pandas.core.dtypes.missing', 'pandas.util._exceptions', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.array_algos', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.array_algos.take', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.roperator', 'pandas._libs.ops', 'pandas.core.computation', 'numexpr.__config__', 'numexpr.interpreter', 'numexpr.expressions', 'numexpr.utils', 'numexpr.necompiler', 'numexpr.version', 'numexpr', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.core.sorting', 'pandas.core.arrays.base', 'bottleneck.reduce', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.move', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.slow', 'bottleneck.benchmark', 'bottleneck.benchmark.autotimeit', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'bottleneck._pytesttester', 'bottleneck._version', 'bottleneck', 'pandas.core.nanops', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', 'pandas._libs.arrays', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.core.arrays.numeric', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.tseries.offsets', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.floating', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.dtypes.concat', 'pandas.core.array_algos.putmask', 'pandas.core.indexes.frozen', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pyarrow._compute', 'pyarrow._compute_docstrings', 'pyarrow.vendored', 'pyarrow.vendored.docscrape', 'pyarrow.compute', 'pandas.core.arrays.string_arrow', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.flags', 'pandas._libs.reduction', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.times', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas.core.aggregation', 'pandas.core.apply', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas.core.reshape', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.quantile', 'pandas.core.array_algos.replace', 'pandas.core.internals.blocks', 'pandas.core.internals.api', 'pandas.core.internals.base', 'pandas.core.internals.array_manager', 'pandas.core.internals.ops', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.core.internals', 'pandas.core.reshape.concat', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.describe', 'pandas.core.internals.construction', 'pandas.core.shared_docs', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.doc', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.online', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.generic', 'pandas.core.reshape.util', 'pandas.core.reshape.melt', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas.core.series', 'pandas.io.formats.info', 'pandas.core.frame', 'pandas.core.groupby.base', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.engines', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers.base_parser', 'pandas.io.parsers.c_parser_wrapper', 'pandas.io.parsers.python_parser', 'pandas.io.parsers.readers', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.formats.excel', 'pandas.io.excel._odswriter', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.xml', 'pandas.io.api', 'pandas.util._tester', 'pandas._testing._random', 'pandas._testing.contexts', 'pandas._testing._io', 'pandas._testing._warnings', 'cmath', 'pandas._libs.testing', 'pandas._testing.asserters', 'pandas._testing.compat', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'matplotlib', 'matplotlib._api.deprecation', 'matplotlib._api', 'matplotlib._c_internal_utils', 'matplotlib.cbook', 'matplotlib.docstring', 'PIL._version', 'PIL', 'defusedxml.common', 'defusedxml', 'xml.etree', 'xml.etree.ElementPath', '_elementtree', 'xml.etree.ElementTree', 'defusedxml.ElementTree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'matplotlib._animation_data', 'matplotlib.animation', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImagePalette', 'PIL.ImageSequence', 'PIL.PngImagePlugin', 'matplotlib._path', 'matplotlib.bezier', 'matplotlib.path', 'matplotlib.transforms', 'matplotlib.ticker', 'matplotlib.scale', 'matplotlib._color_data', 'matplotlib.colors', 'pyparsing.util', 'pyparsing.unicode', 'pyparsing.exceptions', 'pyparsing.actions', 'pyparsing.results', 'pyparsing.core', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib._enums', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver', 'dateutil.rrule', 'matplotlib.units', 'matplotlib.dates']
2023-01-26 10:26:45,154 [32872] DEBUG    matplotlib:224: [JupyterRequire] CACHEDIR=C:\Users\sunny\.matplotlib
2023-01-26 10:26:45,159 [32872] DEBUG    matplotlib.font_manager:1439: [JupyterRequire] Using fontManager instance from C:\Users\sunny\.matplotlib\fontlist-v330.json
2023-01-26 10:26:45,396 [32872] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-01-26 10:26:45,400 [32872] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-01-26 10:27:01,581 [32872] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2023-01-26 10:27:01,581 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,582 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,582 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,582 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-26 10:27:01,582 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,582 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,582 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-26 10:27:01,582 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,582 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,583 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,583 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,583 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,583 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,583 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-26 10:27:01,583 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,583 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-26 10:27:01,583 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,583 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,584 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-01-26 10:27:01,584 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,584 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-01-26 10:27:01,584 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-01-26 10:27:01,584 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,584 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,584 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,584 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,584 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,585 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-26 10:27:01,585 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,585 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,585 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,585 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,585 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,585 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-26 10:27:01,585 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,585 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,586 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,586 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,586 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,586 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,586 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,586 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2023-01-26 10:27:01,586 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,586 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,586 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,587 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2023-01-26 10:27:01,587 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,587 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,587 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,587 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2023-01-26 10:27:01,587 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,587 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,587 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,587 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,588 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,588 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,588 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,588 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,588 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,588 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2023-01-26 10:27:01,588 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2023-01-26 10:27:01,588 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2023-01-26 10:27:01,588 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2023-01-26 10:27:01,589 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,590 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,590 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,590 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2023-01-26 10:27:01,590 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,590 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,590 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,590 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2023-01-26 10:27:01,590 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,590 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2023-01-26 10:27:01,590 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sitka' (SitkaVF.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,590 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,591 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2023-01-26 10:27:01,591 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,591 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,591 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,591 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,591 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2023-01-26 10:27:01,591 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,591 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,591 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,591 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,591 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,591 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2023-01-26 10:27:01,591 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,591 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,592 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,592 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,592 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2023-01-26 10:27:01,592 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,592 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,592 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,592 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,592 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,592 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,593 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,593 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,593 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,593 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,593 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,593 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,593 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,593 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,593 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,594 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2023-01-26 10:27:01,594 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,594 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,594 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,594 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,594 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,594 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2023-01-26 10:27:01,594 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,594 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2023-01-26 10:27:01,595 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2023-01-26 10:27:01,595 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,595 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,595 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2023-01-26 10:27:01,595 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,595 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,595 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2023-01-26 10:27:01,595 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,595 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2023-01-26 10:27:01,596 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,596 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,596 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,596 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2023-01-26 10:27:01,596 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2023-01-26 10:27:01,596 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2023-01-26 10:27:01,596 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2023-01-26 10:27:01,596 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,596 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,597 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,597 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,597 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,597 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,597 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,597 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,597 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,597 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2023-01-26 10:27:01,597 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,598 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2023-01-26 10:27:01,598 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,598 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,598 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,598 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,598 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,598 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2023-01-26 10:27:01,598 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,598 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,599 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2023-01-26 10:27:01,599 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2023-01-26 10:27:01,599 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Variable' (SegUIVar.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,599 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,599 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,599 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,599 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,599 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,599 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,600 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,600 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,600 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,600 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,600 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,600 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,600 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2023-01-26 10:27:01,600 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2023-01-26 10:27:01,600 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2023-01-26 10:27:01,601 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,601 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2023-01-26 10:27:01,601 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,601 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,601 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,601 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,601 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2023-01-26 10:27:01,601 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2023-01-26 10:27:01,601 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2023-01-26 10:27:01,601 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,601 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,601 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,601 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2023-01-26 10:27:01,601 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2023-01-26 10:27:01,603 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,603 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,603 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2023-01-26 10:27:01,603 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,603 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,603 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2023-01-26 10:27:01,603 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,603 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,603 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,604 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2023-01-26 10:27:01,604 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,604 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,604 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,604 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2023-01-26 10:27:01,604 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,604 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2023-01-26 10:27:01,604 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,604 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2023-01-26 10:27:01,604 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,605 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,605 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,605 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,605 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,605 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,605 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2023-01-26 10:27:01,605 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2023-01-26 10:27:01,605 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2023-01-26 10:27:01,605 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2023-01-26 10:27:01,606 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2023-01-26 10:27:01,606 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,606 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,606 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,606 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,606 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,606 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,606 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,606 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,607 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,607 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,607 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,607 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,607 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,607 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,607 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,607 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,607 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2023-01-26 10:27:01,608 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2023-01-26 10:27:01,608 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,608 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,608 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2023-01-26 10:27:01,608 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,608 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,608 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,608 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2023-01-26 10:27:01,608 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,609 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2023-01-26 10:27:01,609 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,609 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,609 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,609 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,609 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,609 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,609 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,609 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,610 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2023-01-26 10:27:01,610 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,610 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,610 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,610 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,610 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,610 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sitka' (SitkaVF-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,610 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,610 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2023-01-26 10:27:01,611 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,611 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,611 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,611 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2023-01-26 10:27:01,611 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,611 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,611 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,611 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,611 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,611 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2023-01-26 10:27:01,611 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2023-01-26 10:27:01,611 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,611 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,612 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,612 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,612 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,612 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,613 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2023-01-26 10:27:01,613 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,613 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2023-01-26 10:27:01,613 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,613 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,613 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2023-01-26 10:27:01,613 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,613 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,613 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,613 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,614 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,614 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2023-01-26 10:27:01,614 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2023-01-26 10:27:01,614 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2023-01-26 10:27:01,614 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,614 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2023-01-26 10:27:01,614 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2023-01-26 10:27:01,614 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,614 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,615 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2023-01-26 10:27:01,615 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,615 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2023-01-26 10:27:01,615 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,615 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,615 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,615 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2023-01-26 10:27:01,615 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2023-01-26 10:27:01,615 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,616 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,616 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,616 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,616 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,616 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2023-01-26 10:27:01,616 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2023-01-26 10:27:01,616 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,616 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,617 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2023-01-26 10:27:01,617 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,617 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2023-01-26 10:27:01,617 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2023-01-26 10:27:01,617 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2023-01-26 10:27:01,617 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,617 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,617 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2023-01-26 10:27:01,617 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,618 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,618 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,618 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,618 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,618 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,618 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,618 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,618 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,618 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,619 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,619 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,619 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2023-01-26 10:27:01,619 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,619 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2023-01-26 10:27:01,619 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2023-01-26 10:27:01,619 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2023-01-26 10:27:01,619 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2023-01-26 10:27:01,619 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2023-01-26 10:27:01,620 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,620 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,620 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,620 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,620 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,620 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,620 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,620 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,620 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,621 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,621 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,621 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,621 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,621 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,621 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,621 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,621 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2023-01-26 10:27:01,621 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,621 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2023-01-26 10:27:01,622 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2023-01-26 10:27:01,622 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2023-01-26 10:27:01,622 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2023-01-26 10:27:01,622 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,622 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,622 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,622 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,622 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,623 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2023-01-26 10:27:01,623 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,623 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,623 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,623 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2023-01-26 10:27:01,623 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,623 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2023-01-26 10:27:01,623 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2023-01-26 10:27:01,623 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,624 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2023-01-26 10:27:01,624 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2023-01-26 10:27:01,624 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2023-01-26 10:27:01,624 [32872] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Fluent Icons' (SegoeIcons.ttf) normal normal 400 normal>) = 10.05
2023-01-26 10:27:01,624 [32872] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2023-01-26 10:27:21,325 [32872] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\numpy\__init__.py
2023-01-26 10:27:21,355 [32872] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\numpy\__init__.pyi
2023-01-26 10:27:21,504 [32872] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\2and3\builtins.pyi
2023-01-26 10:27:21,578 [32872] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\typing.py
2023-01-26 10:27:21,593 [32872] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\typing.pyi
2023-01-26 10:27:25,181 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 10:27:25,181 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-01-26 10:27:25,183 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-01-26 10:27:25,183 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-26 10:27:25,183 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 10:27:25,194 [32872] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\__init__.py
2023-01-26 10:27:30,820 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 10:27:30,821 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-01-26 10:27:30,821 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-01-26 10:27:30,821 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-26 10:27:30,822 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 10:27:33,947 [32872] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\reshape\reshape.py
2023-01-26 10:27:33,962 [32872] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\__init__.py
2023-01-26 10:27:34,062 [32872] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\frame.py
2023-01-26 10:27:34,167 [32872] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\generic.py
2023-01-26 10:27:34,204 [32872] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\base.py
2023-01-26 10:27:34,216 [32872] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\accessor.py
2023-01-26 10:27:34,309 [32872] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\indexing.py
2023-01-26 10:27:34,333 [32872] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\arraylike.py
2023-01-26 10:27:34,346 [32872] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\_typing.py
2023-01-26 10:27:34,361 [32872] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\sys.pyi
2023-01-26 10:27:34,383 [32872] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\types.py
2023-01-26 10:27:34,393 [32872] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\types.pyi
2023-01-26 10:54:58,116 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 10:54:58,118 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-01-26 10:54:58,118 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-01-26 10:54:58,119 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-26 10:54:58,120 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 10:56:01,238 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 10:56:01,239 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-01-26 10:56:01,239 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-01-26 10:56:01,240 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-26 10:56:01,241 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 10:56:01,263 [32872] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\numpy\core\fromnumeric.py
2023-01-26 10:58:10,978 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 10:58:10,979 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-01-26 10:58:10,979 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-01-26 10:58:10,980 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-26 10:58:10,980 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:03:31,634 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:03:31,635 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 4
2023-01-26 11:03:31,635 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:4]
2023-01-26 11:03:31,638 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 4 (to 3 in part parser)
2023-01-26 11:03:31,639 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:17:02,205 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:17:02,205 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 4; new: 3
2023-01-26 11:17:02,206 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:4] new[1:3]
2023-01-26 11:17:02,206 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-01-26 11:17:02,206 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:17:26,663 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:17:26,664 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 8
2023-01-26 11:17:26,665 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2023-01-26 11:17:26,665 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2023-01-26 11:17:26,666 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 8 (to 7 in part parser)
2023-01-26 11:17:26,666 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:8]
2023-01-26 11:17:26,667 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:17:32,230 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:17:32,230 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 8; new: 9
2023-01-26 11:17:32,230 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:7] new[1:7]
2023-01-26 11:17:32,231 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2023-01-26 11:17:32,232 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 9 (to 8 in part parser)
2023-01-26 11:17:32,232 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[8:8] new[8:9]
2023-01-26 11:17:32,232 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:17:38,671 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:17:38,671 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 9; new: 9
2023-01-26 11:17:38,671 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:8] new[1:8]
2023-01-26 11:17:38,673 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2023-01-26 11:17:38,674 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 9 (to 8 in part parser)
2023-01-26 11:17:38,674 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[9:9] new[9:9]
2023-01-26 11:17:38,674 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:17:52,044 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:17:52,045 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 9; new: 9
2023-01-26 11:17:52,045 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:8] new[1:8]
2023-01-26 11:17:52,046 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2023-01-26 11:17:52,047 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 9 (to 8 in part parser)
2023-01-26 11:17:52,047 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[9:9] new[9:9]
2023-01-26 11:17:52,047 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:17:54,518 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:17:54,519 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 9; new: 9
2023-01-26 11:17:54,519 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:8] new[1:8]
2023-01-26 11:17:54,519 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2023-01-26 11:17:54,520 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 9 (to 8 in part parser)
2023-01-26 11:17:54,521 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[9:9] new[9:9]
2023-01-26 11:17:54,521 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:18:24,056 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:18:24,056 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 9; new: 11
2023-01-26 11:18:24,056 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:8] new[1:8]
2023-01-26 11:18:24,057 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2023-01-26 11:18:24,060 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 11 (to 10 in part parser)
2023-01-26 11:18:24,060 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[9:9] new[9:11]
2023-01-26 11:18:24,060 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:18:26,824 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:18:26,825 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 11; new: 11
2023-01-26 11:18:26,825 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:10] new[1:10]
2023-01-26 11:18:26,825 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2023-01-26 11:18:26,828 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 11 (to 10 in part parser)
2023-01-26 11:18:26,828 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[11:11] new[11:11]
2023-01-26 11:18:26,828 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:18:29,164 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:18:29,165 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 11; new: 11
2023-01-26 11:18:29,165 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:10] new[1:10]
2023-01-26 11:18:29,165 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2023-01-26 11:18:29,167 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 11 (to 10 in part parser)
2023-01-26 11:18:29,167 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[11:11] new[11:11]
2023-01-26 11:18:29,167 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:19:16,721 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:19:16,722 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 11; new: 14
2023-01-26 11:19:16,722 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:10] new[1:10]
2023-01-26 11:19:16,722 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2023-01-26 11:19:16,725 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 14 (to 13 in part parser)
2023-01-26 11:19:16,726 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[11:11] new[11:14]
2023-01-26 11:19:16,726 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:23:56,240 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:23:56,242 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 14; new: 21
2023-01-26 11:23:56,242 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:12] new[1:12]
2023-01-26 11:23:56,243 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2023-01-26 11:23:56,246 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 21 (to 20 in part parser)
2023-01-26 11:23:56,246 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[13:14] new[13:21]
2023-01-26 11:23:56,246 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:24:07,798 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:24:07,798 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 21; new: 22
2023-01-26 11:24:07,798 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:20] new[1:20]
2023-01-26 11:24:07,798 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2023-01-26 11:24:07,802 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 22 (to 21 in part parser)
2023-01-26 11:24:07,802 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[21:21] new[21:22]
2023-01-26 11:24:07,802 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:24:12,660 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:24:12,660 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 22; new: 22
2023-01-26 11:24:12,661 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:21] new[1:21]
2023-01-26 11:24:12,661 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2023-01-26 11:24:12,663 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 22 (to 21 in part parser)
2023-01-26 11:24:12,663 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[22:22] new[22:22]
2023-01-26 11:24:12,663 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:24:54,396 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:24:54,396 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 22; new: 1
2023-01-26 11:24:54,397 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:22] new[1:1]
2023-01-26 11:24:54,397 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-26 11:24:54,397 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:24:54,429 [32872] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\matplotlib\pyplot.py
2023-01-26 11:29:01,532 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:29:01,533 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 29
2023-01-26 11:29:01,533 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:29]
2023-01-26 11:29:01,537 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 29 (to 28 in part parser)
2023-01-26 11:29:01,537 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:38:26,113 [32872] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\AppData\Local\Temp/ipykernel_32872/1028535629.py:15: RuntimeWarning: divide by zero encountered in log
  error = np.sum(np.sum(-(np.log(probs)*y),axis = 1))/300

2023-01-26 11:38:26,114 [32872] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\AppData\Local\Temp/ipykernel_32872/1028535629.py:15: RuntimeWarning: invalid value encountered in multiply
  error = np.sum(np.sum(-(np.log(probs)*y),axis = 1))/300

2023-01-26 11:40:51,352 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:40:51,353 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 29; new: 31
2023-01-26 11:40:51,353 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:2] new[1:2]
2023-01-26 11:40:51,354 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 3 in part parser)
2023-01-26 11:40:51,354 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[3:4] new[3:4]
2023-01-26 11:40:51,354 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[4:4] new[3:4]
2023-01-26 11:40:51,354 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[delete] old[5:5] new[5:4]
2023-01-26 11:40:51,354 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[6:6] new[5:5]
2023-01-26 11:40:51,354 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[6:6] new[5:5]
2023-01-26 11:40:51,355 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[delete] old[7:7] new[6:5]
2023-01-26 11:40:51,355 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[8:16] new[6:14]
2023-01-26 11:40:51,355 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[8:8] new[6:6]
2023-01-26 11:40:51,357 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 7 to 31 (to 30 in part parser)
2023-01-26 11:40:51,357 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[delete] old[17:18] new[15:14]
2023-01-26 11:40:51,357 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[19:19] new[15:15]
2023-01-26 11:40:51,358 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[20:20] new[16:19]
2023-01-26 11:40:51,358 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[21:21] new[20:20]
2023-01-26 11:40:51,358 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[insert] old[22:21] new[21:21]
2023-01-26 11:40:51,358 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[22:27] new[22:27]
2023-01-26 11:40:51,358 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[28:29] new[28:31]
2023-01-26 11:40:51,358 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:43:30,592 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:43:30,593 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 31; new: 1
2023-01-26 11:43:30,593 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:31] new[1:1]
2023-01-26 11:43:30,593 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-26 11:43:30,593 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:51:10,419 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:51:10,420 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 7
2023-01-26 11:51:10,420 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:7]
2023-01-26 11:51:10,422 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 7 (to 6 in part parser)
2023-01-26 11:51:10,422 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:51:15,754 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:51:15,755 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 7; new: 7
2023-01-26 11:51:15,755 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:6] new[1:6]
2023-01-26 11:51:15,755 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:6] new[1:4]
2023-01-26 11:51:15,756 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 5 to 7 (to 6 in part parser)
2023-01-26 11:51:15,756 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[7:7] new[7:7]
2023-01-26 11:51:15,756 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:53:12,057 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:53:12,057 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 7; new: 1
2023-01-26 11:53:12,057 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:7] new[1:1]
2023-01-26 11:53:12,058 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-26 11:53:12,058 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:53:35,202 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:53:35,203 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 2
2023-01-26 11:53:35,203 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:2]
2023-01-26 11:53:35,204 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2023-01-26 11:53:35,204 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:53:37,111 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:53:37,112 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 2
2023-01-26 11:53:37,112 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2023-01-26 11:53:37,112 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2023-01-26 11:53:37,112 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:2] new[2:2]
2023-01-26 11:53:37,113 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 2 (to 1 in part parser)
2023-01-26 11:53:37,114 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:53:56,463 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:53:56,463 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 2
2023-01-26 11:53:56,463 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2023-01-26 11:53:56,464 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2023-01-26 11:53:56,464 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:2] new[2:2]
2023-01-26 11:53:56,464 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 2 (to 1 in part parser)
2023-01-26 11:53:56,464 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:54:03,259 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:54:03,260 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 2
2023-01-26 11:54:03,260 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2023-01-26 11:54:03,261 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2023-01-26 11:54:03,261 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:2] new[2:2]
2023-01-26 11:54:03,262 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 2 (to 1 in part parser)
2023-01-26 11:54:03,262 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:54:09,766 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:54:09,766 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 2
2023-01-26 11:54:09,766 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2023-01-26 11:54:09,766 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2023-01-26 11:54:09,766 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:2] new[2:2]
2023-01-26 11:54:09,767 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 2 (to 1 in part parser)
2023-01-26 11:54:09,767 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:54:16,303 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:54:16,303 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 2
2023-01-26 11:54:16,303 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2023-01-26 11:54:16,303 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2023-01-26 11:54:16,303 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:2] new[2:2]
2023-01-26 11:54:16,305 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 2 (to 1 in part parser)
2023-01-26 11:54:16,305 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:54:17,961 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:54:17,962 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 2
2023-01-26 11:54:17,962 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2023-01-26 11:54:17,963 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2023-01-26 11:54:17,963 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:2] new[2:2]
2023-01-26 11:54:17,963 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 2 (to 1 in part parser)
2023-01-26 11:54:17,964 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:54:18,146 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:54:18,147 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 2
2023-01-26 11:54:18,147 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2023-01-26 11:54:18,147 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2023-01-26 11:54:18,149 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:2] new[2:2]
2023-01-26 11:54:18,149 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 2 (to 1 in part parser)
2023-01-26 11:54:18,150 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:54:39,757 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:54:39,757 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 2
2023-01-26 11:54:39,759 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2023-01-26 11:54:39,759 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2023-01-26 11:54:39,759 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:2] new[2:2]
2023-01-26 11:54:39,759 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 2 (to 1 in part parser)
2023-01-26 11:54:39,760 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:56:14,649 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:56:14,649 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 5
2023-01-26 11:56:14,649 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:2] new[1:5]
2023-01-26 11:56:14,650 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 5 (to 4 in part parser)
2023-01-26 11:56:14,651 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:56:16,804 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:56:16,804 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 5; new: 5
2023-01-26 11:56:16,806 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:4] new[1:4]
2023-01-26 11:56:16,806 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:4] new[1:4]
2023-01-26 11:56:16,806 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[5:5] new[5:5]
2023-01-26 11:56:16,807 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 5 to 5 (to 4 in part parser)
2023-01-26 11:56:16,807 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:56:45,055 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:56:45,056 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 5; new: 6
2023-01-26 11:56:45,056 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:4] new[1:4]
2023-01-26 11:56:45,057 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:4] new[1:4]
2023-01-26 11:56:45,057 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[5:5] new[5:6]
2023-01-26 11:56:45,057 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 5 to 6 (to 5 in part parser)
2023-01-26 11:56:45,058 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:57:02,556 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:57:02,557 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 6; new: 6
2023-01-26 11:57:02,557 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:5] new[1:5]
2023-01-26 11:57:02,557 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:5] new[1:5]
2023-01-26 11:57:02,557 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[6:6] new[6:6]
2023-01-26 11:57:02,558 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 6 to 6 (to 5 in part parser)
2023-01-26 11:57:02,558 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:57:06,304 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:57:06,305 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 6; new: 6
2023-01-26 11:57:06,305 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:5] new[1:5]
2023-01-26 11:57:06,307 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:5] new[1:5]
2023-01-26 11:57:06,307 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[6:6] new[6:6]
2023-01-26 11:57:06,307 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 6 to 6 (to 5 in part parser)
2023-01-26 11:57:06,307 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:57:10,843 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:57:10,844 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 6; new: 6
2023-01-26 11:57:10,844 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:5] new[1:5]
2023-01-26 11:57:10,845 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:5] new[1:5]
2023-01-26 11:57:10,845 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[6:6] new[6:6]
2023-01-26 11:57:10,845 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 6 to 6 (to 5 in part parser)
2023-01-26 11:57:10,845 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:58:06,199 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:58:06,199 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 6; new: 7
2023-01-26 11:58:06,200 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:5] new[1:5]
2023-01-26 11:58:06,200 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:5] new[1:5]
2023-01-26 11:58:06,201 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[6:6] new[6:7]
2023-01-26 11:58:06,201 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 6 to 7 (to 6 in part parser)
2023-01-26 11:58:06,202 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:58:09,218 [32872] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\numpy\core\multiarray.py
2023-01-26 11:58:09,289 [32872] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\anaconda3\lib\site-packages\jedi\inference\compiled\subprocess\functions.py:22: UserWarning: Module numpy._multiarray_umath not importable in path ['C:\\Users\\sunny\\Data Science Studies\\GitHub_Desktop\\Neural Networks', 'C:\\Users\\sunny\\anaconda3\\python39.zip', 'C:\\Users\\sunny\\anaconda3\\DLLs', 'C:\\Users\\sunny\\anaconda3\\lib', 'C:\\Users\\sunny\\anaconda3', 'C:\\Users\\sunny\\AppData\\Roaming\\Python\\Python39\\site-packages', 'C:\\Users\\sunny\\anaconda3\\lib\\site-packages', 'C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\locket-0.2.1-py3.9.egg', 'C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\win32', 'C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\win32\\lib', 'C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\Pythonwin', 'C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\IPython\\extensions', 'C:\\Users\\sunny\\.ipython'].
  return access.load_module(inference_state, **kwargs)

2023-01-26 11:58:10,172 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:58:10,173 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 7; new: 7
2023-01-26 11:58:10,173 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:6] new[1:6]
2023-01-26 11:58:10,174 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:6] new[1:6]
2023-01-26 11:58:10,174 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[7:7] new[7:7]
2023-01-26 11:58:10,174 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 7 to 7 (to 6 in part parser)
2023-01-26 11:58:10,175 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:58:10,260 [32872] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\anaconda3\lib\site-packages\jedi\inference\compiled\subprocess\functions.py:22: UserWarning: Module numpy._multiarray_umath not importable in path ['C:\\Users\\sunny\\Data Science Studies\\GitHub_Desktop\\Neural Networks', 'C:\\Users\\sunny\\anaconda3\\python39.zip', 'C:\\Users\\sunny\\anaconda3\\DLLs', 'C:\\Users\\sunny\\anaconda3\\lib', 'C:\\Users\\sunny\\anaconda3', 'C:\\Users\\sunny\\AppData\\Roaming\\Python\\Python39\\site-packages', 'C:\\Users\\sunny\\anaconda3\\lib\\site-packages', 'C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\locket-0.2.1-py3.9.egg', 'C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\win32', 'C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\win32\\lib', 'C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\Pythonwin', 'C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\IPython\\extensions', 'C:\\Users\\sunny\\.ipython'].
  return access.load_module(inference_state, **kwargs)

2023-01-26 11:58:10,406 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:58:10,407 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 7; new: 7
2023-01-26 11:58:10,407 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:6] new[1:6]
2023-01-26 11:58:10,407 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:6] new[1:6]
2023-01-26 11:58:10,407 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[7:7] new[7:7]
2023-01-26 11:58:10,408 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 7 to 7 (to 6 in part parser)
2023-01-26 11:58:10,408 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:58:10,494 [32872] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\anaconda3\lib\site-packages\jedi\inference\compiled\subprocess\functions.py:22: UserWarning: Module numpy._multiarray_umath not importable in path ['C:\\Users\\sunny\\Data Science Studies\\GitHub_Desktop\\Neural Networks', 'C:\\Users\\sunny\\anaconda3\\python39.zip', 'C:\\Users\\sunny\\anaconda3\\DLLs', 'C:\\Users\\sunny\\anaconda3\\lib', 'C:\\Users\\sunny\\anaconda3', 'C:\\Users\\sunny\\AppData\\Roaming\\Python\\Python39\\site-packages', 'C:\\Users\\sunny\\anaconda3\\lib\\site-packages', 'C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\locket-0.2.1-py3.9.egg', 'C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\win32', 'C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\win32\\lib', 'C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\Pythonwin', 'C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\IPython\\extensions', 'C:\\Users\\sunny\\.ipython'].
  return access.load_module(inference_state, **kwargs)

2023-01-26 11:58:16,158 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:58:16,159 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 7; new: 7
2023-01-26 11:58:16,160 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:6] new[1:6]
2023-01-26 11:58:16,160 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:6] new[1:6]
2023-01-26 11:58:16,160 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[7:7] new[7:7]
2023-01-26 11:58:16,161 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 7 to 7 (to 6 in part parser)
2023-01-26 11:58:16,161 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:58:16,242 [32872] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\anaconda3\lib\site-packages\jedi\inference\compiled\subprocess\functions.py:22: UserWarning: Module numpy._multiarray_umath not importable in path ['C:\\Users\\sunny\\Data Science Studies\\GitHub_Desktop\\Neural Networks', 'C:\\Users\\sunny\\anaconda3\\python39.zip', 'C:\\Users\\sunny\\anaconda3\\DLLs', 'C:\\Users\\sunny\\anaconda3\\lib', 'C:\\Users\\sunny\\anaconda3', 'C:\\Users\\sunny\\AppData\\Roaming\\Python\\Python39\\site-packages', 'C:\\Users\\sunny\\anaconda3\\lib\\site-packages', 'C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\locket-0.2.1-py3.9.egg', 'C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\win32', 'C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\win32\\lib', 'C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\Pythonwin', 'C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\IPython\\extensions', 'C:\\Users\\sunny\\.ipython'].
  return access.load_module(inference_state, **kwargs)

2023-01-26 11:58:22,455 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:58:22,455 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 7; new: 7
2023-01-26 11:58:22,455 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:6] new[1:6]
2023-01-26 11:58:22,456 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:6] new[1:6]
2023-01-26 11:58:22,456 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[7:7] new[7:7]
2023-01-26 11:58:22,457 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 7 to 7 (to 6 in part parser)
2023-01-26 11:58:22,457 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:58:22,541 [32872] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\anaconda3\lib\site-packages\jedi\inference\compiled\subprocess\functions.py:22: UserWarning: Module numpy._multiarray_umath not importable in path ['C:\\Users\\sunny\\Data Science Studies\\GitHub_Desktop\\Neural Networks', 'C:\\Users\\sunny\\anaconda3\\python39.zip', 'C:\\Users\\sunny\\anaconda3\\DLLs', 'C:\\Users\\sunny\\anaconda3\\lib', 'C:\\Users\\sunny\\anaconda3', 'C:\\Users\\sunny\\AppData\\Roaming\\Python\\Python39\\site-packages', 'C:\\Users\\sunny\\anaconda3\\lib\\site-packages', 'C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\locket-0.2.1-py3.9.egg', 'C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\win32', 'C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\win32\\lib', 'C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\Pythonwin', 'C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\IPython\\extensions', 'C:\\Users\\sunny\\.ipython'].
  return access.load_module(inference_state, **kwargs)

2023-01-26 11:59:13,212 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 11:59:13,212 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 7; new: 7
2023-01-26 11:59:13,212 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:6] new[1:6]
2023-01-26 11:59:13,212 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:6] new[1:6]
2023-01-26 11:59:13,213 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[7:7] new[7:7]
2023-01-26 11:59:13,213 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 7 to 7 (to 6 in part parser)
2023-01-26 11:59:13,213 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 11:59:13,302 [32872] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\anaconda3\lib\site-packages\jedi\inference\compiled\subprocess\functions.py:22: UserWarning: Module numpy._multiarray_umath not importable in path ['C:\\Users\\sunny\\Data Science Studies\\GitHub_Desktop\\Neural Networks', 'C:\\Users\\sunny\\anaconda3\\python39.zip', 'C:\\Users\\sunny\\anaconda3\\DLLs', 'C:\\Users\\sunny\\anaconda3\\lib', 'C:\\Users\\sunny\\anaconda3', 'C:\\Users\\sunny\\AppData\\Roaming\\Python\\Python39\\site-packages', 'C:\\Users\\sunny\\anaconda3\\lib\\site-packages', 'C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\locket-0.2.1-py3.9.egg', 'C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\win32', 'C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\win32\\lib', 'C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\Pythonwin', 'C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\IPython\\extensions', 'C:\\Users\\sunny\\.ipython'].
  return access.load_module(inference_state, **kwargs)

2023-01-26 12:00:21,112 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:00:21,112 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 7; new: 8
2023-01-26 12:00:21,112 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:6] new[1:6]
2023-01-26 12:00:21,113 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:6] new[1:6]
2023-01-26 12:00:21,113 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[7:7] new[7:8]
2023-01-26 12:00:21,113 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 7 to 8 (to 7 in part parser)
2023-01-26 12:00:21,113 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:00:36,951 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:00:36,952 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 8; new: 8
2023-01-26 12:00:36,953 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:7] new[1:7]
2023-01-26 12:00:36,953 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:7] new[1:6]
2023-01-26 12:00:36,954 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 7 to 8 (to 7 in part parser)
2023-01-26 12:00:36,954 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[8:8] new[8:8]
2023-01-26 12:00:36,954 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:00:39,554 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:00:39,555 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 8; new: 8
2023-01-26 12:00:39,555 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:7] new[1:7]
2023-01-26 12:00:39,555 [32872] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:7] new[1:6]
2023-01-26 12:00:39,556 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 7 to 8 (to 7 in part parser)
2023-01-26 12:00:39,556 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[8:8] new[8:8]
2023-01-26 12:00:39,556 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:02:43,357 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:02:43,358 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 8; new: 1
2023-01-26 12:02:43,358 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:8] new[1:1]
2023-01-26 12:02:43,359 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-26 12:02:43,359 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:02:46,589 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:02:46,590 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-01-26 12:02:46,590 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-01-26 12:02:46,591 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-26 12:02:46,591 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:02:48,715 [32872] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\sklearn\__init__.py
2023-01-26 12:02:50,096 [32872] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\sklearn\datasets\__init__.py
2023-01-26 12:02:54,191 [32872] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:02:54,191 [32872] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-01-26 12:02:54,191 [32872] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-01-26 12:02:54,192 [32872] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-26 12:02:54,192 [32872] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:06:40,823 [29948] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-01-26 12:06:40,825 [29948] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-01-26 12:06:40,825 [29948] INFO     root:247: [JupyterRequire] Initializing comms.
2023-01-26 12:06:40,827 [29948] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-01-26 12:06:40,829 [29948] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-01-26 12:06:40,830 [29948] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-01-26 12:07:34,341 [29948] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2023-01-26 12:07:34,342 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,342 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,342 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,342 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-26 12:07:34,342 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,343 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,343 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-26 12:07:34,343 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,343 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,343 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,343 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,343 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,343 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,343 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-26 12:07:34,344 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,344 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-26 12:07:34,344 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,344 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,344 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-01-26 12:07:34,344 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,344 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-01-26 12:07:34,344 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-01-26 12:07:34,344 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,345 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,345 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,345 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,345 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,345 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-26 12:07:34,345 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,345 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,345 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,345 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,346 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,346 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-26 12:07:34,346 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,346 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,346 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,346 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,346 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,346 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,347 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,347 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2023-01-26 12:07:34,347 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,347 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,347 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,347 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2023-01-26 12:07:34,347 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,347 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,347 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,348 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2023-01-26 12:07:34,348 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,348 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,348 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,348 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,348 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,348 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,348 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,348 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,349 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,349 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2023-01-26 12:07:34,349 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2023-01-26 12:07:34,349 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2023-01-26 12:07:34,350 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2023-01-26 12:07:34,350 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,350 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,350 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,350 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2023-01-26 12:07:34,350 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,350 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,350 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,350 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2023-01-26 12:07:34,351 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,351 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2023-01-26 12:07:34,351 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sitka' (SitkaVF.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,351 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,351 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2023-01-26 12:07:34,351 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,351 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,351 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,351 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,352 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2023-01-26 12:07:34,352 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,352 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,352 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,352 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,352 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,352 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2023-01-26 12:07:34,352 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,352 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,353 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,353 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,353 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2023-01-26 12:07:34,353 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,353 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,353 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,353 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,353 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,354 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,354 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,354 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,354 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,354 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,354 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,354 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,354 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,354 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,355 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,355 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2023-01-26 12:07:34,355 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,355 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,355 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,355 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,355 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,355 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2023-01-26 12:07:34,355 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,356 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2023-01-26 12:07:34,356 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2023-01-26 12:07:34,356 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,356 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,356 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2023-01-26 12:07:34,356 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,356 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,356 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2023-01-26 12:07:34,356 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,357 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2023-01-26 12:07:34,357 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,357 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,357 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,357 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2023-01-26 12:07:34,357 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2023-01-26 12:07:34,357 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2023-01-26 12:07:34,357 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2023-01-26 12:07:34,357 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,358 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,358 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,358 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,358 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,358 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,358 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,358 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,358 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,358 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2023-01-26 12:07:34,358 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,358 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2023-01-26 12:07:34,358 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,358 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,359 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,359 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,359 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,359 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2023-01-26 12:07:34,359 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,359 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,359 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2023-01-26 12:07:34,359 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2023-01-26 12:07:34,359 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Variable' (SegUIVar.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,360 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,360 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,360 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,360 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,360 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,360 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,360 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,360 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,360 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,361 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,361 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,361 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,361 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2023-01-26 12:07:34,361 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2023-01-26 12:07:34,361 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2023-01-26 12:07:34,361 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,361 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2023-01-26 12:07:34,361 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,362 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,362 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,362 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,362 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2023-01-26 12:07:34,362 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2023-01-26 12:07:34,362 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2023-01-26 12:07:34,362 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,362 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,362 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,364 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2023-01-26 12:07:34,364 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2023-01-26 12:07:34,364 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,364 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,364 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2023-01-26 12:07:34,364 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,364 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,364 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2023-01-26 12:07:34,364 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,365 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,365 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,365 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2023-01-26 12:07:34,365 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,365 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,365 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,365 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2023-01-26 12:07:34,365 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,365 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2023-01-26 12:07:34,366 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,366 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2023-01-26 12:07:34,366 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,366 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,366 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,366 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,366 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,366 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,366 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2023-01-26 12:07:34,367 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2023-01-26 12:07:34,367 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2023-01-26 12:07:34,367 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2023-01-26 12:07:34,367 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2023-01-26 12:07:34,367 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,367 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,367 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,367 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,367 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,368 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,368 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,368 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,368 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,368 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,368 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,368 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,368 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,368 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,369 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,369 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,369 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2023-01-26 12:07:34,369 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2023-01-26 12:07:34,369 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,369 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,369 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2023-01-26 12:07:34,369 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,369 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,370 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,370 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2023-01-26 12:07:34,370 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,370 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2023-01-26 12:07:34,370 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,370 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,370 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,370 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,370 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,371 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,371 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,371 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,371 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2023-01-26 12:07:34,371 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,371 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,371 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,371 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,371 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,372 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sitka' (SitkaVF-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,372 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,372 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2023-01-26 12:07:34,372 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,372 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,372 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,372 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2023-01-26 12:07:34,372 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,372 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,373 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,373 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,373 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,373 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2023-01-26 12:07:34,373 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2023-01-26 12:07:34,373 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,373 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,373 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,373 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,374 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,374 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,374 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2023-01-26 12:07:34,374 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,374 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2023-01-26 12:07:34,374 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,374 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,374 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2023-01-26 12:07:34,374 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,375 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,375 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,375 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,375 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,375 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2023-01-26 12:07:34,375 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2023-01-26 12:07:34,375 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2023-01-26 12:07:34,375 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,375 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2023-01-26 12:07:34,376 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2023-01-26 12:07:34,376 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,376 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,376 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2023-01-26 12:07:34,376 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,376 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2023-01-26 12:07:34,376 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,376 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,376 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,377 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2023-01-26 12:07:34,377 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2023-01-26 12:07:34,377 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,377 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,377 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,377 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,377 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,377 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2023-01-26 12:07:34,377 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2023-01-26 12:07:34,378 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,378 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,378 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2023-01-26 12:07:34,378 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,378 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2023-01-26 12:07:34,378 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2023-01-26 12:07:34,378 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2023-01-26 12:07:34,378 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,378 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,379 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2023-01-26 12:07:34,379 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,379 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,379 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,379 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,379 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,379 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,379 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,379 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,379 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,379 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,379 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,379 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,379 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2023-01-26 12:07:34,380 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,380 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2023-01-26 12:07:34,380 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2023-01-26 12:07:34,380 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2023-01-26 12:07:34,380 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2023-01-26 12:07:34,380 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2023-01-26 12:07:34,380 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,380 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,380 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,381 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,381 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,381 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,381 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,381 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,381 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,381 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,381 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,381 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,382 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,382 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,382 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,382 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,382 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2023-01-26 12:07:34,382 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,382 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2023-01-26 12:07:34,382 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2023-01-26 12:07:34,383 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2023-01-26 12:07:34,383 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2023-01-26 12:07:34,383 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,383 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,383 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,383 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,383 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,383 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2023-01-26 12:07:34,383 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,384 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,384 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,384 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2023-01-26 12:07:34,384 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,384 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2023-01-26 12:07:34,384 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2023-01-26 12:07:34,384 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,384 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2023-01-26 12:07:34,384 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2023-01-26 12:07:34,385 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2023-01-26 12:07:34,385 [29948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Fluent Icons' (SegoeIcons.ttf) normal normal 400 normal>) = 10.05
2023-01-26 12:07:34,385 [29948] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2023-01-26 12:10:00,882 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:10:00,883 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 4
2023-01-26 12:10:00,883 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2023-01-26 12:10:00,884 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 4 (to 3 in part parser)
2023-01-26 12:10:00,884 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:4]
2023-01-26 12:10:00,884 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:10:00,965 [29948] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\2and3\builtins.pyi
2023-01-26 12:10:00,999 [29948] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\sys.pyi
2023-01-26 12:10:19,252 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:10:19,252 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 4; new: 5
2023-01-26 12:10:19,253 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2023-01-26 12:10:19,254 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 5 (to 4 in part parser)
2023-01-26 12:10:19,254 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:4] new[3:5]
2023-01-26 12:10:19,254 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:10:27,227 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:10:27,228 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 5; new: 6
2023-01-26 12:10:27,228 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:4] new[1:4]
2023-01-26 12:10:27,229 [29948] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:4] new[1:4]
2023-01-26 12:10:27,229 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[5:5] new[5:6]
2023-01-26 12:10:27,230 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 5 to 6 (to 5 in part parser)
2023-01-26 12:10:27,231 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:10:27,241 [29948] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\numpy\__init__.py
2023-01-26 12:11:30,809 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:11:30,809 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 6; new: 5
2023-01-26 12:11:30,810 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2023-01-26 12:11:30,811 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 5 (to 4 in part parser)
2023-01-26 12:11:30,811 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:3]
2023-01-26 12:11:30,811 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[4:4] new[4:4]
2023-01-26 12:11:30,811 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[5:6] new[5:5]
2023-01-26 12:11:30,811 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:11:49,907 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:11:49,909 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 5; new: 7
2023-01-26 12:11:49,909 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:4] new[1:4]
2023-01-26 12:11:49,909 [29948] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:4] new[1:4]
2023-01-26 12:11:49,909 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[5:5] new[5:7]
2023-01-26 12:11:49,910 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 5 to 7 (to 6 in part parser)
2023-01-26 12:11:49,910 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:13:06,509 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:13:06,509 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 7; new: 12
2023-01-26 12:13:06,509 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:6] new[1:6]
2023-01-26 12:13:06,510 [29948] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:6] new[1:6]
2023-01-26 12:13:06,510 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[7:7] new[7:12]
2023-01-26 12:13:06,511 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 7 to 9 (to 9 in part parser)
2023-01-26 12:13:06,511 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 10 to 12 (to 11 in part parser)
2023-01-26 12:13:06,512 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:13:15,586 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:13:15,587 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 12; new: 13
2023-01-26 12:13:15,587 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:11] new[1:11]
2023-01-26 12:13:15,588 [29948] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:11] new[1:11]
2023-01-26 12:13:15,588 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[12:12] new[12:13]
2023-01-26 12:13:15,589 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 12 to 13 (to 12 in part parser)
2023-01-26 12:13:15,589 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:13:17,915 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:13:17,916 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 13; new: 13
2023-01-26 12:13:17,916 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:12] new[1:12]
2023-01-26 12:13:17,916 [29948] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:12] new[1:12]
2023-01-26 12:13:17,916 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[13:13] new[13:13]
2023-01-26 12:13:17,917 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 13 to 13 (to 12 in part parser)
2023-01-26 12:13:17,917 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:13:23,139 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:13:23,139 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 13; new: 13
2023-01-26 12:13:23,140 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:12] new[1:12]
2023-01-26 12:13:23,140 [29948] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:12] new[1:12]
2023-01-26 12:13:23,140 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[13:13] new[13:13]
2023-01-26 12:13:23,140 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 13 to 13 (to 12 in part parser)
2023-01-26 12:13:23,141 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:13:23,186 [29948] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\numpy\__init__.pyi
2023-01-26 12:13:23,227 [29948] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\typing.py
2023-01-26 12:13:23,239 [29948] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\typing.pyi
2023-01-26 12:14:32,310 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:14:32,311 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 13; new: 1
2023-01-26 12:14:32,312 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:13] new[1:1]
2023-01-26 12:14:32,312 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-26 12:14:32,312 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:14:41,507 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:14:41,507 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 14
2023-01-26 12:14:41,508 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:14]
2023-01-26 12:14:41,511 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 14 (to 13 in part parser)
2023-01-26 12:14:41,511 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:16:02,719 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:16:02,719 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 14; new: 19
2023-01-26 12:16:02,720 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:13] new[1:13]
2023-01-26 12:16:02,720 [29948] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:13] new[1:13]
2023-01-26 12:16:02,720 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[14:14] new[14:19]
2023-01-26 12:16:02,721 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 14 to 17 (to 17 in part parser)
2023-01-26 12:16:02,721 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 18 to 19 (to 18 in part parser)
2023-01-26 12:16:02,721 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:16:02,731 [29948] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\__init__.py
2023-01-26 12:17:35,472 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:17:35,473 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 19; new: 19
2023-01-26 12:17:35,473 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:13] new[1:13]
2023-01-26 12:17:35,474 [29948] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:18] new[1:13]
2023-01-26 12:17:35,474 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[14:14] new[14:14]
2023-01-26 12:17:35,474 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 14 to 17 (to 17 in part parser)
2023-01-26 12:17:35,474 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[15:18] new[15:18]
2023-01-26 12:17:35,475 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 18 to 19 (to 18 in part parser)
2023-01-26 12:17:35,475 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[19:19] new[19:19]
2023-01-26 12:17:35,475 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:17:35,495 [29948] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\reshape\reshape.py
2023-01-26 12:17:35,506 [29948] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\__init__.py
2023-01-26 12:17:35,583 [29948] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\frame.py
2023-01-26 12:17:35,676 [29948] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\generic.py
2023-01-26 12:17:35,709 [29948] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\base.py
2023-01-26 12:17:35,721 [29948] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\accessor.py
2023-01-26 12:17:35,750 [29948] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\indexing.py
2023-01-26 12:17:35,772 [29948] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\arraylike.py
2023-01-26 12:17:35,784 [29948] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\_typing.py
2023-01-26 12:17:35,816 [29948] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\types.py
2023-01-26 12:17:35,824 [29948] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\types.pyi
2023-01-26 12:17:37,884 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:17:37,885 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 19; new: 19
2023-01-26 12:17:37,885 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:18] new[1:18]
2023-01-26 12:17:37,885 [29948] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:18] new[1:15]
2023-01-26 12:17:37,886 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 16 to 17 (to 17 in part parser)
2023-01-26 12:17:37,886 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 18 to 19 (to 18 in part parser)
2023-01-26 12:17:37,887 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[19:19] new[19:19]
2023-01-26 12:17:37,887 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:17:39,464 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:17:39,465 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 19; new: 19
2023-01-26 12:17:39,465 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:18] new[1:18]
2023-01-26 12:17:39,466 [29948] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:18] new[1:15]
2023-01-26 12:17:39,466 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 16 to 17 (to 17 in part parser)
2023-01-26 12:17:39,467 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 18 to 19 (to 18 in part parser)
2023-01-26 12:17:39,467 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[19:19] new[19:19]
2023-01-26 12:17:39,467 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:17:41,544 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:17:41,545 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 19; new: 19
2023-01-26 12:17:41,545 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:18] new[1:18]
2023-01-26 12:17:41,546 [29948] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:18] new[1:15]
2023-01-26 12:17:41,546 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 16 to 17 (to 17 in part parser)
2023-01-26 12:17:41,547 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 18 to 19 (to 18 in part parser)
2023-01-26 12:17:41,547 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[19:19] new[19:19]
2023-01-26 12:17:41,547 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:20:45,231 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:20:45,232 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 19; new: 1
2023-01-26 12:20:45,232 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:19] new[1:1]
2023-01-26 12:20:45,232 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-26 12:20:45,233 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:21:18,233 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:21:18,234 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 31
2023-01-26 12:21:18,234 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:31]
2023-01-26 12:21:18,238 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 31 (to 30 in part parser)
2023-01-26 12:21:18,238 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:22:49,588 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:22:49,589 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 31; new: 34
2023-01-26 12:22:49,591 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:28] new[1:28]
2023-01-26 12:22:49,591 [29948] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:30] new[1:28]
2023-01-26 12:22:49,591 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[insert] old[29:28] new[29:29]
2023-01-26 12:22:49,592 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 29 to 29 (to 29 in part parser)
2023-01-26 12:22:49,592 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[29:30] new[30:31]
2023-01-26 12:22:49,593 [29948] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[29:29] new[30:30]
2023-01-26 12:22:49,593 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 31 to 32 (to 33 in part parser)
2023-01-26 12:22:49,593 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[31:31] new[32:34]
2023-01-26 12:22:49,594 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 33 to 34 (to 33 in part parser)
2023-01-26 12:22:49,594 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:22:58,232 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:22:58,234 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 34; new: 35
2023-01-26 12:22:58,234 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:33] new[1:33]
2023-01-26 12:22:58,234 [29948] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:33] new[1:32]
2023-01-26 12:22:58,235 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 33 to 34 (to 34 in part parser)
2023-01-26 12:22:58,235 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[34:34] new[34:35]
2023-01-26 12:22:58,235 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 35 to 35 (to 34 in part parser)
2023-01-26 12:22:58,235 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:23:10,752 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:23:10,753 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 35; new: 35
2023-01-26 12:23:10,753 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:34] new[1:34]
2023-01-26 12:23:10,754 [29948] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:34] new[1:34]
2023-01-26 12:23:10,754 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[35:35] new[35:35]
2023-01-26 12:23:10,754 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 35 to 35 (to 34 in part parser)
2023-01-26 12:23:10,755 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:23:10,775 [29948] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\numpy\core\fromnumeric.py
2023-01-26 12:23:16,909 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:23:16,910 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 35; new: 35
2023-01-26 12:23:16,910 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:34] new[1:34]
2023-01-26 12:23:16,910 [29948] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:34] new[1:34]
2023-01-26 12:23:16,912 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[35:35] new[35:35]
2023-01-26 12:23:16,912 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 35 to 35 (to 34 in part parser)
2023-01-26 12:23:16,912 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:23:23,910 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:23:23,911 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 35; new: 37
2023-01-26 12:23:23,912 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:34] new[1:34]
2023-01-26 12:23:23,912 [29948] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:34] new[1:34]
2023-01-26 12:23:23,912 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[35:35] new[35:37]
2023-01-26 12:23:23,913 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 35 to 37 (to 36 in part parser)
2023-01-26 12:23:23,913 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:23:27,291 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:23:27,293 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 37; new: 37
2023-01-26 12:23:27,293 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:36] new[1:36]
2023-01-26 12:23:27,293 [29948] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:36] new[1:35]
2023-01-26 12:23:27,294 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 36 to 37 (to 36 in part parser)
2023-01-26 12:23:27,294 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[37:37] new[37:37]
2023-01-26 12:23:27,295 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:24:30,615 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:24:30,615 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 37; new: 41
2023-01-26 12:24:30,616 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:13] new[1:13]
2023-01-26 12:24:30,616 [29948] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:36] new[1:13]
2023-01-26 12:24:30,616 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[14:14] new[14:14]
2023-01-26 12:24:30,617 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 14 to 17 (to 17 in part parser)
2023-01-26 12:24:30,617 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[15:36] new[15:36]
2023-01-26 12:24:30,618 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 18 to 24 (to 26 in part parser)
2023-01-26 12:24:30,618 [29948] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[27:36] new[25:35]
2023-01-26 12:24:30,620 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 36 to 38 (to 38 in part parser)
2023-01-26 12:24:30,620 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[37:37] new[37:41]
2023-01-26 12:24:30,620 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 39 to 41 (to 40 in part parser)
2023-01-26 12:24:30,620 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:24:39,247 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:24:39,248 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 41; new: 43
2023-01-26 12:24:39,248 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:40] new[1:40]
2023-01-26 12:24:39,248 [29948] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:40] new[1:37]
2023-01-26 12:24:39,249 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 38 to 38 (to 38 in part parser)
2023-01-26 12:24:39,249 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 39 to 43 (to 42 in part parser)
2023-01-26 12:24:39,249 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[41:41] new[41:43]
2023-01-26 12:24:39,251 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:24:51,166 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:24:51,166 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 43; new: 45
2023-01-26 12:24:51,167 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:42] new[1:42]
2023-01-26 12:24:51,168 [29948] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:42] new[1:37]
2023-01-26 12:24:51,168 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 38 to 38 (to 38 in part parser)
2023-01-26 12:24:51,169 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 39 to 45 (to 44 in part parser)
2023-01-26 12:24:51,169 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[43:43] new[43:45]
2023-01-26 12:24:51,169 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:24:52,344 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:24:52,345 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 45; new: 45
2023-01-26 12:24:52,345 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:44] new[1:44]
2023-01-26 12:24:52,346 [29948] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:44] new[1:37]
2023-01-26 12:24:52,346 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 38 to 38 (to 38 in part parser)
2023-01-26 12:24:52,347 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 39 to 45 (to 44 in part parser)
2023-01-26 12:24:52,347 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[45:45] new[45:45]
2023-01-26 12:24:52,347 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:25:26,623 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:25:26,624 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 45; new: 46
2023-01-26 12:25:26,624 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:44] new[1:44]
2023-01-26 12:25:26,624 [29948] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:44] new[1:37]
2023-01-26 12:25:26,625 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 38 to 38 (to 38 in part parser)
2023-01-26 12:25:26,626 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 39 to 46 (to 45 in part parser)
2023-01-26 12:25:26,626 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[45:45] new[45:46]
2023-01-26 12:25:26,626 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:25:42,383 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:25:42,383 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 46; new: 48
2023-01-26 12:25:42,383 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:45] new[1:45]
2023-01-26 12:25:42,383 [29948] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:45] new[1:37]
2023-01-26 12:25:42,384 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 38 to 38 (to 38 in part parser)
2023-01-26 12:25:42,385 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 39 to 48 (to 47 in part parser)
2023-01-26 12:25:42,386 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[46:46] new[46:48]
2023-01-26 12:25:42,386 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:25:53,795 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:25:53,796 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 48; new: 49
2023-01-26 12:25:53,796 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:47] new[1:47]
2023-01-26 12:25:53,797 [29948] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:47] new[1:37]
2023-01-26 12:25:53,797 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 38 to 38 (to 38 in part parser)
2023-01-26 12:25:53,799 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 39 to 49 (to 48 in part parser)
2023-01-26 12:25:53,799 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[48:48] new[48:49]
2023-01-26 12:25:53,799 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:25:58,869 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:25:58,870 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 49; new: 51
2023-01-26 12:25:58,870 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:48] new[1:48]
2023-01-26 12:25:58,871 [29948] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:48] new[1:37]
2023-01-26 12:25:58,871 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 38 to 38 (to 38 in part parser)
2023-01-26 12:25:58,872 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 39 to 51 (to 50 in part parser)
2023-01-26 12:25:58,873 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[49:49] new[49:51]
2023-01-26 12:25:58,873 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:26:00,731 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:26:00,732 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 51; new: 51
2023-01-26 12:26:00,732 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:50] new[1:50]
2023-01-26 12:26:00,732 [29948] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:50] new[1:37]
2023-01-26 12:26:00,733 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 38 to 38 (to 38 in part parser)
2023-01-26 12:26:00,734 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 39 to 51 (to 50 in part parser)
2023-01-26 12:26:00,735 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[51:51] new[51:51]
2023-01-26 12:26:00,735 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:27:17,418 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:27:17,419 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 51; new: 54
2023-01-26 12:27:17,420 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:50] new[1:50]
2023-01-26 12:27:17,420 [29948] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:50] new[1:37]
2023-01-26 12:27:17,420 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 38 to 38 (to 38 in part parser)
2023-01-26 12:27:17,422 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 39 to 51 (to 52 in part parser)
2023-01-26 12:27:17,422 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[51:51] new[51:54]
2023-01-26 12:27:17,423 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 52 to 54 (to 53 in part parser)
2023-01-26 12:27:17,423 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:27:32,601 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:27:32,602 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 54; new: 1
2023-01-26 12:27:32,602 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:54] new[1:1]
2023-01-26 12:27:32,603 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-26 12:27:32,603 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:27:35,998 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:27:35,999 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-01-26 12:27:35,999 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-01-26 12:27:36,000 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-26 12:27:36,000 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:28:08,273 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:28:08,274 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-01-26 12:28:08,274 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-01-26 12:28:08,275 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-26 12:28:08,275 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:28:09,035 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:28:09,036 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-01-26 12:28:09,036 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-01-26 12:28:09,036 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-26 12:28:09,036 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:28:36,163 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:28:36,163 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 58
2023-01-26 12:28:36,163 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:58]
2023-01-26 12:28:36,169 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 58 (to 57 in part parser)
2023-01-26 12:28:36,170 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:28:43,522 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:28:43,523 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 58; new: 59
2023-01-26 12:28:43,523 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:57] new[1:57]
2023-01-26 12:28:43,524 [29948] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:57] new[1:55]
2023-01-26 12:28:43,524 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 56 to 56 (to 56 in part parser)
2023-01-26 12:28:43,525 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 57 to 59 (to 58 in part parser)
2023-01-26 12:28:43,525 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[58:58] new[58:59]
2023-01-26 12:28:43,525 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:28:46,835 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:28:46,836 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 59; new: 59
2023-01-26 12:28:46,836 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:58] new[1:58]
2023-01-26 12:28:46,837 [29948] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:58] new[1:58]
2023-01-26 12:28:46,837 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[59:59] new[59:59]
2023-01-26 12:28:46,837 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 59 to 59 (to 58 in part parser)
2023-01-26 12:28:46,838 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:28:52,964 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:28:52,964 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 59; new: 1
2023-01-26 12:28:52,964 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:59] new[1:1]
2023-01-26 12:28:52,964 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-26 12:28:52,965 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:28:53,631 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:28:53,631 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-01-26 12:28:53,632 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-01-26 12:28:53,633 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-26 12:28:53,633 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:28:54,272 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:28:54,273 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-01-26 12:28:54,273 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-01-26 12:28:54,274 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-26 12:28:54,274 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:28:55,648 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:28:55,649 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-01-26 12:28:55,649 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-01-26 12:28:55,650 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-26 12:28:55,650 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 12:30:29,217 [29948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 12:30:29,218 [29948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-01-26 12:30:29,219 [29948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-01-26 12:30:29,219 [29948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-26 12:30:29,219 [29948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 13:28:45,599 [29948] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-01-26 13:28:45,605 [29948] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-01-26 13:28:45,606 [29948] INFO     root:247: [JupyterRequire] Initializing comms.
2023-01-26 13:28:45,644 [29948] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-01-26 13:28:45,651 [29948] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-01-26 13:28:45,652 [29948] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-01-26 13:56:25,133 [23208] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-01-26 13:56:25,135 [23208] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-01-26 13:56:25,135 [23208] INFO     root:247: [JupyterRequire] Initializing comms.
2023-01-26 13:56:25,137 [23208] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-01-26 13:56:25,138 [23208] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-01-26 13:56:25,138 [23208] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-01-26 13:56:25,950 [23208] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-01-26 13:56:25,951 [23208] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-01-26 13:56:25,951 [23208] INFO     root:247: [JupyterRequire] Initializing comms.
2023-01-26 13:56:25,957 [23208] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-01-26 13:56:25,958 [23208] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-01-26 13:56:25,959 [23208] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-01-26 14:49:35,895 [11956] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-01-26 14:49:35,896 [11956] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-01-26 14:49:35,898 [11956] INFO     root:247: [JupyterRequire] Initializing comms.
2023-01-26 14:49:35,902 [11956] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-01-26 14:49:35,903 [11956] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-01-26 14:49:35,904 [11956] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-01-26 14:49:37,460 [15988] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-01-26 14:49:37,461 [15988] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-01-26 14:49:37,461 [15988] INFO     root:247: [JupyterRequire] Initializing comms.
2023-01-26 14:49:37,465 [15988] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-01-26 14:49:37,466 [15988] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-01-26 14:49:37,468 [15988] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-01-26 14:49:38,307 [15988] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-01-26 14:49:38,307 [15988] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-01-26 14:49:38,309 [15988] INFO     root:247: [JupyterRequire] Initializing comms.
2023-01-26 14:49:38,312 [15988] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-01-26 14:49:38,313 [15988] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-01-26 14:49:38,313 [15988] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-01-26 14:49:39,221 [11956] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-01-26 14:49:39,223 [11956] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-01-26 14:49:39,224 [11956] INFO     root:247: [JupyterRequire] Initializing comms.
2023-01-26 14:49:39,232 [11956] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-01-26 14:49:39,234 [11956] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-01-26 14:49:39,235 [11956] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-01-26 15:15:55,092 [14968] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-01-26 15:15:55,092 [14968] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-01-26 15:15:55,093 [14968] INFO     root:247: [JupyterRequire] Initializing comms.
2023-01-26 15:15:55,096 [14968] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-01-26 15:15:55,098 [14968] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-01-26 15:15:55,098 [14968] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-01-26 15:15:55,901 [14968] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-01-26 15:15:55,901 [14968] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-01-26 15:15:55,901 [14968] INFO     root:247: [JupyterRequire] Initializing comms.
2023-01-26 15:15:55,904 [14968] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-01-26 15:15:55,905 [14968] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-01-26 15:15:55,905 [14968] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-01-26 15:51:32,375 [11956] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pyforest\_importable.py
2023-01-26 15:51:32,521 [11956] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\2and3\builtins.pyi
2023-01-26 15:51:47,709 [11956] DEBUG    matplotlib:224: [JupyterRequire] matplotlib data path: C:\Users\sunny\anaconda3\lib\site-packages\matplotlib\mpl-data
2023-01-26 15:51:47,721 [11956] DEBUG    matplotlib:224: [JupyterRequire] CONFIGDIR=C:\Users\sunny\.matplotlib
2023-01-26 15:51:47,724 [11956] DEBUG    matplotlib:1394: [JupyterRequire] matplotlib version 3.4.3
2023-01-26 15:51:47,724 [11956] DEBUG    matplotlib:1395: [JupyterRequire] interactive is False
2023-01-26 15:51:47,724 [11956] DEBUG    matplotlib:1396: [JupyterRequire] platform is win32
2023-01-26 15:51:47,724 [11956] DEBUG    matplotlib:1397: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', '_io', 'marshal', 'nt', 'winreg', '_frozen_importlib_external', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', 'encodings.cp1252', '_signal', 'encodings.latin_1', '_abc', 'abc', 'io', '__main__', '_stat', 'stat', '_collections_abc', 'genericpath', 'ntpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', '_distutils_hack', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', '_heapq', 'heapq', 'itertools', 'keyword', '_operator', 'operator', 'reprlib', '_collections', 'collections', 'collections.abc', '_functools', 'functools', 'contextlib', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', 'typing.io', 'typing.re', 'typing', 'importlib.abc', 'importlib.util', 'google', 'google.cloud', 'google.logging', 'mpl_toolkits', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'msvcrt', '_winapi', 'subprocess', 'jupyter_client._version', 'posixpath', 'fnmatch', 'glob', '_socket', 'math', 'select', 'selectors', 'socket', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_bisect', 'bisect', '_random', '_sha512', 'random', 'tempfile', 'getpass', 'platform', 'zmq.libzmq', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_24', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'copy', '_struct', 'struct', '_compat_pickle', '_pickle', 'pickle', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'atexit', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', '_ast', 'ast', '_opcode', 'opcode', 'dis', 'token', 'tokenize', 'linecache', 'inspect', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.traitlets', 'traitlets.utils.decorators', 'traitlets._version', 'traitlets', 'traceback', '_string', 'string', 'logging', 'pprint', 'gettext', 'argparse', 'traitlets.config.loader', 'textwrap', 'traitlets.utils.text', 'traitlets.config.configurable', 'traitlets.config.application', 'traitlets.config', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'urllib', 'urllib.parse', 'pathlib', 'jupyter_core.paths', 'jupyter_client.utils', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_ssl', 'binascii', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.threads', '_overlapped', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.selector_events', 'asyncio.windows_utils', 'asyncio.windows_events', 'asyncio', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', '_queue', 'queue', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', '_uuid', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', '_datetime', 'datetime', 'numbers', 'logging.handlers', 'html.entities', 'html', 'array', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', '_ctypes', 'ctypes._endian', 'ctypes', 'ctypes.wintypes', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', '__future__', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'sysconfig', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'locale', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_win32', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'IPython.lib.security', 'IPython.lib', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.deduplicate', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout.scrollable_pane', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'prompt_toolkit.patch_stdout', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'parso._compatibility', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.file_io', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.common', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.lib.clipboard', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'nturl2path', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'dataclasses', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'ipython_genutils._version', 'ipython_genutils', 'ipython_genutils.encoding', 'ipython_genutils.py3compat', 'ipython_genutils.path', 'imp', 'hmac', 'dateutil._version', 'dateutil', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.control', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'setuptools._distutils', 'distutils.debug', 'distutils.errors', 'distutils.fancy_getopt', 'distutils.dep_util', 'distutils._log', 'distutils.spawn', 'distutils.util', 'distutils.dist', 'distutils.dir_util', 'distutils.file_util', 'zipfile', 'distutils.archive_util', 'distutils.cmd', 'configparser', 'distutils.config', 'distutils.extension', 'distutils.core', '_distutils_hack.override', 'setuptools._deprecation_warning', 'xml.parsers', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'plistlib', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'importlib._common', 'importlib.resources', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources._vendor.more_itertools.more', 'pkg_resources._vendor.more_itertools', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.functools', 'pkg_resources.extern.jaraco.context', 'pkg_resources.extern.jaraco.text', 'pkg_resources._vendor.platformdirs.api', 'pkg_resources._vendor.platformdirs.version', 'pkg_resources._vendor.platformdirs.windows', 'pkg_resources._vendor.platformdirs', 'pkg_resources.extern.platformdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources._vendor.packaging', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.version', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.tags', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources._vendor.pyparsing.util', 'pkg_resources._vendor.pyparsing.unicode', 'pkg_resources._vendor.pyparsing.exceptions', 'pkg_resources._vendor.pyparsing.actions', 'pkg_resources._vendor.pyparsing.results', 'pkg_resources._vendor.pyparsing.core', 'pkg_resources._vendor.pyparsing.helpers', 'pkg_resources._vendor.pyparsing.testing', 'pkg_resources._vendor.pyparsing.common', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'pkg_resources.extern.packaging.requirements', 'encodings.cp437', 'pkg_resources', 'setuptools.version', 'distutils.filelist', 'setuptools.monkey', 'setuptools.extension', 'distutils.log', 'distutils.command', 'setuptools.extern', 'setuptools._vendor', 'setuptools._vendor.packaging.__about__', 'setuptools._vendor.packaging', 'setuptools.extern.packaging', 'setuptools._vendor.ordered_set', 'setuptools.extern.ordered_set', 'setuptools._vendor.more_itertools.recipes', 'setuptools._vendor.more_itertools.more', 'setuptools._vendor.more_itertools', 'setuptools.extern.more_itertools', '_csv', 'csv', 'setuptools._vendor.zipp', 'setuptools._vendor.importlib_metadata._functools', 'setuptools._vendor.importlib_metadata._text', 'setuptools._vendor.importlib_metadata._adapters', 'setuptools._vendor.importlib_metadata._compat', 'setuptools._vendor.importlib_metadata._meta', 'setuptools._vendor.importlib_metadata._collections', 'setuptools._vendor.importlib_metadata._itertools', 'setuptools._vendor.importlib_metadata', 'setuptools.extern.importlib_metadata', 'zipp', 'importlib_metadata._functools', 'importlib_metadata._text', 'importlib_metadata._adapters', 'importlib_metadata._compat', 'importlib_metadata._meta', 'importlib_metadata._collections', 'importlib_metadata._itertools', 'importlib_metadata', 'setuptools._importlib', 'distutils.command.bdist', 'setuptools.command', 'setuptools.windows_support', 'setuptools._vendor.pyparsing.util', 'setuptools._vendor.pyparsing.unicode', 'setuptools._vendor.pyparsing.exceptions', 'setuptools._vendor.pyparsing.actions', 'setuptools._vendor.pyparsing.results', 'setuptools._vendor.pyparsing.core', 'setuptools._vendor.pyparsing.helpers', 'setuptools._vendor.pyparsing.testing', 'setuptools._vendor.pyparsing.common', 'setuptools._vendor.pyparsing', 'setuptools.extern.pyparsing', 'setuptools._vendor.packaging._manylinux', 'setuptools._vendor.packaging._musllinux', 'setuptools.extern.packaging.tags', 'setuptools.extern.packaging._structures', 'setuptools.extern.packaging.version', 'setuptools.extern.packaging.utils', 'setuptools.extern.packaging.specifiers', 'setuptools.extern.packaging.markers', 'setuptools.extern.packaging.requirements', 'setuptools._path', 'setuptools.config.expand', 'setuptools.config.setupcfg', 'setuptools.config', 'setuptools.errors', 'email._header_value_parser', 'email.headerregistry', 'setuptools.config._apply_pyprojecttoml', 'setuptools.config.pyprojecttoml', 'setuptools.discovery', 'setuptools._vendor.jaraco', 'setuptools.extern.jaraco', 'setuptools.extern.jaraco.functools', 'setuptools.extern.jaraco.context', 'setuptools.extern.jaraco.text', 'setuptools._reqs', 'setuptools._itertools', 'setuptools._entry_points', 'setuptools.dist', 'setuptools.py34compat', 'setuptools._imp', 'setuptools.depends', 'setuptools.logging', 'setuptools.msvc', 'unittest.util', 'unittest.result', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.signals', 'unittest.runner', 'unittest.main', 'unittest', 'unittest.mock', 'distutils.ccompiler', 'distutils._msvccompiler', 'setuptools', 'distutils', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.compiler', 'debugpy._version', 'debugpy.common', 'debugpy.common.json', 'debugpy.common.fmt', 'debugpy.common.compat', 'debugpy', 'debugpy._vendored._util', 'debugpy._vendored', '_pydevd_bundle', 'encodings.ascii', 'stringprep', 'encodings.idna', '_pydevd_bundle.pydevd_vm_type', '_pydev_imps', 'xmlrpc', 'gzip', 'xmlrpc.client', 'socketserver', 'http.server', 'xmlrpc.server', '_pydev_imps._pydev_saved_modules', '_pydevd_bundle.pydevd_constants', '_pydev_bundle', '_pydev_runfiles', '_pydevd_frame_eval', 'pydev_ipython', 'pydevd_concurrency_analyser', 'pydevd_plugins', '_pydev_bundle.pydev_log', '_pydev_bundle._pydev_filesystem_encoding', '_pydevd_bundle.pydevd_comm_constants', 'pydevd_file_utils', '_pydev_imps._pydev_execfile', '_pydevd_bundle.pydevd_exec2', '_pydev_bundle.pydev_imports', '_pydev_bundle.pydev_is_thread_alive', '_pydev_bundle.pydev_override', 'pydevd_plugins.extensions', '_pydevd_bundle.pydevd_extension_utils', '_pydevd_bundle.pydevd_frame_utils', '_pydevd_bundle.pydevd_filtering', '_pydevd_bundle.pydevd_io', '_pydevd_bundle.pydevd_utils', '_pydev_bundle._pydev_tipper_common', '_pydev_bundle._pydev_imports_tipper', '_pydev_bundle._pydev_calltip_util', '_pydevd_bundle.pydevd_safe_repr', '_pydevd_bundle.pydevd_resolver', '_pydevd_bundle.pydevd_extension_api', '_pydevd_bundle.pydevd_xml', '_pydevd_bundle.pydevd_dont_trace', '_pydevd_frame_eval.vendored', '_pydevd_frame_eval.vendored.bytecode.flags', '_pydevd_frame_eval.vendored.bytecode.instr', '_pydevd_frame_eval.vendored.bytecode.bytecode', '_pydevd_frame_eval.vendored.bytecode.concrete', '_pydevd_frame_eval.vendored.bytecode.cfg', '_pydevd_frame_eval.vendored.bytecode', '_pydevd_bundle.pydevd_bytecode_utils', '_pydevd_bundle.pydevd_cython', '_pydevd_bundle.pydevd_cython_wrapper', '_pydevd_bundle.pydevd_additional_thread_info', '_pydevd_bundle.pydevd_thread_lifecycle', '_pydevd_bundle.pydevd_save_locals', '_pydevd_bundle.pydevd_defaults', '_pydev_bundle.pydev_monkey', 'pydevd_tracing', '_pydevd_bundle.pydevd_daemon_thread', '_pydevd_bundle.pydevd_timeout', '_pydevd_bundle.pydevd_vars', '_pydev_bundle.pydev_console_utils', '_pydevd_bundle.pydevd_import_class', '_pydevd_bundle.pydevd_breakpoints', '_pydevd_bundle.pydevd_custom_frames', '_pydevd_bundle.pydevd_dont_trace_files', '_pydevd_bundle.pydevd_net_command', '_pydev_bundle.pydev_umd', 'pydevconsole', '_pydev_bundle._pydev_completer', '_pydevd_bundle.pydevd_net_command_factory_xml', '_pydevd_bundle.pydevd_frame', '_pydevd_bundle.pydevd_additional_thread_info_regular', '_pydevd_bundle.pydevd_trace_dispatch', '_pydevd_frame_eval.pydevd_frame_eval_main', '_pydevd_bundle.pydevd_source_mapping', 'pydevd_concurrency_analyser.pydevd_thread_wrappers', 'pydevd_concurrency_analyser.pydevd_concurrency_logger', '_pydevd_bundle._debug_adapter', '_pydevd_bundle._debug_adapter.pydevd_schema_log', '_pydevd_bundle._debug_adapter.pydevd_base_schema', '_pydevd_bundle._debug_adapter.pydevd_schema', '_pydevd_bundle.pydevd_reload', '_pydev_bundle.fsnotify', '_pydevd_bundle.pydevd_console', '_pydevd_bundle.pydevd_comm', '_pydevd_bundle.pydevd_net_command_factory_json', '_pydevd_bundle.pydevd_collect_bytecode_info', '_pydevd_bundle.pydevd_api', '_pydevd_bundle.pydevd_json_debug_options', '_pydevd_bundle.pydevd_process_net_command_json', '_pydevd_bundle.pydevd_traceproperty', '_pydevd_bundle.pydevd_process_net_command', '_pydevd_bundle.pydevd_suspended_frames', '_pydevd_bundle.pydevd_trace_api', 'pydevd_plugins.django_debug', 'pydevd_plugins.jinja2_debug', '_pydevd_bundle.pydevd_plugin_utils', 'pydevd_plugins.extensions.types', 'pydevd_plugins.extensions.types.pydevd_helpers', 'pydevd_plugins.extensions.types.pydevd_plugin_numpy_types', 'pydevd_plugins.extensions.types.pydevd_plugins_django_form_str', 'pydevd', 'debugpy._vendored.force_pydevd', 'debugpy.server', 'debugpy.adapter', 'debugpy.common.timestamp', 'debugpy.common.util', 'debugpy.common.log', 'debugpy.common.sockets', 'debugpy.server.api', 'ipykernel.debugger', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'IPython.core.completerlib', 'storemagic', 'pyforest._importable', 'pyforest.user_specific_imports', 'pyforest._imports', 'pyforest.utils', 'pyforest', 'logging.config', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.types', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'jupyter_require', 'jedi.inference.finder', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'mkl._mklinit', 'mkl._py_mkl_service', 'mkl', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._add_newdocs_scalars', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'matplotlib', 'matplotlib._api.deprecation', 'matplotlib._api', 'matplotlib._c_internal_utils', 'matplotlib.cbook', 'matplotlib.docstring', 'PIL._version', 'PIL', 'defusedxml.common', 'defusedxml', 'xml.etree', 'xml.etree.ElementPath', '_elementtree', 'xml.etree.ElementTree', 'defusedxml.ElementTree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'matplotlib._animation_data', 'matplotlib.animation', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImagePalette', 'PIL.ImageSequence', 'PIL.PngImagePlugin', 'matplotlib._path', 'matplotlib.bezier', 'matplotlib.path', 'matplotlib.transforms', 'matplotlib.ticker', 'matplotlib.scale', 'matplotlib._color_data', 'matplotlib.colors', 'pyparsing.util', 'pyparsing.unicode', 'pyparsing.exceptions', 'pyparsing.actions', 'pyparsing.results', 'pyparsing.core', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib._enums', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver', 'dateutil.rrule', 'matplotlib.units', 'matplotlib.dates']
2023-01-26 15:51:47,842 [11956] DEBUG    matplotlib:224: [JupyterRequire] CACHEDIR=C:\Users\sunny\.matplotlib
2023-01-26 15:51:47,846 [11956] DEBUG    matplotlib.font_manager:1439: [JupyterRequire] Using fontManager instance from C:\Users\sunny\.matplotlib\fontlist-v330.json
2023-01-26 15:51:48,049 [11956] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-01-26 15:51:48,050 [11956] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-01-26 15:51:48,137 [11956] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2023-01-26 15:51:48,137 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,137 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,138 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,138 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-01-26 15:51:48,138 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,138 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,138 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-26 15:51:48,138 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,138 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,139 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,139 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,139 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,139 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,139 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-01-26 15:51:48,139 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,139 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-01-26 15:51:48,140 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,140 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,140 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-01-26 15:51:48,140 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,140 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-01-26 15:51:48,140 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-01-26 15:51:48,140 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,140 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,141 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,141 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,141 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,141 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-01-26 15:51:48,141 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,141 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,141 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,142 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,142 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,142 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-01-26 15:51:48,142 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,142 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,142 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,143 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,143 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,143 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,143 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,143 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2023-01-26 15:51:48,143 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,144 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,144 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,144 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2023-01-26 15:51:48,144 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,144 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,144 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,144 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2023-01-26 15:51:48,145 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,145 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,145 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,145 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,145 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,145 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,145 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,146 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,146 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,146 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2023-01-26 15:51:48,146 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2023-01-26 15:51:48,146 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2023-01-26 15:51:48,146 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2023-01-26 15:51:48,146 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,146 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,146 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,147 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2023-01-26 15:51:48,147 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,147 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,147 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,147 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2023-01-26 15:51:48,148 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,148 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2023-01-26 15:51:48,148 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sitka' (SitkaVF.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,148 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,148 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2023-01-26 15:51:48,148 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,148 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,149 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,149 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,149 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2023-01-26 15:51:48,149 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,149 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,149 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,149 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,150 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,150 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2023-01-26 15:51:48,150 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,150 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,150 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,150 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,150 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2023-01-26 15:51:48,151 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,151 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,151 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,151 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,151 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,151 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,151 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,152 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,152 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,152 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,152 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,152 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,152 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,152 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,153 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,153 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2023-01-26 15:51:48,153 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,153 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,153 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,153 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,153 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,154 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2023-01-26 15:51:48,154 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,154 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2023-01-26 15:51:48,154 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2023-01-26 15:51:48,154 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,154 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,154 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2023-01-26 15:51:48,155 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,155 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,155 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2023-01-26 15:51:48,155 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,155 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2023-01-26 15:51:48,155 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,155 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,155 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,156 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2023-01-26 15:51:48,156 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2023-01-26 15:51:48,156 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2023-01-26 15:51:48,156 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2023-01-26 15:51:48,156 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,156 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,156 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,157 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,157 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,157 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,157 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,157 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,157 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,157 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2023-01-26 15:51:48,158 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,158 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2023-01-26 15:51:48,158 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,158 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,158 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,158 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,158 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,159 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2023-01-26 15:51:48,159 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,159 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,159 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2023-01-26 15:51:48,159 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2023-01-26 15:51:48,159 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Variable' (SegUIVar.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,159 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,160 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,160 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,160 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,160 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,160 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,160 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,160 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,161 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,161 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,161 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,161 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,161 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2023-01-26 15:51:48,161 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2023-01-26 15:51:48,162 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2023-01-26 15:51:48,162 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,162 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2023-01-26 15:51:48,162 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,162 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,162 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,162 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,162 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2023-01-26 15:51:48,163 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2023-01-26 15:51:48,163 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2023-01-26 15:51:48,163 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,163 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,163 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,163 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2023-01-26 15:51:48,163 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2023-01-26 15:51:48,164 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,164 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,164 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2023-01-26 15:51:48,164 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,164 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,164 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2023-01-26 15:51:48,164 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,164 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,165 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,165 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2023-01-26 15:51:48,165 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,165 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,165 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,165 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2023-01-26 15:51:48,165 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,166 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2023-01-26 15:51:48,166 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,166 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2023-01-26 15:51:48,166 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,166 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,166 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,166 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,167 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,167 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,167 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2023-01-26 15:51:48,167 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2023-01-26 15:51:48,167 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2023-01-26 15:51:48,167 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2023-01-26 15:51:48,167 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2023-01-26 15:51:48,168 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,168 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,168 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,168 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,168 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,168 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,168 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,168 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,169 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,169 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,169 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,169 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,169 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,169 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,169 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,170 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,170 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2023-01-26 15:51:48,170 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2023-01-26 15:51:48,170 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,170 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,170 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2023-01-26 15:51:48,170 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,170 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,171 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,171 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2023-01-26 15:51:48,171 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,171 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2023-01-26 15:51:48,171 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,171 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,171 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,172 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,172 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,172 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,172 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,172 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,172 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2023-01-26 15:51:48,172 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,173 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,173 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,173 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,173 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,173 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sitka' (SitkaVF-Italic.ttf) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,173 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,173 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2023-01-26 15:51:48,174 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,174 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,174 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,174 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2023-01-26 15:51:48,174 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,174 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,174 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,175 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,175 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,175 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2023-01-26 15:51:48,175 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2023-01-26 15:51:48,175 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,175 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,175 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,176 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,176 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,176 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,176 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2023-01-26 15:51:48,176 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,176 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2023-01-26 15:51:48,176 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,177 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,177 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2023-01-26 15:51:48,177 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,177 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,177 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,177 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,177 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,177 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2023-01-26 15:51:48,178 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2023-01-26 15:51:48,178 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2023-01-26 15:51:48,178 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,178 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2023-01-26 15:51:48,178 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2023-01-26 15:51:48,178 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,178 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,179 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2023-01-26 15:51:48,179 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,179 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2023-01-26 15:51:48,179 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,179 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,179 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,179 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2023-01-26 15:51:48,180 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2023-01-26 15:51:48,180 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,180 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,180 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,180 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,180 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,180 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2023-01-26 15:51:48,180 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2023-01-26 15:51:48,181 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,181 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,181 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2023-01-26 15:51:48,181 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,181 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2023-01-26 15:51:48,181 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2023-01-26 15:51:48,181 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2023-01-26 15:51:48,182 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,182 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,182 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2023-01-26 15:51:48,182 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,182 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,182 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,182 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,183 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,183 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,183 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,183 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,183 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,183 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,183 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,183 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,184 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2023-01-26 15:51:48,184 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,184 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2023-01-26 15:51:48,184 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2023-01-26 15:51:48,184 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2023-01-26 15:51:48,184 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2023-01-26 15:51:48,184 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2023-01-26 15:51:48,185 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,185 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,185 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,185 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,185 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,185 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,185 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,185 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,186 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,186 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,186 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,186 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,186 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,186 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,186 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,187 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,187 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2023-01-26 15:51:48,187 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,187 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2023-01-26 15:51:48,187 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2023-01-26 15:51:48,187 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2023-01-26 15:51:48,187 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2023-01-26 15:51:48,188 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,188 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,188 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,188 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,188 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,188 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2023-01-26 15:51:48,188 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,189 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,189 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,189 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2023-01-26 15:51:48,189 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,189 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2023-01-26 15:51:48,189 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2023-01-26 15:51:48,189 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,190 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2023-01-26 15:51:48,190 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2023-01-26 15:51:48,190 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2023-01-26 15:51:48,190 [11956] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Fluent Icons' (SegoeIcons.ttf) normal normal 400 normal>) = 10.05
2023-01-26 15:51:48,190 [11956] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2023-01-26 15:52:29,116 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 15:52:29,116 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 3
2023-01-26 15:52:29,117 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:3]
2023-01-26 15:52:29,118 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-01-26 15:52:29,118 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 15:52:29,148 [11956] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\sys.pyi
2023-01-26 15:53:11,696 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 15:53:11,697 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 5
2023-01-26 15:53:11,697 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2023-01-26 15:53:11,698 [11956] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2023-01-26 15:53:11,699 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 1 (to 1 in part parser)
2023-01-26 15:53:11,700 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 4 (to 4 in part parser)
2023-01-26 15:53:11,700 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:5]
2023-01-26 15:53:11,700 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 5 to 5 (to 4 in part parser)
2023-01-26 15:53:11,700 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 15:55:43,172 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 15:55:43,173 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 5; new: 7
2023-01-26 15:55:43,173 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:2] new[1:2]
2023-01-26 15:55:43,174 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 4 (to 4 in part parser)
2023-01-26 15:55:43,174 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[3:4] new[3:4]
2023-01-26 15:55:43,174 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[5:5] new[5:7]
2023-01-26 15:55:43,175 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 5 to 7 (to 6 in part parser)
2023-01-26 15:55:43,175 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 15:55:48,502 [11956] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\anaconda3\lib\site-packages\matplotlib\text.py:1215: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison
  if s != self._text:

2023-01-26 15:55:54,161 [11956] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\anaconda3\lib\site-packages\matplotlib\text.py:1215: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison
  if s != self._text:

2023-01-26 15:56:20,195 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 15:56:20,197 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 7; new: 2
2023-01-26 15:56:20,197 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:7] new[1:2]
2023-01-26 15:56:20,198 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2023-01-26 15:56:20,199 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 16:05:15,129 [11956] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\AppData\Local\Temp/ipykernel_11956/1478222764.py:5: RuntimeWarning: overflow encountered in exp
  return np.exp(Z) / np.sum((np.exp(Z)))

2023-01-26 16:05:15,134 [11956] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\AppData\Local\Temp/ipykernel_11956/1478222764.py:5: RuntimeWarning: invalid value encountered in true_divide
  return np.exp(Z) / np.sum((np.exp(Z)))

2023-01-26 16:12:57,427 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 16:12:57,428 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 2
2023-01-26 16:12:57,428 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:2] new[1:2]
2023-01-26 16:12:57,429 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2023-01-26 16:12:57,429 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 16:12:58,105 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 16:12:58,106 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 2
2023-01-26 16:12:58,106 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2023-01-26 16:12:58,107 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2023-01-26 16:12:58,107 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:2] new[2:2]
2023-01-26 16:12:58,108 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 16:13:16,544 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 16:13:16,545 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 3
2023-01-26 16:13:16,545 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2023-01-26 16:13:16,547 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-01-26 16:13:16,547 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:2] new[2:3]
2023-01-26 16:13:16,547 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 16:13:40,592 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 16:13:40,593 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 4
2023-01-26 16:13:40,594 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2023-01-26 16:13:40,595 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 4 (to 3 in part parser)
2023-01-26 16:13:40,596 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:3] new[2:4]
2023-01-26 16:13:40,596 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 16:13:42,674 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 16:13:42,675 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 4; new: 4
2023-01-26 16:13:42,675 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:3] new[1:3]
2023-01-26 16:13:42,676 [11956] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:3] new[1:3]
2023-01-26 16:13:42,676 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[4:4] new[4:4]
2023-01-26 16:13:42,676 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 4 to 4 (to 3 in part parser)
2023-01-26 16:13:42,676 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 16:14:10,352 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 16:14:10,353 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 4; new: 1
2023-01-26 16:14:10,353 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:4] new[1:1]
2023-01-26 16:14:10,354 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-26 16:14:10,354 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 16:14:13,816 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 16:14:13,816 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-01-26 16:14:13,817 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-01-26 16:14:13,817 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-26 16:14:13,818 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 16:35:07,456 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 16:35:07,456 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 3
2023-01-26 16:35:07,456 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:3]
2023-01-26 16:35:07,457 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-01-26 16:35:07,457 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 16:35:38,466 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 16:35:38,467 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 11
2023-01-26 16:35:38,467 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-01-26 16:35:38,470 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 5 (to 5 in part parser)
2023-01-26 16:35:38,470 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[2:2] new[2:2]
2023-01-26 16:35:38,471 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:11]
2023-01-26 16:35:38,472 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 6 to 11 (to 10 in part parser)
2023-01-26 16:35:38,472 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 16:35:52,161 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 16:35:52,161 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 11; new: 11
2023-01-26 16:35:52,162 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:10] new[1:10]
2023-01-26 16:35:52,162 [11956] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:10] new[1:10]
2023-01-26 16:35:52,162 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[11:11] new[11:11]
2023-01-26 16:35:52,163 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 11 to 11 (to 10 in part parser)
2023-01-26 16:35:52,163 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 16:35:52,211 [11956] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\typing.py
2023-01-26 16:35:52,225 [11956] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\typing.pyi
2023-01-26 16:36:06,872 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-26 16:36:06,872 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 11; new: 11
2023-01-26 16:36:06,873 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:10] new[1:10]
2023-01-26 16:36:06,873 [11956] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:10] new[1:10]
2023-01-26 16:36:06,874 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[11:11] new[11:11]
2023-01-26 16:36:06,874 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 11 to 11 (to 10 in part parser)
2023-01-26 16:36:06,874 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-26 17:16:44,503 [11956] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-01-26 17:16:44,504 [11956] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-01-26 17:16:44,505 [11956] INFO     root:247: [JupyterRequire] Initializing comms.
2023-01-26 17:16:44,511 [11956] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-01-26 17:16:44,514 [11956] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-01-26 17:16:44,515 [11956] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-01-26 17:16:44,782 [15988] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-01-26 17:16:44,784 [15988] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-01-26 17:16:44,784 [15988] INFO     root:247: [JupyterRequire] Initializing comms.
2023-01-26 17:16:44,801 [15988] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-01-26 17:16:44,803 [15988] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-01-26 17:16:44,804 [15988] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-01-26 17:16:45,935 [14968] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-01-26 17:16:45,936 [14968] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-01-26 17:16:45,936 [14968] INFO     root:247: [JupyterRequire] Initializing comms.
2023-01-26 17:16:45,953 [14968] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-01-26 17:16:45,957 [14968] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-01-26 17:16:45,958 [14968] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-01-26 17:44:25,339 [11956] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-01-26 17:44:25,340 [11956] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-01-26 17:44:25,340 [11956] INFO     root:247: [JupyterRequire] Initializing comms.
2023-01-26 17:44:25,347 [11956] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-01-26 17:44:25,348 [11956] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-01-26 17:44:25,349 [11956] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-01-26 18:28:23,453 [11956] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-01-26 18:28:23,455 [11956] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-01-26 18:28:23,457 [11956] INFO     root:247: [JupyterRequire] Initializing comms.
2023-01-26 18:28:23,471 [11956] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-01-26 18:28:23,475 [11956] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-01-26 18:28:23,475 [11956] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-01-26 19:42:33,095 [11956] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-01-26 19:42:33,097 [11956] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-01-26 19:42:33,098 [11956] INFO     root:247: [JupyterRequire] Initializing comms.
2023-01-26 19:42:33,112 [11956] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-01-26 19:42:33,120 [11956] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-01-26 19:42:33,122 [11956] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-01-26 21:37:00,889 [11956] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-01-26 21:37:00,891 [11956] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-01-26 21:37:00,891 [11956] INFO     root:247: [JupyterRequire] Initializing comms.
2023-01-26 21:37:00,901 [11956] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-01-26 21:37:00,903 [11956] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-01-26 21:37:00,903 [11956] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-01-27 07:56:19,774 [11956] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-01-27 07:56:19,778 [11956] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-01-27 07:56:19,779 [11956] INFO     root:247: [JupyterRequire] Initializing comms.
2023-01-27 07:56:19,806 [11956] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-01-27 07:56:19,813 [11956] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-01-27 07:56:19,815 [11956] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-01-27 11:23:03,172 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 11:23:03,180 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 11; new: 4
2023-01-27 11:23:03,181 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:11] new[1:4]
2023-01-27 11:23:03,195 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 4 (to 3 in part parser)
2023-01-27 11:23:03,195 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 13:18:23,883 [11956] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-01-27 13:18:23,888 [11956] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-01-27 13:18:23,889 [11956] INFO     root:247: [JupyterRequire] Initializing comms.
2023-01-27 13:18:23,905 [11956] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-01-27 13:18:23,908 [11956] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-01-27 13:18:23,908 [11956] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-01-27 14:02:36,152 [11956] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-01-27 14:02:36,153 [11956] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-01-27 14:02:36,154 [11956] INFO     root:247: [JupyterRequire] Initializing comms.
2023-01-27 14:02:36,162 [11956] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-01-27 14:02:36,165 [11956] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-01-27 14:02:36,167 [11956] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-01-27 15:19:03,312 [14968] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-01-27 15:19:03,312 [14968] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-01-27 15:19:03,313 [14968] INFO     root:247: [JupyterRequire] Initializing comms.
2023-01-27 15:19:03,318 [14968] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-01-27 15:19:03,321 [14968] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-01-27 15:19:03,321 [14968] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-01-27 15:19:35,840 [11956] INFO     numexpr.utils:145: [JupyterRequire] Note: NumExpr detected 12 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
2023-01-27 15:19:35,842 [11956] INFO     numexpr.utils:157: [JupyterRequire] NumExpr defaulting to 8 threads.
2023-01-27 15:23:54,512 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 15:23:54,512 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 4; new: 4
2023-01-27 15:23:54,512 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:4] new[1:4]
2023-01-27 15:23:54,513 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 4 (to 3 in part parser)
2023-01-27 15:23:54,513 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 15:23:54,525 [11956] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\numpy\__init__.py
2023-01-27 15:24:57,695 [15988] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-01-27 15:24:57,696 [15988] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-01-27 15:24:57,696 [15988] INFO     root:247: [JupyterRequire] Initializing comms.
2023-01-27 15:24:57,701 [15988] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-01-27 15:24:57,702 [15988] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-01-27 15:24:57,703 [15988] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-01-27 15:25:43,965 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 15:25:43,966 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 4; new: 2
2023-01-27 15:25:43,966 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:4] new[1:2]
2023-01-27 15:25:43,967 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2023-01-27 15:25:43,968 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 15:25:56,575 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 15:25:56,576 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 2
2023-01-27 15:25:56,577 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2023-01-27 15:25:56,577 [11956] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2023-01-27 15:25:56,578 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:2] new[2:2]
2023-01-27 15:25:56,578 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 2 (to 1 in part parser)
2023-01-27 15:25:56,579 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 15:26:04,056 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 15:26:04,058 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 2
2023-01-27 15:26:04,058 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2023-01-27 15:26:04,058 [11956] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2023-01-27 15:26:04,058 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:2] new[2:2]
2023-01-27 15:26:04,059 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 2 (to 1 in part parser)
2023-01-27 15:26:04,059 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 15:26:04,083 [11956] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\numpy\core\fromnumeric.py
2023-01-27 15:26:45,722 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 15:26:45,722 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 1
2023-01-27 15:26:45,723 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:2] new[1:1]
2023-01-27 15:26:45,723 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-27 15:26:45,724 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 15:37:51,662 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 15:37:51,662 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-01-27 15:37:51,662 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-01-27 15:37:51,665 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-27 15:37:51,665 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 15:41:20,601 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 15:41:20,601 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 5
2023-01-27 15:41:20,602 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:5]
2023-01-27 15:41:20,603 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 5 (to 4 in part parser)
2023-01-27 15:41:20,603 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 15:42:16,943 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 15:42:16,944 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 5; new: 1
2023-01-27 15:42:16,944 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:5] new[1:1]
2023-01-27 15:42:16,945 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-27 15:42:16,945 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 15:45:35,673 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 15:45:35,674 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 4
2023-01-27 15:45:35,674 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:4]
2023-01-27 15:45:35,676 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 4 (to 3 in part parser)
2023-01-27 15:45:35,677 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 15:45:43,244 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 15:45:43,245 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 4; new: 5
2023-01-27 15:45:43,246 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:3] new[1:3]
2023-01-27 15:45:43,246 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 2 in part parser)
2023-01-27 15:45:43,247 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 3 to 5 (to 4 in part parser)
2023-01-27 15:45:43,247 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[4:4] new[4:5]
2023-01-27 15:45:43,247 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 15:45:50,846 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 15:45:50,846 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 5; new: 6
2023-01-27 15:45:50,846 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:4] new[1:4]
2023-01-27 15:45:50,847 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 2 in part parser)
2023-01-27 15:45:50,848 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 3 to 6 (to 5 in part parser)
2023-01-27 15:45:50,848 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[5:5] new[5:6]
2023-01-27 15:45:50,848 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 15:48:29,593 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 15:48:29,594 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 6; new: 13
2023-01-27 15:48:29,594 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-01-27 15:48:29,596 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 13 (to 12 in part parser)
2023-01-27 15:48:29,596 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[2:2] new[2:2]
2023-01-27 15:48:29,597 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:3]
2023-01-27 15:48:29,597 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[4:5] new[4:5]
2023-01-27 15:48:29,597 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[6:6] new[6:13]
2023-01-27 15:48:29,597 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 15:48:39,181 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 15:48:39,181 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 13; new: 14
2023-01-27 15:48:39,182 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:12] new[1:12]
2023-01-27 15:48:39,182 [11956] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:12] new[1:10]
2023-01-27 15:48:39,182 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 11 to 11 (to 11 in part parser)
2023-01-27 15:48:39,183 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 12 to 14 (to 13 in part parser)
2023-01-27 15:48:39,183 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[13:13] new[13:14]
2023-01-27 15:48:39,183 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 15:49:28,934 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 15:49:28,935 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 14; new: 17
2023-01-27 15:49:28,935 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:13] new[1:13]
2023-01-27 15:49:28,935 [11956] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:13] new[1:13]
2023-01-27 15:49:28,937 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[14:14] new[14:17]
2023-01-27 15:49:28,938 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 14 to 17 (to 16 in part parser)
2023-01-27 15:49:28,938 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 15:49:37,204 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 15:49:37,206 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 17; new: 17
2023-01-27 15:49:37,206 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:16] new[1:16]
2023-01-27 15:49:37,207 [11956] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:16] new[1:16]
2023-01-27 15:49:37,207 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[17:17] new[17:17]
2023-01-27 15:49:37,208 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 17 to 17 (to 16 in part parser)
2023-01-27 15:49:37,208 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 15:49:46,618 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 15:49:46,620 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 17; new: 17
2023-01-27 15:49:46,620 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:16] new[1:16]
2023-01-27 15:49:46,621 [11956] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:16] new[1:16]
2023-01-27 15:49:46,621 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[17:17] new[17:17]
2023-01-27 15:49:46,621 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 17 to 17 (to 16 in part parser)
2023-01-27 15:49:46,622 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 15:51:58,506 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 15:51:58,508 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 17; new: 22
2023-01-27 15:51:58,508 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2023-01-27 15:51:58,511 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 22 (to 21 in part parser)
2023-01-27 15:51:58,511 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:3]
2023-01-27 15:51:58,512 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[4:16] new[4:16]
2023-01-27 15:51:58,512 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[17:17] new[17:22]
2023-01-27 15:51:58,512 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 15:51:58,521 [11956] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\__init__.py
2023-01-27 15:52:03,713 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 15:52:03,714 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 22; new: 22
2023-01-27 15:52:03,715 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:21] new[1:21]
2023-01-27 15:52:03,715 [11956] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:21] new[1:19]
2023-01-27 15:52:03,716 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 20 to 20 (to 20 in part parser)
2023-01-27 15:52:03,716 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 21 to 22 (to 21 in part parser)
2023-01-27 15:52:03,717 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[22:22] new[22:22]
2023-01-27 15:52:03,717 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 15:52:03,740 [11956] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\reshape\reshape.py
2023-01-27 15:52:03,754 [11956] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\__init__.py
2023-01-27 15:52:03,824 [11956] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\frame.py
2023-01-27 15:52:04,138 [11956] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\generic.py
2023-01-27 15:52:04,171 [11956] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\base.py
2023-01-27 15:52:04,184 [11956] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\accessor.py
2023-01-27 15:52:04,213 [11956] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\indexing.py
2023-01-27 15:52:04,235 [11956] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\arraylike.py
2023-01-27 15:52:04,248 [11956] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\_typing.py
2023-01-27 15:52:04,287 [11956] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\types.py
2023-01-27 15:52:04,298 [11956] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\types.pyi
2023-01-27 15:52:06,237 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 15:52:06,238 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 22; new: 22
2023-01-27 15:52:06,238 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:21] new[1:21]
2023-01-27 15:52:06,238 [11956] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:21] new[1:19]
2023-01-27 15:52:06,239 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 20 to 20 (to 20 in part parser)
2023-01-27 15:52:06,240 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 21 to 22 (to 21 in part parser)
2023-01-27 15:52:06,240 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[22:22] new[22:22]
2023-01-27 15:52:06,240 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 15:52:06,473 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 15:52:06,474 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 22; new: 22
2023-01-27 15:52:06,474 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:21] new[1:21]
2023-01-27 15:52:06,475 [11956] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:21] new[1:19]
2023-01-27 15:52:06,475 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 20 to 20 (to 20 in part parser)
2023-01-27 15:52:06,476 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 21 to 22 (to 21 in part parser)
2023-01-27 15:52:06,476 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[22:22] new[22:22]
2023-01-27 15:52:06,476 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 15:52:24,765 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 15:52:24,766 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 22; new: 25
2023-01-27 15:52:24,766 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:21] new[1:21]
2023-01-27 15:52:24,767 [11956] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:21] new[1:19]
2023-01-27 15:52:24,768 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 20 to 20 (to 20 in part parser)
2023-01-27 15:52:24,768 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 21 to 25 (to 24 in part parser)
2023-01-27 15:52:24,769 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[22:22] new[22:25]
2023-01-27 15:52:24,769 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 15:52:24,813 [11956] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\numpy\__init__.pyi
2023-01-27 15:52:48,502 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 15:52:48,502 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 25; new: 26
2023-01-27 15:52:48,503 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:24] new[1:24]
2023-01-27 15:52:48,503 [11956] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:24] new[1:23]
2023-01-27 15:52:48,504 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 24 to 25 (to 25 in part parser)
2023-01-27 15:52:48,504 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[25:25] new[25:26]
2023-01-27 15:52:48,505 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 26 to 26 (to 25 in part parser)
2023-01-27 15:52:48,505 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 15:54:02,239 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 15:54:02,240 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 26; new: 3
2023-01-27 15:54:02,241 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:26] new[1:3]
2023-01-27 15:54:02,242 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-01-27 15:54:02,242 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 15:54:08,550 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 15:54:08,551 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 1
2023-01-27 15:54:08,551 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:3] new[1:1]
2023-01-27 15:54:08,551 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-27 15:54:08,552 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 15:54:14,549 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 15:54:14,550 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-01-27 15:54:14,550 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-01-27 15:54:14,551 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-27 15:54:14,551 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 15:54:16,027 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 15:54:16,027 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-01-27 15:54:16,027 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-01-27 15:54:16,028 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-27 15:54:16,028 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 15:59:01,180 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 15:59:01,181 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 46
2023-01-27 15:59:01,182 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:46]
2023-01-27 15:59:01,188 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 46 (to 45 in part parser)
2023-01-27 15:59:01,189 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 15:59:07,614 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 15:59:07,615 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 46; new: 46
2023-01-27 15:59:07,615 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:45] new[1:45]
2023-01-27 15:59:07,616 [11956] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:45] new[1:44]
2023-01-27 15:59:07,617 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 45 to 46 (to 45 in part parser)
2023-01-27 15:59:07,617 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[46:46] new[46:46]
2023-01-27 15:59:07,617 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 15:59:23,697 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 15:59:23,698 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 46; new: 46
2023-01-27 15:59:23,699 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:45] new[1:45]
2023-01-27 15:59:23,699 [11956] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:45] new[1:44]
2023-01-27 15:59:23,700 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 45 to 46 (to 45 in part parser)
2023-01-27 15:59:23,700 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[46:46] new[46:46]
2023-01-27 15:59:23,700 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 16:01:03,490 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 16:01:03,490 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 46; new: 52
2023-01-27 16:01:03,490 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:45] new[1:45]
2023-01-27 16:01:03,490 [11956] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:45] new[1:44]
2023-01-27 16:01:03,490 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 45 to 47 (to 47 in part parser)
2023-01-27 16:01:03,490 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[46:46] new[46:52]
2023-01-27 16:01:03,500 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 48 to 52 (to 51 in part parser)
2023-01-27 16:01:03,500 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 16:01:49,289 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 16:01:49,289 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 52; new: 52
2023-01-27 16:01:49,289 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:50] new[1:50]
2023-01-27 16:01:49,289 [11956] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:51] new[1:50]
2023-01-27 16:01:49,289 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[51:52] new[51:52]
2023-01-27 16:01:49,289 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 51 to 52 (to 51 in part parser)
2023-01-27 16:01:49,289 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 16:01:51,121 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 16:01:51,123 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 52; new: 52
2023-01-27 16:01:51,123 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:51] new[1:51]
2023-01-27 16:01:51,124 [11956] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:51] new[1:50]
2023-01-27 16:01:51,125 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 51 to 52 (to 51 in part parser)
2023-01-27 16:01:51,125 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[52:52] new[52:52]
2023-01-27 16:01:51,125 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 16:02:13,635 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 16:02:13,635 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 52; new: 54
2023-01-27 16:02:13,635 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:51] new[1:51]
2023-01-27 16:02:13,635 [11956] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:51] new[1:50]
2023-01-27 16:02:13,638 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 51 to 54 (to 53 in part parser)
2023-01-27 16:02:13,638 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[52:52] new[52:54]
2023-01-27 16:02:13,638 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 16:04:00,233 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 16:04:00,233 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 54; new: 55
2023-01-27 16:04:00,233 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:53] new[1:53]
2023-01-27 16:04:00,233 [11956] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:53] new[1:50]
2023-01-27 16:04:00,233 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 51 to 55 (to 54 in part parser)
2023-01-27 16:04:00,237 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[54:54] new[54:55]
2023-01-27 16:04:00,237 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 16:04:32,136 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 16:04:32,138 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 55; new: 56
2023-01-27 16:04:32,138 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:54] new[1:54]
2023-01-27 16:04:32,138 [11956] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:54] new[1:50]
2023-01-27 16:04:32,138 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 51 to 56 (to 55 in part parser)
2023-01-27 16:04:32,142 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[55:55] new[55:56]
2023-01-27 16:04:32,142 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 16:04:35,651 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 16:04:35,651 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 56; new: 56
2023-01-27 16:04:35,651 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:55] new[1:55]
2023-01-27 16:04:35,651 [11956] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:55] new[1:50]
2023-01-27 16:04:35,656 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 51 to 56 (to 55 in part parser)
2023-01-27 16:04:35,656 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[56:56] new[56:56]
2023-01-27 16:04:35,657 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 16:04:44,711 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 16:04:44,727 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 56; new: 56
2023-01-27 16:04:44,727 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:53] new[1:53]
2023-01-27 16:04:44,727 [11956] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:55] new[1:50]
2023-01-27 16:04:44,727 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 51 to 56 (to 55 in part parser)
2023-01-27 16:04:44,730 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[54:54] new[54:54]
2023-01-27 16:04:44,730 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[55:55] new[55:55]
2023-01-27 16:04:44,730 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[56:56] new[56:56]
2023-01-27 16:04:44,730 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 16:14:13,942 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 16:14:13,942 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 56; new: 1
2023-01-27 16:14:13,942 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:56] new[1:1]
2023-01-27 16:14:13,942 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-27 16:14:13,942 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 16:14:14,488 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 16:14:14,488 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-01-27 16:14:14,488 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-01-27 16:14:14,488 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-27 16:14:14,488 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 16:14:16,225 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 16:14:16,226 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-01-27 16:14:16,226 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-01-27 16:14:16,228 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-27 16:14:16,228 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 16:15:07,132 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 16:15:07,133 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 24
2023-01-27 16:15:07,133 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:24]
2023-01-27 16:15:07,137 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 24 (to 23 in part parser)
2023-01-27 16:15:07,137 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 16:15:18,550 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 16:15:18,550 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 24; new: 1
2023-01-27 16:15:18,550 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:24] new[1:1]
2023-01-27 16:15:18,550 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-27 16:15:18,550 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 16:16:55,346 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 16:16:55,349 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-01-27 16:16:55,349 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-01-27 16:16:55,349 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-27 16:16:55,349 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 16:17:16,579 [11956] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\AppData\Local\Temp/ipykernel_11956/3456146522.py:25: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  entropy = np.sum(np.sum(-(np.log(probs)*y),axis = 1)) / n

2023-01-27 16:17:43,858 [11956] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\AppData\Local\Temp/ipykernel_11956/2045782312.py:26: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  entropy = np.sum(np.sum(-(np.log(probs)*y),axis = 1)) / n

2023-01-27 16:18:15,522 [11956] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\AppData\Local\Temp/ipykernel_11956/3996766650.py:26: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  entropy = np.sum(np.sum(-(np.log(probs)*y),axis = 1)) / n

2023-01-27 16:18:30,758 [11956] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\AppData\Local\Temp/ipykernel_11956/3698084212.py:26: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  entropy = np.sum(-(np.log(probs)*y)) / n

2023-01-27 16:18:49,861 [11956] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\AppData\Local\Temp/ipykernel_11956/2364365686.py:26: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  entropy = np.sum(-(np.log(probs)*y)) / n

2023-01-27 16:25:11,137 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 16:25:11,137 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 78
2023-01-27 16:25:11,137 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:78]
2023-01-27 16:25:11,161 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 78 (to 77 in part parser)
2023-01-27 16:25:11,161 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 16:26:11,232 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 16:26:11,234 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 78; new: 1
2023-01-27 16:26:11,234 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:78] new[1:1]
2023-01-27 16:26:11,235 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-01-27 16:26:11,235 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 16:27:08,902 [11956] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\AppData\Local\Temp/ipykernel_11956/3930423504.py:25: RuntimeWarning: divide by zero encountered in log
  entropy = np.sum((np.sum(-(np.log(probs)*y) , axis = 0))) / n

2023-01-27 16:27:08,902 [11956] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\AppData\Local\Temp/ipykernel_11956/3930423504.py:25: RuntimeWarning: invalid value encountered in multiply
  entropy = np.sum((np.sum(-(np.log(probs)*y) , axis = 0))) / n

2023-01-27 16:27:09,650 [11956] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\AppData\Local\Temp/ipykernel_11956/3930423504.py:17: RuntimeWarning: overflow encountered in exp
  Z2 = np.exp(Z2)

2023-01-27 16:27:09,650 [11956] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\AppData\Local\Temp/ipykernel_11956/3930423504.py:18: RuntimeWarning: invalid value encountered in true_divide
  A2 = (Z2) / np.sum((Z2), axis = 1, keepdims=True)

2023-01-27 16:28:02,729 [11956] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-01-27 16:28:02,729 [11956] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 80
2023-01-27 16:28:02,729 [11956] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:80]
2023-01-27 16:28:02,743 [11956] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 80 (to 79 in part parser)
2023-01-27 16:28:02,743 [11956] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-01-27 16:31:02,198 [11956] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\AppData\Local\Temp/ipykernel_11956/1146115483.py:25: RuntimeWarning: divide by zero encountered in log
  entropy = np.sum((np.sum(-(np.log(probs)*y) , axis = 0))) / n

2023-01-27 16:31:02,198 [11956] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\AppData\Local\Temp/ipykernel_11956/1146115483.py:25: RuntimeWarning: invalid value encountered in multiply
  entropy = np.sum((np.sum(-(np.log(probs)*y) , axis = 0))) / n

2023-01-27 16:31:11,133 [11956] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\AppData\Local\Temp/ipykernel_11956/1146115483.py:25: RuntimeWarning: divide by zero encountered in log
  entropy = np.sum((np.sum(-(np.log(probs)*y) , axis = 0))) / n

2023-01-27 16:31:11,133 [11956] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\AppData\Local\Temp/ipykernel_11956/1146115483.py:25: RuntimeWarning: invalid value encountered in multiply
  entropy = np.sum((np.sum(-(np.log(probs)*y) , axis = 0))) / n

2023-01-27 16:31:15,501 [11956] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\AppData\Local\Temp/ipykernel_11956/1146115483.py:25: RuntimeWarning: divide by zero encountered in log
  entropy = np.sum((np.sum(-(np.log(probs)*y) , axis = 0))) / n

2023-01-27 16:31:15,502 [11956] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\AppData\Local\Temp/ipykernel_11956/1146115483.py:25: RuntimeWarning: invalid value encountered in multiply
  entropy = np.sum((np.sum(-(np.log(probs)*y) , axis = 0))) / n

2023-01-27 16:31:20,966 [11956] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\AppData\Local\Temp/ipykernel_11956/1146115483.py:25: RuntimeWarning: divide by zero encountered in log
  entropy = np.sum((np.sum(-(np.log(probs)*y) , axis = 0))) / n

2023-01-27 16:31:20,967 [11956] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\AppData\Local\Temp/ipykernel_11956/1146115483.py:25: RuntimeWarning: invalid value encountered in multiply
  entropy = np.sum((np.sum(-(np.log(probs)*y) , axis = 0))) / n

2023-01-27 16:31:23,529 [11956] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\AppData\Local\Temp/ipykernel_11956/1146115483.py:25: RuntimeWarning: divide by zero encountered in log
  entropy = np.sum((np.sum(-(np.log(probs)*y) , axis = 0))) / n

2023-01-27 16:31:23,529 [11956] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\AppData\Local\Temp/ipykernel_11956/1146115483.py:25: RuntimeWarning: invalid value encountered in multiply
  entropy = np.sum((np.sum(-(np.log(probs)*y) , axis = 0))) / n

2023-01-27 16:31:25,681 [11956] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\AppData\Local\Temp/ipykernel_11956/1146115483.py:25: RuntimeWarning: divide by zero encountered in log
  entropy = np.sum((np.sum(-(np.log(probs)*y) , axis = 0))) / n

2023-01-27 16:31:25,681 [11956] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\AppData\Local\Temp/ipykernel_11956/1146115483.py:25: RuntimeWarning: invalid value encountered in multiply
  entropy = np.sum((np.sum(-(np.log(probs)*y) , axis = 0))) / n

2023-01-27 16:34:55,207 [11956] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\AppData\Local\Temp/ipykernel_11956/2687385380.py:25: RuntimeWarning: divide by zero encountered in log
  entropy = np.sum((np.sum(-(np.log(probs)*y) , axis = 0))) / n

2023-01-27 16:34:55,207 [11956] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\AppData\Local\Temp/ipykernel_11956/2687385380.py:25: RuntimeWarning: invalid value encountered in multiply
  entropy = np.sum((np.sum(-(np.log(probs)*y) , axis = 0))) / n

2023-01-27 16:34:55,357 [11956] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\AppData\Local\Temp/ipykernel_11956/2687385380.py:17: RuntimeWarning: overflow encountered in exp
  Z2 = np.exp(Z2)

2023-01-27 16:34:55,357 [11956] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\AppData\Local\Temp/ipykernel_11956/2687385380.py:18: RuntimeWarning: invalid value encountered in true_divide
  A2 = (Z2) / np.sum((Z2), axis = 1, keepdims=True)

2023-01-28 09:40:08,406 [11956] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-01-28 09:40:08,406 [11956] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-01-28 09:40:08,406 [11956] INFO     root:247: [JupyterRequire] Initializing comms.
2023-01-28 09:40:08,422 [11956] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-01-28 09:40:08,422 [11956] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-01-28 09:40:08,422 [11956] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-01-28 09:40:09,894 [15988] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-01-28 09:40:09,894 [15988] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-01-28 09:40:09,894 [15988] INFO     root:247: [JupyterRequire] Initializing comms.
2023-01-28 09:40:09,894 [15988] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-01-28 09:40:09,894 [15988] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-01-28 09:40:09,894 [15988] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-01-28 11:03:03,835 [15988] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-01-28 11:03:03,835 [15988] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-01-28 11:03:03,835 [15988] INFO     root:247: [JupyterRequire] Initializing comms.
2023-01-28 11:03:03,843 [15988] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-01-28 11:03:03,851 [15988] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-01-28 11:03:03,851 [15988] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-01-28 11:03:04,253 [11956] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-01-28 11:03:04,253 [11956] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-01-28 11:03:04,253 [11956] INFO     root:247: [JupyterRequire] Initializing comms.
2023-01-28 11:03:04,261 [11956] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-01-28 11:03:04,261 [11956] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-01-28 11:03:04,261 [11956] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-01-28 22:24:08,003 [11956] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-01-28 22:24:08,003 [11956] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-01-28 22:24:08,003 [11956] INFO     root:247: [JupyterRequire] Initializing comms.
2023-01-28 22:24:08,026 [11956] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-01-28 22:24:08,029 [11956] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-01-28 22:24:08,030 [11956] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-01-28 22:24:08,481 [15988] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-01-28 22:24:08,485 [15988] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-01-28 22:24:08,487 [15988] INFO     root:247: [JupyterRequire] Initializing comms.
2023-01-28 22:24:08,496 [15988] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-01-28 22:24:08,497 [15988] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-01-28 22:24:08,497 [15988] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-01-29 16:16:54,690 [15988] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-01-29 16:16:54,692 [15988] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-01-29 16:16:54,693 [15988] INFO     root:247: [JupyterRequire] Initializing comms.
2023-01-29 16:16:54,702 [15988] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-01-29 16:16:54,703 [15988] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-01-29 16:16:54,703 [15988] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-01-29 16:16:55,821 [11956] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-01-29 16:16:55,825 [11956] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-01-29 16:16:55,826 [11956] INFO     root:247: [JupyterRequire] Initializing comms.
2023-01-29 16:16:55,842 [11956] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-01-29 16:16:55,843 [11956] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-01-29 16:16:55,844 [11956] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-01-29 17:13:38,291 [12456] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-01-29 17:13:38,297 [12456] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-01-29 17:13:38,297 [12456] INFO     root:247: [JupyterRequire] Initializing comms.
2023-01-29 17:13:38,302 [12456] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-01-29 17:13:38,307 [12456] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-01-29 17:13:38,307 [12456] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-01-29 17:13:42,017 [12456] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-01-29 17:13:42,017 [12456] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-01-29 17:13:42,017 [12456] INFO     root:247: [JupyterRequire] Initializing comms.
2023-01-29 17:13:42,033 [12456] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-01-29 17:13:42,037 [12456] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-01-29 17:13:42,037 [12456] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-01 15:13:36,532 [19540] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-01 15:13:36,534 [19540] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-01 15:13:36,535 [19540] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-01 15:13:36,536 [19540] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-01 15:13:36,537 [19540] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-01 15:13:36,537 [19540] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-01 15:13:37,350 [19540] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-01 15:13:37,351 [19540] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-01 15:13:37,352 [19540] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-01 15:13:37,356 [19540] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-01 15:13:37,357 [19540] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-01 15:13:37,358 [19540] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-01 15:13:50,046 [19540] INFO     numexpr.utils:145: [JupyterRequire] Note: NumExpr detected 12 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
2023-02-01 15:13:50,047 [19540] INFO     numexpr.utils:157: [JupyterRequire] NumExpr defaulting to 8 threads.
2023-02-01 15:13:50,761 [19540] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pyforest\_importable.py
2023-02-01 15:13:50,938 [19540] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\2and3\builtins.pyi
2023-02-01 15:13:54,660 [19540] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 15:13:54,660 [19540] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-01 15:13:54,661 [19540] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-01 15:13:54,661 [19540] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-01 15:13:54,662 [19540] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 15:15:59,126 [19540] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 15:15:59,126 [19540] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-01 15:15:59,127 [19540] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-01 15:15:59,127 [19540] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-01 15:15:59,127 [19540] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 15:27:23,502 [19540] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 15:27:23,503 [19540] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-01 15:27:23,503 [19540] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-01 15:27:23,504 [19540] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-01 15:27:23,504 [19540] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 15:27:23,556 [19540] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\typing.py
2023-02-01 15:27:23,572 [19540] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\typing.pyi
2023-02-01 15:27:23,615 [19540] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\sys.pyi
2023-02-01 16:17:48,178 [19540] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 16:17:48,184 [19540] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-01 16:17:48,185 [19540] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-01 16:17:48,192 [19540] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-01 16:17:48,193 [19540] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 16:17:48,279 [19540] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\numpy\__init__.py
2023-02-01 16:17:48,324 [19540] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\numpy\__init__.pyi
2023-02-01 16:20:23,507 [19540] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 16:20:23,508 [19540] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-01 16:20:23,508 [19540] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-01 16:20:23,512 [19540] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-01 16:20:23,512 [19540] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 16:22:36,484 [19540] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 16:22:36,484 [19540] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-01 16:22:36,484 [19540] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-01 16:22:36,486 [19540] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-01 16:22:36,486 [19540] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 16:22:36,520 [19540] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\abc.py
2023-02-01 16:22:36,528 [19540] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\abc.pyi
2023-02-01 16:23:09,926 [19540] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 16:23:09,927 [19540] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-01 16:23:09,927 [19540] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-01 16:23:09,927 [19540] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-01 16:23:09,929 [19540] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 16:25:17,560 [19540] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 16:25:17,561 [19540] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 2
2023-02-01 16:25:17,561 [19540] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:2]
2023-02-01 16:25:17,564 [19540] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2023-02-01 16:25:17,564 [19540] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 16:28:33,769 [20188] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-01 16:28:33,769 [20188] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-01 16:28:33,769 [20188] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-01 16:28:33,773 [20188] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-01 16:28:33,774 [20188] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-01 16:28:33,775 [20188] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-01 16:29:53,934 [20188] DEBUG    matplotlib:224: [JupyterRequire] matplotlib data path: C:\Users\sunny\anaconda3\lib\site-packages\matplotlib\mpl-data
2023-02-01 16:29:53,950 [20188] DEBUG    matplotlib:224: [JupyterRequire] CONFIGDIR=C:\Users\sunny\.matplotlib
2023-02-01 16:29:53,953 [20188] DEBUG    matplotlib:1394: [JupyterRequire] matplotlib version 3.4.3
2023-02-01 16:29:53,953 [20188] DEBUG    matplotlib:1395: [JupyterRequire] interactive is False
2023-02-01 16:29:53,954 [20188] DEBUG    matplotlib:1396: [JupyterRequire] platform is win32
2023-02-01 16:29:53,954 [20188] DEBUG    matplotlib:1397: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', '_io', 'marshal', 'nt', 'winreg', '_frozen_importlib_external', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', 'encodings.cp1252', '_signal', 'encodings.latin_1', '_abc', 'abc', 'io', '__main__', '_stat', 'stat', '_collections_abc', 'genericpath', 'ntpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', '_distutils_hack', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', '_heapq', 'heapq', 'itertools', 'keyword', '_operator', 'operator', 'reprlib', '_collections', 'collections', 'collections.abc', '_functools', 'functools', 'contextlib', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', 'typing.io', 'typing.re', 'typing', 'importlib.abc', 'importlib.util', 'google', 'google.cloud', 'google.logging', 'mpl_toolkits', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'msvcrt', '_winapi', 'subprocess', 'jupyter_client._version', 'posixpath', 'fnmatch', 'glob', '_socket', 'math', 'select', 'selectors', 'socket', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_bisect', 'bisect', '_random', '_sha512', 'random', 'tempfile', 'getpass', 'platform', 'zmq.libzmq', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_24', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'copy', '_struct', 'struct', '_compat_pickle', '_pickle', 'pickle', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'atexit', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', '_ast', 'ast', '_opcode', 'opcode', 'dis', 'token', 'tokenize', 'linecache', 'inspect', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.traitlets', 'traitlets.utils.decorators', 'traitlets._version', 'traitlets', 'traceback', '_string', 'string', 'logging', 'pprint', 'gettext', 'argparse', 'traitlets.config.loader', 'textwrap', 'traitlets.utils.text', 'traitlets.config.configurable', 'traitlets.config.application', 'traitlets.config', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'urllib', 'urllib.parse', 'pathlib', 'jupyter_core.paths', 'jupyter_client.utils', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_ssl', 'binascii', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.threads', '_overlapped', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.selector_events', 'asyncio.windows_utils', 'asyncio.windows_events', 'asyncio', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', '_queue', 'queue', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', '_uuid', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', '_datetime', 'datetime', 'numbers', 'logging.handlers', 'html.entities', 'html', 'array', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', '_ctypes', 'ctypes._endian', 'ctypes', 'ctypes.wintypes', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', '__future__', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'sysconfig', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'locale', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_win32', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'IPython.lib.security', 'IPython.lib', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.deduplicate', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout.scrollable_pane', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'prompt_toolkit.patch_stdout', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'parso._compatibility', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.file_io', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.common', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.lib.clipboard', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'nturl2path', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'dataclasses', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'ipython_genutils._version', 'ipython_genutils', 'ipython_genutils.encoding', 'ipython_genutils.py3compat', 'ipython_genutils.path', 'imp', 'hmac', 'dateutil._version', 'dateutil', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.control', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'setuptools._distutils', 'distutils.debug', 'distutils.errors', 'distutils.fancy_getopt', 'distutils.dep_util', 'distutils._log', 'distutils.spawn', 'distutils.util', 'distutils.dist', 'distutils.dir_util', 'distutils.file_util', 'zipfile', 'distutils.archive_util', 'distutils.cmd', 'configparser', 'distutils.config', 'distutils.extension', 'distutils.core', '_distutils_hack.override', 'setuptools._deprecation_warning', 'xml.parsers', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'plistlib', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'importlib._common', 'importlib.resources', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources._vendor.more_itertools.more', 'pkg_resources._vendor.more_itertools', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.functools', 'pkg_resources.extern.jaraco.context', 'pkg_resources.extern.jaraco.text', 'pkg_resources._vendor.platformdirs.api', 'pkg_resources._vendor.platformdirs.version', 'pkg_resources._vendor.platformdirs.windows', 'pkg_resources._vendor.platformdirs', 'pkg_resources.extern.platformdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources._vendor.packaging', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.version', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.tags', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources._vendor.pyparsing.util', 'pkg_resources._vendor.pyparsing.unicode', 'pkg_resources._vendor.pyparsing.exceptions', 'pkg_resources._vendor.pyparsing.actions', 'pkg_resources._vendor.pyparsing.results', 'pkg_resources._vendor.pyparsing.core', 'pkg_resources._vendor.pyparsing.helpers', 'pkg_resources._vendor.pyparsing.testing', 'pkg_resources._vendor.pyparsing.common', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'pkg_resources.extern.packaging.requirements', 'encodings.cp437', 'pkg_resources', 'setuptools.version', 'distutils.filelist', 'setuptools.monkey', 'setuptools.extension', 'distutils.log', 'distutils.command', 'setuptools.extern', 'setuptools._vendor', 'setuptools._vendor.packaging.__about__', 'setuptools._vendor.packaging', 'setuptools.extern.packaging', 'setuptools._vendor.ordered_set', 'setuptools.extern.ordered_set', 'setuptools._vendor.more_itertools.recipes', 'setuptools._vendor.more_itertools.more', 'setuptools._vendor.more_itertools', 'setuptools.extern.more_itertools', '_csv', 'csv', 'setuptools._vendor.zipp', 'setuptools._vendor.importlib_metadata._functools', 'setuptools._vendor.importlib_metadata._text', 'setuptools._vendor.importlib_metadata._adapters', 'setuptools._vendor.importlib_metadata._compat', 'setuptools._vendor.importlib_metadata._meta', 'setuptools._vendor.importlib_metadata._collections', 'setuptools._vendor.importlib_metadata._itertools', 'setuptools._vendor.importlib_metadata', 'setuptools.extern.importlib_metadata', 'zipp', 'importlib_metadata._functools', 'importlib_metadata._text', 'importlib_metadata._adapters', 'importlib_metadata._compat', 'importlib_metadata._meta', 'importlib_metadata._collections', 'importlib_metadata._itertools', 'importlib_metadata', 'setuptools._importlib', 'distutils.command.bdist', 'setuptools.command', 'setuptools.windows_support', 'setuptools._vendor.pyparsing.util', 'setuptools._vendor.pyparsing.unicode', 'setuptools._vendor.pyparsing.exceptions', 'setuptools._vendor.pyparsing.actions', 'setuptools._vendor.pyparsing.results', 'setuptools._vendor.pyparsing.core', 'setuptools._vendor.pyparsing.helpers', 'setuptools._vendor.pyparsing.testing', 'setuptools._vendor.pyparsing.common', 'setuptools._vendor.pyparsing', 'setuptools.extern.pyparsing', 'setuptools._vendor.packaging._manylinux', 'setuptools._vendor.packaging._musllinux', 'setuptools.extern.packaging.tags', 'setuptools.extern.packaging._structures', 'setuptools.extern.packaging.version', 'setuptools.extern.packaging.utils', 'setuptools.extern.packaging.specifiers', 'setuptools.extern.packaging.markers', 'setuptools.extern.packaging.requirements', 'setuptools._path', 'setuptools.config.expand', 'setuptools.config.setupcfg', 'setuptools.config', 'setuptools.errors', 'email._header_value_parser', 'email.headerregistry', 'setuptools.config._apply_pyprojecttoml', 'setuptools.config.pyprojecttoml', 'setuptools.discovery', 'setuptools._vendor.jaraco', 'setuptools.extern.jaraco', 'setuptools.extern.jaraco.functools', 'setuptools.extern.jaraco.context', 'setuptools.extern.jaraco.text', 'setuptools._reqs', 'setuptools._itertools', 'setuptools._entry_points', 'setuptools.dist', 'setuptools.py34compat', 'setuptools._imp', 'setuptools.depends', 'setuptools.logging', 'setuptools.msvc', 'unittest.util', 'unittest.result', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.signals', 'unittest.runner', 'unittest.main', 'unittest', 'unittest.mock', 'distutils.ccompiler', 'distutils._msvccompiler', 'setuptools', 'distutils', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.compiler', 'debugpy._version', 'debugpy.common', 'debugpy.common.json', 'debugpy.common.fmt', 'debugpy.common.compat', 'debugpy', 'debugpy._vendored._util', 'debugpy._vendored', '_pydevd_bundle', 'encodings.ascii', 'stringprep', 'encodings.idna', '_pydevd_bundle.pydevd_vm_type', '_pydev_imps', 'xmlrpc', 'gzip', 'xmlrpc.client', 'socketserver', 'http.server', 'xmlrpc.server', '_pydev_imps._pydev_saved_modules', '_pydevd_bundle.pydevd_constants', '_pydev_bundle', '_pydev_runfiles', '_pydevd_frame_eval', 'pydev_ipython', 'pydevd_concurrency_analyser', 'pydevd_plugins', '_pydev_bundle.pydev_log', '_pydev_bundle._pydev_filesystem_encoding', '_pydevd_bundle.pydevd_comm_constants', 'pydevd_file_utils', '_pydev_imps._pydev_execfile', '_pydevd_bundle.pydevd_exec2', '_pydev_bundle.pydev_imports', '_pydev_bundle.pydev_is_thread_alive', '_pydev_bundle.pydev_override', 'pydevd_plugins.extensions', '_pydevd_bundle.pydevd_extension_utils', '_pydevd_bundle.pydevd_frame_utils', '_pydevd_bundle.pydevd_filtering', '_pydevd_bundle.pydevd_io', '_pydevd_bundle.pydevd_utils', '_pydev_bundle._pydev_tipper_common', '_pydev_bundle._pydev_imports_tipper', '_pydev_bundle._pydev_calltip_util', '_pydevd_bundle.pydevd_safe_repr', '_pydevd_bundle.pydevd_resolver', '_pydevd_bundle.pydevd_extension_api', '_pydevd_bundle.pydevd_xml', '_pydevd_bundle.pydevd_dont_trace', '_pydevd_frame_eval.vendored', '_pydevd_frame_eval.vendored.bytecode.flags', '_pydevd_frame_eval.vendored.bytecode.instr', '_pydevd_frame_eval.vendored.bytecode.bytecode', '_pydevd_frame_eval.vendored.bytecode.concrete', '_pydevd_frame_eval.vendored.bytecode.cfg', '_pydevd_frame_eval.vendored.bytecode', '_pydevd_bundle.pydevd_bytecode_utils', '_pydevd_bundle.pydevd_cython', '_pydevd_bundle.pydevd_cython_wrapper', '_pydevd_bundle.pydevd_additional_thread_info', '_pydevd_bundle.pydevd_thread_lifecycle', '_pydevd_bundle.pydevd_save_locals', '_pydevd_bundle.pydevd_defaults', '_pydev_bundle.pydev_monkey', 'pydevd_tracing', '_pydevd_bundle.pydevd_daemon_thread', '_pydevd_bundle.pydevd_timeout', '_pydevd_bundle.pydevd_vars', '_pydev_bundle.pydev_console_utils', '_pydevd_bundle.pydevd_import_class', '_pydevd_bundle.pydevd_breakpoints', '_pydevd_bundle.pydevd_custom_frames', '_pydevd_bundle.pydevd_dont_trace_files', '_pydevd_bundle.pydevd_net_command', '_pydev_bundle.pydev_umd', 'pydevconsole', '_pydev_bundle._pydev_completer', '_pydevd_bundle.pydevd_net_command_factory_xml', '_pydevd_bundle.pydevd_frame', '_pydevd_bundle.pydevd_additional_thread_info_regular', '_pydevd_bundle.pydevd_trace_dispatch', '_pydevd_frame_eval.pydevd_frame_eval_main', '_pydevd_bundle.pydevd_source_mapping', 'pydevd_concurrency_analyser.pydevd_thread_wrappers', 'pydevd_concurrency_analyser.pydevd_concurrency_logger', '_pydevd_bundle._debug_adapter', '_pydevd_bundle._debug_adapter.pydevd_schema_log', '_pydevd_bundle._debug_adapter.pydevd_base_schema', '_pydevd_bundle._debug_adapter.pydevd_schema', '_pydevd_bundle.pydevd_reload', '_pydev_bundle.fsnotify', '_pydevd_bundle.pydevd_console', '_pydevd_bundle.pydevd_comm', '_pydevd_bundle.pydevd_net_command_factory_json', '_pydevd_bundle.pydevd_collect_bytecode_info', '_pydevd_bundle.pydevd_api', '_pydevd_bundle.pydevd_json_debug_options', '_pydevd_bundle.pydevd_process_net_command_json', '_pydevd_bundle.pydevd_traceproperty', '_pydevd_bundle.pydevd_process_net_command', '_pydevd_bundle.pydevd_suspended_frames', '_pydevd_bundle.pydevd_trace_api', 'pydevd_plugins.django_debug', 'pydevd_plugins.jinja2_debug', '_pydevd_bundle.pydevd_plugin_utils', 'pydevd_plugins.extensions.types', 'pydevd_plugins.extensions.types.pydevd_helpers', 'pydevd_plugins.extensions.types.pydevd_plugin_numpy_types', 'pydevd_plugins.extensions.types.pydevd_plugins_django_form_str', 'pydevd', 'debugpy._vendored.force_pydevd', 'debugpy.server', 'debugpy.adapter', 'debugpy.common.timestamp', 'debugpy.common.util', 'debugpy.common.log', 'debugpy.common.sockets', 'debugpy.server.api', 'ipykernel.debugger', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'IPython.core.completerlib', 'storemagic', 'pyforest._importable', 'pyforest.user_specific_imports', 'pyforest._imports', 'pyforest.utils', 'pyforest', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'mkl._mklinit', 'mkl._py_mkl_service', 'mkl', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._add_newdocs_scalars', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'mmap', 'pandas._typing', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.tzconversion', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.tslibs', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.hashtable', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._libs', 'pandas.util._decorators', 'pandas.core', 'pandas.core.util', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas._libs.hashing', 'pandas.core.dtypes', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.util.hashing', 'pandas.util', 'pandas.util.version', 'pandas.compat.numpy', 'pyarrow._generated_version', '_cython_0_29_28', 'cloudpickle.compat', 'typing_extensions', 'cloudpickle.cloudpickle', 'cloudpickle.cloudpickle_fast', 'cloudpickle', 'pyarrow.util', 'pyarrow.lib', 'pyarrow._hdfsio', 'pyarrow.filesystem', 'pyarrow.hdfs', 'pyarrow.ipc', 'pyarrow.serialization', 'pyarrow.types', 'pyarrow', 'pandas.compat.pyarrow', 'pandas.compat', 'pandas.core.config_init', 'pandas.core.dtypes.missing', 'pandas.util._exceptions', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.array_algos', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.array_algos.take', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.roperator', 'pandas._libs.ops', 'pandas.core.computation', 'numexpr.__config__', 'numexpr.interpreter', 'numexpr.expressions', 'numexpr.utils', 'numexpr.necompiler', 'numexpr.version', 'numexpr', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.core.sorting', 'pandas.core.arrays.base', 'bottleneck.reduce', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.move', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.slow', 'bottleneck.benchmark', 'bottleneck.benchmark.autotimeit', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'bottleneck._pytesttester', 'bottleneck._version', 'bottleneck', 'pandas.core.nanops', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', 'pandas._libs.arrays', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.core.arrays.numeric', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.tseries.offsets', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.floating', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.dtypes.concat', 'pandas.core.array_algos.putmask', 'pandas.core.indexes.frozen', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pyarrow._compute', 'pyarrow._compute_docstrings', 'pyarrow.vendored', 'pyarrow.vendored.docscrape', 'pyarrow.compute', 'pandas.core.arrays.string_arrow', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.flags', 'pandas._libs.reduction', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.times', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas.core.aggregation', 'pandas.core.apply', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas.core.reshape', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.quantile', 'pandas.core.array_algos.replace', 'pandas.core.internals.blocks', 'pandas.core.internals.api', 'pandas.core.internals.base', 'pandas.core.internals.array_manager', 'pandas.core.internals.ops', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.core.internals', 'pandas.core.reshape.concat', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.describe', 'pandas.core.internals.construction', 'pandas.core.shared_docs', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.doc', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.online', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.generic', 'pandas.core.reshape.util', 'pandas.core.reshape.melt', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas.core.series', 'pandas.io.formats.info', 'pandas.core.frame', 'pandas.core.groupby.base', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.engines', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers.base_parser', 'pandas.io.parsers.c_parser_wrapper', 'pandas.io.parsers.python_parser', 'pandas.io.parsers.readers', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.formats.excel', 'pandas.io.excel._odswriter', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.xml', 'pandas.io.api', 'pandas.util._tester', 'pandas._testing._random', 'pandas._testing.contexts', 'pandas._testing._io', 'pandas._testing._warnings', 'cmath', 'pandas._libs.testing', 'pandas._testing.asserters', 'pandas._testing.compat', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'pandas.io.formats.string', 'pandas.io.formats.html', 'logging.config', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.types', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_require', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'matplotlib', 'matplotlib._api.deprecation', 'matplotlib._api', 'matplotlib._c_internal_utils', 'matplotlib.cbook', 'matplotlib.docstring', 'PIL._version', 'PIL', 'defusedxml.common', 'defusedxml', 'xml.etree', 'xml.etree.ElementPath', '_elementtree', 'xml.etree.ElementTree', 'defusedxml.ElementTree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'matplotlib._animation_data', 'matplotlib.animation', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImagePalette', 'PIL.ImageSequence', 'PIL.PngImagePlugin', 'matplotlib._path', 'matplotlib.bezier', 'matplotlib.path', 'matplotlib.transforms', 'matplotlib.ticker', 'matplotlib.scale', 'matplotlib._color_data', 'matplotlib.colors', 'pyparsing.util', 'pyparsing.unicode', 'pyparsing.exceptions', 'pyparsing.actions', 'pyparsing.results', 'pyparsing.core', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib._enums', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver', 'dateutil.rrule', 'matplotlib.units', 'matplotlib.dates']
2023-02-01 16:29:54,010 [20188] DEBUG    matplotlib:224: [JupyterRequire] CACHEDIR=C:\Users\sunny\.matplotlib
2023-02-01 16:29:54,015 [20188] DEBUG    matplotlib.font_manager:1439: [JupyterRequire] Using fontManager instance from C:\Users\sunny\.matplotlib\fontlist-v330.json
2023-02-01 16:29:54,261 [20188] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-02-01 16:29:54,262 [20188] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-02-01 16:29:54,341 [20188] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2023-02-01 16:29:54,343 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,343 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,343 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,343 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-02-01 16:29:54,344 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,344 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,344 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-02-01 16:29:54,344 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,345 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,345 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,345 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,345 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,345 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,345 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-02-01 16:29:54,346 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,346 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-02-01 16:29:54,346 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,346 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,346 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-02-01 16:29:54,346 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,346 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-02-01 16:29:54,347 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-02-01 16:29:54,347 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,347 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,347 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,347 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,347 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,347 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-02-01 16:29:54,347 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,348 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,348 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,348 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,348 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,348 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-02-01 16:29:54,348 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,348 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,348 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,349 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,349 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,349 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,349 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,349 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2023-02-01 16:29:54,349 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,349 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,349 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,350 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2023-02-01 16:29:54,350 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,350 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,350 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,350 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2023-02-01 16:29:54,350 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,350 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,350 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,351 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,351 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,351 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,351 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,351 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,351 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,351 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2023-02-01 16:29:54,351 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2023-02-01 16:29:54,352 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2023-02-01 16:29:54,352 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2023-02-01 16:29:54,352 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,352 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,352 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,352 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2023-02-01 16:29:54,352 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,352 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,352 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,352 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2023-02-01 16:29:54,354 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,354 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2023-02-01 16:29:54,354 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sitka' (SitkaVF.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,354 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,354 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2023-02-01 16:29:54,354 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,354 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,354 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,355 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,355 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2023-02-01 16:29:54,355 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,355 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,355 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,355 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,355 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,355 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2023-02-01 16:29:54,356 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,356 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,356 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,356 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,356 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2023-02-01 16:29:54,356 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,356 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,356 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,356 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,357 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,357 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,357 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,357 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,357 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,357 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,357 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,357 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,358 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,358 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,358 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,358 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2023-02-01 16:29:54,358 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,358 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,358 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,358 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,359 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,359 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2023-02-01 16:29:54,359 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,359 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2023-02-01 16:29:54,359 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2023-02-01 16:29:54,359 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,359 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,359 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2023-02-01 16:29:54,360 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,360 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,360 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2023-02-01 16:29:54,360 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,360 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2023-02-01 16:29:54,360 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,360 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,360 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,361 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2023-02-01 16:29:54,361 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2023-02-01 16:29:54,361 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2023-02-01 16:29:54,361 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2023-02-01 16:29:54,361 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,361 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,361 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,361 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,361 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,362 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,362 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,362 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,362 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,362 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2023-02-01 16:29:54,362 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,362 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2023-02-01 16:29:54,362 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,363 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,363 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,363 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,363 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,363 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2023-02-01 16:29:54,363 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,363 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,363 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2023-02-01 16:29:54,363 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2023-02-01 16:29:54,363 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Variable' (SegUIVar.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,363 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,363 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,364 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,364 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,364 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,364 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,364 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,364 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,364 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,364 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,365 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,365 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,365 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2023-02-01 16:29:54,365 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2023-02-01 16:29:54,365 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2023-02-01 16:29:54,365 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,365 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2023-02-01 16:29:54,365 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,366 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,366 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,366 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,366 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2023-02-01 16:29:54,366 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2023-02-01 16:29:54,366 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2023-02-01 16:29:54,366 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,368 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,368 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,368 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2023-02-01 16:29:54,368 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2023-02-01 16:29:54,368 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,368 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,368 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2023-02-01 16:29:54,368 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,369 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,369 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2023-02-01 16:29:54,369 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,369 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,369 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,369 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2023-02-01 16:29:54,369 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,369 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,370 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,370 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2023-02-01 16:29:54,370 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,370 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2023-02-01 16:29:54,370 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,370 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2023-02-01 16:29:54,370 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,370 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,370 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,371 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,371 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,371 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,371 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2023-02-01 16:29:54,371 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2023-02-01 16:29:54,371 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2023-02-01 16:29:54,371 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2023-02-01 16:29:54,372 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2023-02-01 16:29:54,372 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,372 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,372 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,372 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,372 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,372 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,372 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,372 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,373 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,373 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,373 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,373 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,373 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,373 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,373 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,373 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,374 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2023-02-01 16:29:54,374 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2023-02-01 16:29:54,374 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,374 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,374 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2023-02-01 16:29:54,374 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,374 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,374 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,374 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2023-02-01 16:29:54,374 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,374 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2023-02-01 16:29:54,374 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,375 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,375 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,375 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,375 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,375 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,375 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,375 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,375 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2023-02-01 16:29:54,375 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,376 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,376 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,376 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,376 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,376 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sitka' (SitkaVF-Italic.ttf) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,376 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,376 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2023-02-01 16:29:54,376 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,377 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,377 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,377 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2023-02-01 16:29:54,377 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,377 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,377 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,377 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,378 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,378 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2023-02-01 16:29:54,378 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2023-02-01 16:29:54,378 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,378 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,378 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,378 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,379 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,379 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,379 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2023-02-01 16:29:54,379 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,379 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2023-02-01 16:29:54,379 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,380 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,380 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2023-02-01 16:29:54,380 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,380 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,380 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,380 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,380 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,381 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2023-02-01 16:29:54,381 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2023-02-01 16:29:54,381 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2023-02-01 16:29:54,381 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,381 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2023-02-01 16:29:54,381 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2023-02-01 16:29:54,381 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,381 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,382 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2023-02-01 16:29:54,382 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,382 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2023-02-01 16:29:54,382 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,382 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,382 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,382 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2023-02-01 16:29:54,383 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2023-02-01 16:29:54,383 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,383 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,383 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,383 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,383 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,383 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2023-02-01 16:29:54,384 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2023-02-01 16:29:54,384 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,384 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,384 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2023-02-01 16:29:54,384 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,384 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2023-02-01 16:29:54,384 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2023-02-01 16:29:54,384 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2023-02-01 16:29:54,384 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,384 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,384 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2023-02-01 16:29:54,384 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,384 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,384 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,384 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,386 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,386 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,386 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,386 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,386 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,386 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,386 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,386 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,387 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2023-02-01 16:29:54,387 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,387 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2023-02-01 16:29:54,387 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2023-02-01 16:29:54,387 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2023-02-01 16:29:54,387 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2023-02-01 16:29:54,387 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2023-02-01 16:29:54,387 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,388 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,388 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,388 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,388 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,388 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,388 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,388 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,388 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,389 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,389 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,389 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,389 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,389 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,389 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,389 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,389 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2023-02-01 16:29:54,390 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,390 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2023-02-01 16:29:54,390 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2023-02-01 16:29:54,390 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2023-02-01 16:29:54,390 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2023-02-01 16:29:54,390 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,390 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,390 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,391 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,391 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,391 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2023-02-01 16:29:54,391 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,391 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,391 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,391 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2023-02-01 16:29:54,391 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,392 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2023-02-01 16:29:54,392 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2023-02-01 16:29:54,392 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,392 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2023-02-01 16:29:54,392 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2023-02-01 16:29:54,392 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2023-02-01 16:29:54,392 [20188] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Fluent Icons' (SegoeIcons.ttf) normal normal 400 normal>) = 10.05
2023-02-01 16:29:54,393 [20188] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2023-02-01 16:50:51,430 [30952] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-01 16:50:51,431 [30952] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-01 16:50:51,431 [30952] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-01 16:50:51,433 [30952] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-01 16:50:51,434 [30952] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-01 16:50:51,434 [30952] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-01 21:38:06,107 [30952] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pyforest\_importable.py
2023-02-01 21:38:06,271 [30952] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\2and3\builtins.pyi
2023-02-01 21:40:11,061 [30952] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 21:40:11,062 [30952] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 2
2023-02-01 21:40:11,063 [30952] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:3] new[1:2]
2023-02-01 21:40:11,064 [30952] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2023-02-01 21:40:11,064 [30952] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 21:40:11,134 [30952] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\sys.pyi
2023-02-01 21:43:02,132 [30952] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 21:43:02,132 [30952] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 3
2023-02-01 21:43:02,132 [30952] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:2] new[1:3]
2023-02-01 21:43:02,133 [30952] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-02-01 21:43:02,135 [30952] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 21:43:02,189 [30952] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\typing.py
2023-02-01 21:43:02,203 [30952] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\typing.pyi
2023-02-01 22:15:54,041 [30952] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 22:15:54,046 [30952] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 28
2023-02-01 22:15:54,046 [30952] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[insert] old[1:0] new[1:15]
2023-02-01 22:15:54,051 [30952] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 16 (to 16 in part parser)
2023-02-01 22:15:54,053 [30952] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[16:16]
2023-02-01 22:15:54,053 [30952] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:3] new[17:28]
2023-02-01 22:15:54,055 [30952] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 17 to 28 (to 27 in part parser)
2023-02-01 22:15:54,056 [30952] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 22:27:45,126 [30952] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-01 22:27:45,126 [30952] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-01 22:27:45,128 [30952] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-01 22:27:45,135 [30952] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-01 22:27:45,136 [30952] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-01 22:27:45,137 [30952] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-01 22:58:11,523 [1528] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-01 22:58:11,524 [1528] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-01 22:58:11,524 [1528] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-01 22:58:11,527 [1528] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-01 22:58:11,529 [1528] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-01 22:58:11,529 [1528] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-01 22:58:12,356 [1528] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-01 22:58:12,357 [1528] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-01 22:58:12,358 [1528] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-01 22:58:12,359 [1528] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-01 22:58:12,362 [1528] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-01 22:58:12,362 [1528] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-01 22:58:13,781 [8420] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-01 22:58:13,781 [8420] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-01 22:58:13,781 [8420] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-01 22:58:13,785 [8420] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-01 22:58:13,787 [8420] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-01 22:58:13,787 [8420] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-01 22:58:17,149 [8420] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-01 22:58:17,149 [8420] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-01 22:58:17,149 [8420] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-01 22:58:17,152 [8420] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-01 22:58:17,154 [8420] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-01 22:58:17,154 [8420] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-01 22:58:24,200 [5948] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-01 22:58:24,200 [5948] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-01 22:58:24,200 [5948] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-01 22:58:24,200 [5948] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-01 22:58:24,205 [5948] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-01 22:58:24,205 [5948] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-01 22:59:15,225 [5948] DEBUG    matplotlib:224: [JupyterRequire] matplotlib data path: C:\Users\sunny\anaconda3\lib\site-packages\matplotlib\mpl-data
2023-02-01 22:59:15,240 [5948] DEBUG    matplotlib:224: [JupyterRequire] CONFIGDIR=C:\Users\sunny\.matplotlib
2023-02-01 22:59:15,240 [5948] DEBUG    matplotlib:1394: [JupyterRequire] matplotlib version 3.4.3
2023-02-01 22:59:15,240 [5948] DEBUG    matplotlib:1395: [JupyterRequire] interactive is False
2023-02-01 22:59:15,240 [5948] DEBUG    matplotlib:1396: [JupyterRequire] platform is win32
2023-02-01 22:59:15,240 [5948] DEBUG    matplotlib:1397: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', '_io', 'marshal', 'nt', 'winreg', '_frozen_importlib_external', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', 'encodings.cp1252', '_signal', 'encodings.latin_1', '_abc', 'abc', 'io', '__main__', '_stat', 'stat', '_collections_abc', 'genericpath', 'ntpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', '_distutils_hack', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', '_heapq', 'heapq', 'itertools', 'keyword', '_operator', 'operator', 'reprlib', '_collections', 'collections', 'collections.abc', '_functools', 'functools', 'contextlib', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', 'typing.io', 'typing.re', 'typing', 'importlib.abc', 'importlib.util', 'google', 'google.cloud', 'google.logging', 'mpl_toolkits', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'msvcrt', '_winapi', 'subprocess', 'jupyter_client._version', 'posixpath', 'fnmatch', 'glob', '_socket', 'math', 'select', 'selectors', 'socket', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_bisect', 'bisect', '_random', '_sha512', 'random', 'tempfile', 'getpass', 'platform', 'zmq.libzmq', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_24', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'copy', '_struct', 'struct', '_compat_pickle', '_pickle', 'pickle', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'atexit', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', '_ast', 'ast', '_opcode', 'opcode', 'dis', 'token', 'tokenize', 'linecache', 'inspect', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.traitlets', 'traitlets.utils.decorators', 'traitlets._version', 'traitlets', 'traceback', '_string', 'string', 'logging', 'pprint', 'gettext', 'argparse', 'traitlets.config.loader', 'textwrap', 'traitlets.utils.text', 'traitlets.config.configurable', 'traitlets.config.application', 'traitlets.config', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'urllib', 'urllib.parse', 'pathlib', 'jupyter_core.paths', 'jupyter_client.utils', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_ssl', 'binascii', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.threads', '_overlapped', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.selector_events', 'asyncio.windows_utils', 'asyncio.windows_events', 'asyncio', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', '_queue', 'queue', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', '_uuid', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', '_datetime', 'datetime', 'numbers', 'logging.handlers', 'html.entities', 'html', 'array', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', '_ctypes', 'ctypes._endian', 'ctypes', 'ctypes.wintypes', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', '__future__', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'sysconfig', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'locale', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_win32', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'IPython.lib.security', 'IPython.lib', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.deduplicate', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout.scrollable_pane', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'prompt_toolkit.patch_stdout', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'parso._compatibility', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.file_io', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.common', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.lib.clipboard', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'nturl2path', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'dataclasses', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'ipython_genutils._version', 'ipython_genutils', 'ipython_genutils.encoding', 'ipython_genutils.py3compat', 'ipython_genutils.path', 'imp', 'hmac', 'dateutil._version', 'dateutil', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.control', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'setuptools._distutils', 'distutils.debug', 'distutils.errors', 'distutils.fancy_getopt', 'distutils.dep_util', 'distutils._log', 'distutils.spawn', 'distutils.util', 'distutils.dist', 'distutils.dir_util', 'distutils.file_util', 'zipfile', 'distutils.archive_util', 'distutils.cmd', 'configparser', 'distutils.config', 'distutils.extension', 'distutils.core', '_distutils_hack.override', 'setuptools._deprecation_warning', 'xml.parsers', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'plistlib', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'importlib._common', 'importlib.resources', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources._vendor.more_itertools.more', 'pkg_resources._vendor.more_itertools', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.functools', 'pkg_resources.extern.jaraco.context', 'pkg_resources.extern.jaraco.text', 'pkg_resources._vendor.platformdirs.api', 'pkg_resources._vendor.platformdirs.version', 'pkg_resources._vendor.platformdirs.windows', 'pkg_resources._vendor.platformdirs', 'pkg_resources.extern.platformdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources._vendor.packaging', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.version', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.tags', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources._vendor.pyparsing.util', 'pkg_resources._vendor.pyparsing.unicode', 'pkg_resources._vendor.pyparsing.exceptions', 'pkg_resources._vendor.pyparsing.actions', 'pkg_resources._vendor.pyparsing.results', 'pkg_resources._vendor.pyparsing.core', 'pkg_resources._vendor.pyparsing.helpers', 'pkg_resources._vendor.pyparsing.testing', 'pkg_resources._vendor.pyparsing.common', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'pkg_resources.extern.packaging.requirements', 'encodings.cp437', 'pkg_resources', 'setuptools.version', 'distutils.filelist', 'setuptools.monkey', 'setuptools.extension', 'distutils.log', 'distutils.command', 'setuptools.extern', 'setuptools._vendor', 'setuptools._vendor.packaging.__about__', 'setuptools._vendor.packaging', 'setuptools.extern.packaging', 'setuptools._vendor.ordered_set', 'setuptools.extern.ordered_set', 'setuptools._vendor.more_itertools.recipes', 'setuptools._vendor.more_itertools.more', 'setuptools._vendor.more_itertools', 'setuptools.extern.more_itertools', '_csv', 'csv', 'setuptools._vendor.zipp', 'setuptools._vendor.importlib_metadata._functools', 'setuptools._vendor.importlib_metadata._text', 'setuptools._vendor.importlib_metadata._adapters', 'setuptools._vendor.importlib_metadata._compat', 'setuptools._vendor.importlib_metadata._meta', 'setuptools._vendor.importlib_metadata._collections', 'setuptools._vendor.importlib_metadata._itertools', 'setuptools._vendor.importlib_metadata', 'setuptools.extern.importlib_metadata', 'zipp', 'importlib_metadata._functools', 'importlib_metadata._text', 'importlib_metadata._adapters', 'importlib_metadata._compat', 'importlib_metadata._meta', 'importlib_metadata._collections', 'importlib_metadata._itertools', 'importlib_metadata', 'setuptools._importlib', 'distutils.command.bdist', 'setuptools.command', 'setuptools.windows_support', 'setuptools._vendor.pyparsing.util', 'setuptools._vendor.pyparsing.unicode', 'setuptools._vendor.pyparsing.exceptions', 'setuptools._vendor.pyparsing.actions', 'setuptools._vendor.pyparsing.results', 'setuptools._vendor.pyparsing.core', 'setuptools._vendor.pyparsing.helpers', 'setuptools._vendor.pyparsing.testing', 'setuptools._vendor.pyparsing.common', 'setuptools._vendor.pyparsing', 'setuptools.extern.pyparsing', 'setuptools._vendor.packaging._manylinux', 'setuptools._vendor.packaging._musllinux', 'setuptools.extern.packaging.tags', 'setuptools.extern.packaging._structures', 'setuptools.extern.packaging.version', 'setuptools.extern.packaging.utils', 'setuptools.extern.packaging.specifiers', 'setuptools.extern.packaging.markers', 'setuptools.extern.packaging.requirements', 'setuptools._path', 'setuptools.config.expand', 'setuptools.config.setupcfg', 'setuptools.config', 'setuptools.errors', 'email._header_value_parser', 'email.headerregistry', 'setuptools.config._apply_pyprojecttoml', 'setuptools.config.pyprojecttoml', 'setuptools.discovery', 'setuptools._vendor.jaraco', 'setuptools.extern.jaraco', 'setuptools.extern.jaraco.functools', 'setuptools.extern.jaraco.context', 'setuptools.extern.jaraco.text', 'setuptools._reqs', 'setuptools._itertools', 'setuptools._entry_points', 'setuptools.dist', 'setuptools.py34compat', 'setuptools._imp', 'setuptools.depends', 'setuptools.logging', 'setuptools.msvc', 'unittest.util', 'unittest.result', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.signals', 'unittest.runner', 'unittest.main', 'unittest', 'unittest.mock', 'distutils.ccompiler', 'distutils._msvccompiler', 'setuptools', 'distutils', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.compiler', 'debugpy._version', 'debugpy.common', 'debugpy.common.json', 'debugpy.common.fmt', 'debugpy.common.compat', 'debugpy', 'debugpy._vendored._util', 'debugpy._vendored', '_pydevd_bundle', 'encodings.ascii', 'stringprep', 'encodings.idna', '_pydevd_bundle.pydevd_vm_type', '_pydev_imps', 'xmlrpc', 'gzip', 'xmlrpc.client', 'socketserver', 'http.server', 'xmlrpc.server', '_pydev_imps._pydev_saved_modules', '_pydevd_bundle.pydevd_constants', '_pydev_bundle', '_pydev_runfiles', '_pydevd_frame_eval', 'pydev_ipython', 'pydevd_concurrency_analyser', 'pydevd_plugins', '_pydev_bundle.pydev_log', '_pydev_bundle._pydev_filesystem_encoding', '_pydevd_bundle.pydevd_comm_constants', 'pydevd_file_utils', '_pydev_imps._pydev_execfile', '_pydevd_bundle.pydevd_exec2', '_pydev_bundle.pydev_imports', '_pydev_bundle.pydev_is_thread_alive', '_pydev_bundle.pydev_override', 'pydevd_plugins.extensions', '_pydevd_bundle.pydevd_extension_utils', '_pydevd_bundle.pydevd_frame_utils', '_pydevd_bundle.pydevd_filtering', '_pydevd_bundle.pydevd_io', '_pydevd_bundle.pydevd_utils', '_pydev_bundle._pydev_tipper_common', '_pydev_bundle._pydev_imports_tipper', '_pydev_bundle._pydev_calltip_util', '_pydevd_bundle.pydevd_safe_repr', '_pydevd_bundle.pydevd_resolver', '_pydevd_bundle.pydevd_extension_api', '_pydevd_bundle.pydevd_xml', '_pydevd_bundle.pydevd_dont_trace', '_pydevd_frame_eval.vendored', '_pydevd_frame_eval.vendored.bytecode.flags', '_pydevd_frame_eval.vendored.bytecode.instr', '_pydevd_frame_eval.vendored.bytecode.bytecode', '_pydevd_frame_eval.vendored.bytecode.concrete', '_pydevd_frame_eval.vendored.bytecode.cfg', '_pydevd_frame_eval.vendored.bytecode', '_pydevd_bundle.pydevd_bytecode_utils', '_pydevd_bundle.pydevd_cython', '_pydevd_bundle.pydevd_cython_wrapper', '_pydevd_bundle.pydevd_additional_thread_info', '_pydevd_bundle.pydevd_thread_lifecycle', '_pydevd_bundle.pydevd_save_locals', '_pydevd_bundle.pydevd_defaults', '_pydev_bundle.pydev_monkey', 'pydevd_tracing', '_pydevd_bundle.pydevd_daemon_thread', '_pydevd_bundle.pydevd_timeout', '_pydevd_bundle.pydevd_vars', '_pydev_bundle.pydev_console_utils', '_pydevd_bundle.pydevd_import_class', '_pydevd_bundle.pydevd_breakpoints', '_pydevd_bundle.pydevd_custom_frames', '_pydevd_bundle.pydevd_dont_trace_files', '_pydevd_bundle.pydevd_net_command', '_pydev_bundle.pydev_umd', 'pydevconsole', '_pydev_bundle._pydev_completer', '_pydevd_bundle.pydevd_net_command_factory_xml', '_pydevd_bundle.pydevd_frame', '_pydevd_bundle.pydevd_additional_thread_info_regular', '_pydevd_bundle.pydevd_trace_dispatch', '_pydevd_frame_eval.pydevd_frame_eval_main', '_pydevd_bundle.pydevd_source_mapping', 'pydevd_concurrency_analyser.pydevd_thread_wrappers', 'pydevd_concurrency_analyser.pydevd_concurrency_logger', '_pydevd_bundle._debug_adapter', '_pydevd_bundle._debug_adapter.pydevd_schema_log', '_pydevd_bundle._debug_adapter.pydevd_base_schema', '_pydevd_bundle._debug_adapter.pydevd_schema', '_pydevd_bundle.pydevd_reload', '_pydev_bundle.fsnotify', '_pydevd_bundle.pydevd_console', '_pydevd_bundle.pydevd_comm', '_pydevd_bundle.pydevd_net_command_factory_json', '_pydevd_bundle.pydevd_collect_bytecode_info', '_pydevd_bundle.pydevd_api', '_pydevd_bundle.pydevd_json_debug_options', '_pydevd_bundle.pydevd_process_net_command_json', '_pydevd_bundle.pydevd_traceproperty', '_pydevd_bundle.pydevd_process_net_command', '_pydevd_bundle.pydevd_suspended_frames', '_pydevd_bundle.pydevd_trace_api', 'pydevd_plugins.django_debug', 'pydevd_plugins.jinja2_debug', '_pydevd_bundle.pydevd_plugin_utils', 'pydevd_plugins.extensions.types', 'pydevd_plugins.extensions.types.pydevd_helpers', 'pydevd_plugins.extensions.types.pydevd_plugin_numpy_types', 'pydevd_plugins.extensions.types.pydevd_plugins_django_form_str', 'pydevd', 'debugpy._vendored.force_pydevd', 'debugpy.server', 'debugpy.adapter', 'debugpy.common.timestamp', 'debugpy.common.util', 'debugpy.common.log', 'debugpy.common.sockets', 'debugpy.server.api', 'ipykernel.debugger', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'IPython.core.completerlib', 'storemagic', 'pyforest._importable', 'pyforest.user_specific_imports', 'pyforest._imports', 'pyforest.utils', 'pyforest', 'logging.config', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.types', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_require', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'mkl._mklinit', 'mkl._py_mkl_service', 'mkl', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._add_newdocs_scalars', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'matplotlib', 'matplotlib._api.deprecation', 'matplotlib._api', 'matplotlib._c_internal_utils', 'matplotlib.cbook', 'matplotlib.docstring', 'PIL._version', 'PIL', 'defusedxml.common', 'defusedxml', 'xml.etree', 'xml.etree.ElementPath', '_elementtree', 'xml.etree.ElementTree', 'defusedxml.ElementTree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'matplotlib._animation_data', 'matplotlib.animation', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImagePalette', 'PIL.ImageSequence', 'PIL.PngImagePlugin', 'matplotlib._path', 'matplotlib.bezier', 'matplotlib.path', 'matplotlib.transforms', 'matplotlib.ticker', 'matplotlib.scale', 'matplotlib._color_data', 'matplotlib.colors', 'pyparsing.util', 'pyparsing.unicode', 'pyparsing.exceptions', 'pyparsing.actions', 'pyparsing.results', 'pyparsing.core', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib._enums', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver', 'dateutil.rrule', 'matplotlib.units', 'matplotlib.dates']
2023-02-01 22:59:15,287 [5948] DEBUG    matplotlib:224: [JupyterRequire] CACHEDIR=C:\Users\sunny\.matplotlib
2023-02-01 22:59:15,303 [5948] DEBUG    matplotlib.font_manager:1439: [JupyterRequire] Using fontManager instance from C:\Users\sunny\.matplotlib\fontlist-v330.json
2023-02-01 22:59:15,493 [5948] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-02-01 22:59:15,509 [5948] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-02-01 22:59:15,629 [5948] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2023-02-01 22:59:15,630 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,630 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,630 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,630 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-02-01 22:59:15,630 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,630 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,630 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-02-01 22:59:15,630 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,631 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,631 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,631 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,631 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,631 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,631 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-02-01 22:59:15,631 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,631 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-02-01 22:59:15,632 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,632 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,632 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-02-01 22:59:15,632 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,632 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-02-01 22:59:15,632 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-02-01 22:59:15,632 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,632 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,632 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,633 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,633 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,633 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-02-01 22:59:15,633 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,633 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,633 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,633 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,633 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,634 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-02-01 22:59:15,634 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,634 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,634 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,634 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,634 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,634 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,634 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,635 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2023-02-01 22:59:15,635 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,635 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,635 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,635 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2023-02-01 22:59:15,635 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,635 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,635 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,635 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2023-02-01 22:59:15,636 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,636 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,636 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,636 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,636 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,636 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,636 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,636 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,637 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,637 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2023-02-01 22:59:15,637 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2023-02-01 22:59:15,637 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2023-02-01 22:59:15,637 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2023-02-01 22:59:15,637 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,637 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,637 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,638 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2023-02-01 22:59:15,638 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,638 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,638 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,638 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2023-02-01 22:59:15,638 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,638 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2023-02-01 22:59:15,638 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sitka' (SitkaVF.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,638 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,639 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2023-02-01 22:59:15,639 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,639 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,639 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,639 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,639 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2023-02-01 22:59:15,639 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,639 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,640 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,640 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,640 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,640 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2023-02-01 22:59:15,640 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,640 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,640 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,640 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,640 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2023-02-01 22:59:15,641 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,641 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,641 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,641 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,641 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,641 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,641 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,641 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,642 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,642 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,642 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,642 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,642 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,642 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,642 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,642 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2023-02-01 22:59:15,642 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,643 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,643 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,643 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,643 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,643 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2023-02-01 22:59:15,643 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,643 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2023-02-01 22:59:15,643 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2023-02-01 22:59:15,644 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,644 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,644 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2023-02-01 22:59:15,644 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,644 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,644 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2023-02-01 22:59:15,644 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,644 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2023-02-01 22:59:15,645 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,645 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,645 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,645 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2023-02-01 22:59:15,645 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2023-02-01 22:59:15,645 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2023-02-01 22:59:15,645 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2023-02-01 22:59:15,645 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,646 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,646 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,646 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,646 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,646 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,646 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,646 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,646 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,646 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2023-02-01 22:59:15,647 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,647 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2023-02-01 22:59:15,647 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,647 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,647 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,647 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,647 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,647 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2023-02-01 22:59:15,648 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,648 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,648 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2023-02-01 22:59:15,648 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2023-02-01 22:59:15,648 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Variable' (SegUIVar.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,648 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,648 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,648 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,648 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,648 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,649 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,649 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,649 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,649 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,649 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,649 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,649 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,649 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2023-02-01 22:59:15,650 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2023-02-01 22:59:15,650 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2023-02-01 22:59:15,650 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,650 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2023-02-01 22:59:15,650 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,650 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,650 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sitka' (SitkaVF-Italic.ttf) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2023-02-01 22:59:15,651 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2023-02-01 22:59:15,665 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2023-02-01 22:59:15,665 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,665 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2023-02-01 22:59:15,665 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2023-02-01 22:59:15,665 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,665 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,665 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2023-02-01 22:59:15,665 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,666 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2023-02-01 22:59:15,666 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,666 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,666 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,666 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2023-02-01 22:59:15,666 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2023-02-01 22:59:15,666 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,666 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,666 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,667 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,667 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,667 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2023-02-01 22:59:15,667 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2023-02-01 22:59:15,667 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,667 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,667 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2023-02-01 22:59:15,667 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,668 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2023-02-01 22:59:15,668 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2023-02-01 22:59:15,668 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2023-02-01 22:59:15,668 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,668 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,668 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2023-02-01 22:59:15,668 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,668 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,669 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,669 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,669 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,669 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,669 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,669 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,669 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,669 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,669 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,670 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,670 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2023-02-01 22:59:15,670 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,670 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2023-02-01 22:59:15,670 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2023-02-01 22:59:15,670 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2023-02-01 22:59:15,670 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2023-02-01 22:59:15,671 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2023-02-01 22:59:15,671 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,671 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,671 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,671 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,671 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,671 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,671 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,671 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,672 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,672 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,672 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,672 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,672 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,672 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,672 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,672 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,672 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2023-02-01 22:59:15,673 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,673 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2023-02-01 22:59:15,673 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2023-02-01 22:59:15,673 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2023-02-01 22:59:15,673 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2023-02-01 22:59:15,673 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,673 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,673 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,674 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,674 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,674 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2023-02-01 22:59:15,674 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,674 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,674 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,674 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2023-02-01 22:59:15,674 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,675 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2023-02-01 22:59:15,675 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2023-02-01 22:59:15,675 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,675 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2023-02-01 22:59:15,675 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2023-02-01 22:59:15,675 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2023-02-01 22:59:15,675 [5948] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Fluent Icons' (SegoeIcons.ttf) normal normal 400 normal>) = 10.05
2023-02-01 22:59:15,675 [5948] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2023-02-01 23:00:08,418 [5948] INFO     numexpr.utils:145: [JupyterRequire] Note: NumExpr detected 12 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
2023-02-01 23:00:08,418 [5948] INFO     numexpr.utils:157: [JupyterRequire] NumExpr defaulting to 8 threads.
2023-02-01 23:14:29,551 [5948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:14:29,551 [5948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-01 23:14:29,551 [5948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-01 23:14:29,551 [5948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-01 23:14:29,551 [5948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:14:29,703 [5948] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\2and3\builtins.pyi
2023-02-01 23:14:29,734 [5948] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\sys.pyi
2023-02-01 23:14:31,913 [5948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:14:31,913 [5948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-01 23:14:31,913 [5948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-01 23:14:31,913 [5948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-01 23:14:31,915 [5948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:14:31,922 [5948] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\sklearn\__init__.py
2023-02-01 23:14:33,115 [5948] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\sklearn\neighbors\__init__.py
2023-02-01 23:14:38,689 [5948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:14:38,692 [5948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-01 23:14:38,692 [5948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-01 23:14:38,692 [5948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 0 in part parser)
2023-02-01 23:14:38,692 [5948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:14:38,751 [5948] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\sklearn\neural_network\__init__.py
2023-02-01 23:14:39,641 [5948] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\sklearn\neural_network\_rbm.py
2023-02-01 23:17:37,132 [5948] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\anaconda3\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py:679: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.
  warnings.warn(

2023-02-01 23:17:59,483 [5948] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\anaconda3\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py:679: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.
  warnings.warn(

2023-02-01 23:18:21,345 [5948] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\anaconda3\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py:679: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (300) reached and the optimization hasn't converged yet.
  warnings.warn(

2023-02-01 23:18:29,946 [5948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:18:29,946 [5948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-01 23:18:29,946 [5948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-01 23:18:29,946 [5948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-01 23:18:29,946 [5948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:18:29,972 [5948] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py
2023-02-01 23:18:29,993 [5948] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\sklearn\base.py
2023-02-01 23:18:36,611 [5948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:18:36,611 [5948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-01 23:18:36,611 [5948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-01 23:18:36,611 [5948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-01 23:18:36,611 [5948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:18:38,402 [5948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:18:38,402 [5948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-01 23:18:38,402 [5948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-01 23:18:38,402 [5948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-01 23:18:38,402 [5948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:18:46,882 [5948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:18:46,882 [5948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-01 23:18:46,882 [5948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-01 23:18:46,882 [5948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-01 23:18:46,882 [5948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:18:48,482 [5948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:18:48,482 [5948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-01 23:18:48,482 [5948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-01 23:18:48,482 [5948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-01 23:18:48,482 [5948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:19:00,664 [5948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:19:00,664 [5948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 8
2023-02-01 23:19:00,664 [5948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:8]
2023-02-01 23:19:00,671 [5948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 8 (to 7 in part parser)
2023-02-01 23:19:00,671 [5948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:21:27,513 [5948] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\anaconda3\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py:679: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (300) reached and the optimization hasn't converged yet.
  warnings.warn(

2023-02-01 23:41:15,948 [5948] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\anaconda3\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py:679: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (300) reached and the optimization hasn't converged yet.
  warnings.warn(

2023-02-01 23:41:26,497 [5948] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\anaconda3\lib\site-packages\sklearn\neural_network\_multilayer_perceptron.py:536: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-02-01 23:46:58,471 [5948] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:46:58,472 [5948] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 8; new: 1
2023-02-01 23:46:58,472 [5948] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:8] new[1:1]
2023-02-01 23:46:58,473 [5948] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-01 23:46:58,473 [5948] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:47:40,904 [5948] DEBUG    tensorflow:32: [JupyterRequire] Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2023-02-01 23:48:00,723 [14244] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-01 23:48:00,724 [14244] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-01 23:48:00,724 [14244] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-01 23:48:00,729 [14244] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-01 23:48:00,730 [14244] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-01 23:48:00,731 [14244] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-01 23:48:01,542 [14244] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-01 23:48:01,543 [14244] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-01 23:48:01,544 [14244] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-01 23:48:01,548 [14244] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-01 23:48:01,549 [14244] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-01 23:48:01,549 [14244] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-01 23:48:20,668 [14244] DEBUG    tensorflow:32: [JupyterRequire] Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2023-02-01 23:48:24,023 [14244] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 7 to 5
2023-02-01 23:48:24,023 [14244] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 5 to 7
2023-02-01 23:48:24,023 [14244] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 7 to 5
2023-02-01 23:48:24,023 [14244] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 5 to 7
2023-02-01 23:48:35,687 [14244] INFO     numexpr.utils:145: [JupyterRequire] Note: NumExpr detected 12 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
2023-02-01 23:48:35,687 [14244] INFO     numexpr.utils:157: [JupyterRequire] NumExpr defaulting to 8 threads.
2023-02-01 23:49:20,374 [14244] DEBUG    matplotlib:224: [JupyterRequire] matplotlib data path: C:\Users\sunny\anaconda3\lib\site-packages\matplotlib\mpl-data
2023-02-01 23:49:20,384 [14244] DEBUG    matplotlib:224: [JupyterRequire] CONFIGDIR=C:\Users\sunny\.matplotlib
2023-02-01 23:49:20,385 [14244] DEBUG    matplotlib:1394: [JupyterRequire] matplotlib version 3.4.3
2023-02-01 23:49:20,386 [14244] DEBUG    matplotlib:1395: [JupyterRequire] interactive is False
2023-02-01 23:49:20,386 [14244] DEBUG    matplotlib:1396: [JupyterRequire] platform is win32
2023-02-01 23:49:20,386 [14244] DEBUG    matplotlib:1397: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', '_io', 'marshal', 'nt', 'winreg', '_frozen_importlib_external', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', 'encodings.cp1252', '_signal', 'encodings.latin_1', '_abc', 'abc', 'io', '__main__', '_stat', 'stat', '_collections_abc', 'genericpath', 'ntpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', '_distutils_hack', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', '_heapq', 'heapq', 'itertools', 'keyword', '_operator', 'operator', 'reprlib', '_collections', 'collections', 'collections.abc', '_functools', 'functools', 'contextlib', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', 'typing.io', 'typing.re', 'typing', 'importlib.abc', 'importlib.util', 'google', 'google.cloud', 'google.logging', 'mpl_toolkits', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'msvcrt', '_winapi', 'subprocess', 'jupyter_client._version', 'posixpath', 'fnmatch', 'glob', '_socket', 'math', 'select', 'selectors', 'socket', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_bisect', 'bisect', '_random', '_sha512', 'random', 'tempfile', 'getpass', 'platform', 'zmq.libzmq', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_24', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'copy', '_struct', 'struct', '_compat_pickle', '_pickle', 'pickle', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'atexit', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', '_ast', 'ast', '_opcode', 'opcode', 'dis', 'token', 'tokenize', 'linecache', 'inspect', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.traitlets', 'traitlets.utils.decorators', 'traitlets._version', 'traitlets', 'traceback', '_string', 'string', 'logging', 'pprint', 'gettext', 'argparse', 'traitlets.config.loader', 'textwrap', 'traitlets.utils.text', 'traitlets.config.configurable', 'traitlets.config.application', 'traitlets.config', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'urllib', 'urllib.parse', 'pathlib', 'jupyter_core.paths', 'jupyter_client.utils', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_ssl', 'binascii', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.threads', '_overlapped', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.selector_events', 'asyncio.windows_utils', 'asyncio.windows_events', 'asyncio', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', '_queue', 'queue', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', '_uuid', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', '_datetime', 'datetime', 'numbers', 'logging.handlers', 'html.entities', 'html', 'array', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', '_ctypes', 'ctypes._endian', 'ctypes', 'ctypes.wintypes', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', '__future__', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'sysconfig', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'locale', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_win32', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'IPython.lib.security', 'IPython.lib', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.deduplicate', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout.scrollable_pane', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'prompt_toolkit.patch_stdout', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'parso._compatibility', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.file_io', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.common', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.lib.clipboard', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'nturl2path', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'dataclasses', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'ipython_genutils._version', 'ipython_genutils', 'ipython_genutils.encoding', 'ipython_genutils.py3compat', 'ipython_genutils.path', 'imp', 'hmac', 'dateutil._version', 'dateutil', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.control', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'setuptools._distutils', 'distutils.debug', 'distutils.errors', 'distutils.fancy_getopt', 'distutils.dep_util', 'distutils._log', 'distutils.spawn', 'distutils.util', 'distutils.dist', 'distutils.dir_util', 'distutils.file_util', 'zipfile', 'distutils.archive_util', 'distutils.cmd', 'configparser', 'distutils.config', 'distutils.extension', 'distutils.core', '_distutils_hack.override', 'setuptools._deprecation_warning', 'xml.parsers', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'plistlib', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'importlib._common', 'importlib.resources', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources._vendor.more_itertools.more', 'pkg_resources._vendor.more_itertools', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.functools', 'pkg_resources.extern.jaraco.context', 'pkg_resources.extern.jaraco.text', 'pkg_resources._vendor.platformdirs.api', 'pkg_resources._vendor.platformdirs.version', 'pkg_resources._vendor.platformdirs.windows', 'pkg_resources._vendor.platformdirs', 'pkg_resources.extern.platformdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources._vendor.packaging', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.version', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.tags', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources._vendor.pyparsing.util', 'pkg_resources._vendor.pyparsing.unicode', 'pkg_resources._vendor.pyparsing.exceptions', 'pkg_resources._vendor.pyparsing.actions', 'pkg_resources._vendor.pyparsing.results', 'pkg_resources._vendor.pyparsing.core', 'pkg_resources._vendor.pyparsing.helpers', 'pkg_resources._vendor.pyparsing.testing', 'pkg_resources._vendor.pyparsing.common', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'pkg_resources.extern.packaging.requirements', 'encodings.cp437', 'pkg_resources', 'setuptools.version', 'distutils.filelist', 'setuptools.monkey', 'setuptools.extension', 'distutils.log', 'distutils.command', 'setuptools.extern', 'setuptools._vendor', 'setuptools._vendor.packaging.__about__', 'setuptools._vendor.packaging', 'setuptools.extern.packaging', 'setuptools._vendor.ordered_set', 'setuptools.extern.ordered_set', 'setuptools._vendor.more_itertools.recipes', 'setuptools._vendor.more_itertools.more', 'setuptools._vendor.more_itertools', 'setuptools.extern.more_itertools', '_csv', 'csv', 'setuptools._vendor.zipp', 'setuptools._vendor.importlib_metadata._functools', 'setuptools._vendor.importlib_metadata._text', 'setuptools._vendor.importlib_metadata._adapters', 'setuptools._vendor.importlib_metadata._compat', 'setuptools._vendor.importlib_metadata._meta', 'setuptools._vendor.importlib_metadata._collections', 'setuptools._vendor.importlib_metadata._itertools', 'setuptools._vendor.importlib_metadata', 'setuptools.extern.importlib_metadata', 'zipp', 'importlib_metadata._functools', 'importlib_metadata._text', 'importlib_metadata._adapters', 'importlib_metadata._compat', 'importlib_metadata._meta', 'importlib_metadata._collections', 'importlib_metadata._itertools', 'importlib_metadata', 'setuptools._importlib', 'distutils.command.bdist', 'setuptools.command', 'setuptools.windows_support', 'setuptools._vendor.pyparsing.util', 'setuptools._vendor.pyparsing.unicode', 'setuptools._vendor.pyparsing.exceptions', 'setuptools._vendor.pyparsing.actions', 'setuptools._vendor.pyparsing.results', 'setuptools._vendor.pyparsing.core', 'setuptools._vendor.pyparsing.helpers', 'setuptools._vendor.pyparsing.testing', 'setuptools._vendor.pyparsing.common', 'setuptools._vendor.pyparsing', 'setuptools.extern.pyparsing', 'setuptools._vendor.packaging._manylinux', 'setuptools._vendor.packaging._musllinux', 'setuptools.extern.packaging.tags', 'setuptools.extern.packaging._structures', 'setuptools.extern.packaging.version', 'setuptools.extern.packaging.utils', 'setuptools.extern.packaging.specifiers', 'setuptools.extern.packaging.markers', 'setuptools.extern.packaging.requirements', 'setuptools._path', 'setuptools.config.expand', 'setuptools.config.setupcfg', 'setuptools.config', 'setuptools.errors', 'email._header_value_parser', 'email.headerregistry', 'setuptools.config._apply_pyprojecttoml', 'setuptools.config.pyprojecttoml', 'setuptools.discovery', 'setuptools._vendor.jaraco', 'setuptools.extern.jaraco', 'setuptools.extern.jaraco.functools', 'setuptools.extern.jaraco.context', 'setuptools.extern.jaraco.text', 'setuptools._reqs', 'setuptools._itertools', 'setuptools._entry_points', 'setuptools.dist', 'setuptools.py34compat', 'setuptools._imp', 'setuptools.depends', 'setuptools.logging', 'setuptools.msvc', 'unittest.util', 'unittest.result', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.signals', 'unittest.runner', 'unittest.main', 'unittest', 'unittest.mock', 'distutils.ccompiler', 'distutils._msvccompiler', 'setuptools', 'distutils', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.compiler', 'debugpy._version', 'debugpy.common', 'debugpy.common.json', 'debugpy.common.fmt', 'debugpy.common.compat', 'debugpy', 'debugpy._vendored._util', 'debugpy._vendored', '_pydevd_bundle', 'encodings.ascii', 'stringprep', 'encodings.idna', '_pydevd_bundle.pydevd_vm_type', '_pydev_imps', 'xmlrpc', 'gzip', 'xmlrpc.client', 'socketserver', 'http.server', 'xmlrpc.server', '_pydev_imps._pydev_saved_modules', '_pydevd_bundle.pydevd_constants', '_pydev_bundle', '_pydev_runfiles', '_pydevd_frame_eval', 'pydev_ipython', 'pydevd_concurrency_analyser', 'pydevd_plugins', '_pydev_bundle.pydev_log', '_pydev_bundle._pydev_filesystem_encoding', '_pydevd_bundle.pydevd_comm_constants', 'pydevd_file_utils', '_pydev_imps._pydev_execfile', '_pydevd_bundle.pydevd_exec2', '_pydev_bundle.pydev_imports', '_pydev_bundle.pydev_is_thread_alive', '_pydev_bundle.pydev_override', 'pydevd_plugins.extensions', '_pydevd_bundle.pydevd_extension_utils', '_pydevd_bundle.pydevd_frame_utils', '_pydevd_bundle.pydevd_filtering', '_pydevd_bundle.pydevd_io', '_pydevd_bundle.pydevd_utils', '_pydev_bundle._pydev_tipper_common', '_pydev_bundle._pydev_imports_tipper', '_pydev_bundle._pydev_calltip_util', '_pydevd_bundle.pydevd_safe_repr', '_pydevd_bundle.pydevd_resolver', '_pydevd_bundle.pydevd_extension_api', '_pydevd_bundle.pydevd_xml', '_pydevd_bundle.pydevd_dont_trace', '_pydevd_frame_eval.vendored', '_pydevd_frame_eval.vendored.bytecode.flags', '_pydevd_frame_eval.vendored.bytecode.instr', '_pydevd_frame_eval.vendored.bytecode.bytecode', '_pydevd_frame_eval.vendored.bytecode.concrete', '_pydevd_frame_eval.vendored.bytecode.cfg', '_pydevd_frame_eval.vendored.bytecode', '_pydevd_bundle.pydevd_bytecode_utils', '_pydevd_bundle.pydevd_cython', '_pydevd_bundle.pydevd_cython_wrapper', '_pydevd_bundle.pydevd_additional_thread_info', '_pydevd_bundle.pydevd_thread_lifecycle', '_pydevd_bundle.pydevd_save_locals', '_pydevd_bundle.pydevd_defaults', '_pydev_bundle.pydev_monkey', 'pydevd_tracing', '_pydevd_bundle.pydevd_daemon_thread', '_pydevd_bundle.pydevd_timeout', '_pydevd_bundle.pydevd_vars', '_pydev_bundle.pydev_console_utils', '_pydevd_bundle.pydevd_import_class', '_pydevd_bundle.pydevd_breakpoints', '_pydevd_bundle.pydevd_custom_frames', '_pydevd_bundle.pydevd_dont_trace_files', '_pydevd_bundle.pydevd_net_command', '_pydev_bundle.pydev_umd', 'pydevconsole', '_pydev_bundle._pydev_completer', '_pydevd_bundle.pydevd_net_command_factory_xml', '_pydevd_bundle.pydevd_frame', '_pydevd_bundle.pydevd_additional_thread_info_regular', '_pydevd_bundle.pydevd_trace_dispatch', '_pydevd_frame_eval.pydevd_frame_eval_main', '_pydevd_bundle.pydevd_source_mapping', 'pydevd_concurrency_analyser.pydevd_thread_wrappers', 'pydevd_concurrency_analyser.pydevd_concurrency_logger', '_pydevd_bundle._debug_adapter', '_pydevd_bundle._debug_adapter.pydevd_schema_log', '_pydevd_bundle._debug_adapter.pydevd_base_schema', '_pydevd_bundle._debug_adapter.pydevd_schema', '_pydevd_bundle.pydevd_reload', '_pydev_bundle.fsnotify', '_pydevd_bundle.pydevd_console', '_pydevd_bundle.pydevd_comm', '_pydevd_bundle.pydevd_net_command_factory_json', '_pydevd_bundle.pydevd_collect_bytecode_info', '_pydevd_bundle.pydevd_api', '_pydevd_bundle.pydevd_json_debug_options', '_pydevd_bundle.pydevd_process_net_command_json', '_pydevd_bundle.pydevd_traceproperty', '_pydevd_bundle.pydevd_process_net_command', '_pydevd_bundle.pydevd_suspended_frames', '_pydevd_bundle.pydevd_trace_api', 'pydevd_plugins.django_debug', 'pydevd_plugins.jinja2_debug', '_pydevd_bundle.pydevd_plugin_utils', 'pydevd_plugins.extensions.types', 'pydevd_plugins.extensions.types.pydevd_helpers', 'pydevd_plugins.extensions.types.pydevd_plugin_numpy_types', 'pydevd_plugins.extensions.types.pydevd_plugins_django_form_str', 'pydevd', 'debugpy._vendored.force_pydevd', 'debugpy.server', 'debugpy.adapter', 'debugpy.common.timestamp', 'debugpy.common.util', 'debugpy.common.log', 'debugpy.common.sockets', 'debugpy.server.api', 'ipykernel.debugger', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'IPython.core.completerlib', 'storemagic', 'pyforest._importable', 'pyforest.user_specific_imports', 'pyforest._imports', 'pyforest.utils', 'pyforest', 'logging.config', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.types', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'jupyter_require', 'tensorflow.python.platform', 'tensorflow.python.platform.build_info', 'tensorflow.python.platform.self_check', 'tensorflow.python.pywrap_dlopen_global_flags', 'tensorflow.python._pywrap_tensorflow_internal', 'tensorflow.python.pywrap_tensorflow', 'tensorflow.python.eager', 'absl', 'absl.flags._helpers', 'absl.flags._argument_parser', 'absl.flags._exceptions', 'absl.flags._flag', 'absl.flags._validators_classes', 'absl.flags._flagvalues', 'absl.flags._validators', 'absl.flags._defines', 'absl.flags', 'absl.logging.converter', 'absl.logging', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'mkl._mklinit', 'mkl._py_mkl_service', 'mkl', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._add_newdocs_scalars', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'tensorflow.core', 'tensorflow.core.framework', 'google.protobuf', 'google.protobuf.internal', 'google.protobuf.internal._api_implementation', 'google.protobuf.internal.api_implementation', 'google.protobuf.pyext', 'google.protobuf.internal.enum_type_wrapper', 'google.protobuf.message', 'google.protobuf.pyext._message', 'google.protobuf.descriptor', 'google.protobuf.descriptor_database', 'google.protobuf.text_encoding', 'google.protobuf.descriptor_pool', 'google.protobuf.pyext.cpp_message', 'google.protobuf.message_factory', 'google.protobuf.symbol_database', 'google.protobuf.reflection', 'google.protobuf.internal.well_known_types', 'tensorflow.core.framework.tensor_shape_pb2', 'tensorflow.core.framework.types_pb2', 'tensorflow.core.framework.resource_handle_pb2', 'tensorflow.core.framework.tensor_pb2', 'tensorflow.core.framework.attr_value_pb2', 'tensorflow.core.framework.full_type_pb2', 'tensorflow.core.framework.node_def_pb2', 'tensorflow.core.framework.op_def_pb2', 'tensorflow.core.framework.function_pb2', 'tensorflow.core.protobuf', 'tensorflow.core.framework.cost_graph_pb2', 'tensorflow.core.framework.versions_pb2', 'tensorflow.core.framework.graph_pb2', 'tensorflow.core.framework.allocation_description_pb2', 'tensorflow.core.framework.tensor_description_pb2', 'tensorflow.core.framework.step_stats_pb2', 'tensorflow.core.protobuf.cluster_pb2', 'tensorflow.core.protobuf.coordination_config_pb2', 'tensorflow.core.protobuf.debug_pb2', 'tensorflow.core.protobuf.verifier_config_pb2', 'tensorflow.core.protobuf.rewriter_config_pb2', 'tensorflow.core.protobuf.config_pb2', 'tensorflow.python._pywrap_tfe', 'tensorflow.python.pywrap_tfe', 'tensorflow.python.platform._pywrap_tf2', 'tensorflow.python.util', 'tensorflow.python.util.tf_decorator', 'tensorflow.python.util.tf_inspect', 'tensorflow.python.util.tf_export', 'tensorflow.python.tf2', 'tensorflow.python.client', 'tensorflow.python.client._pywrap_tf_session', 'tensorflow.python.util._tf_stack', 'tensorflow.python.util.tf_stack', 'tensorflow.python.client.pywrap_tf_session', 'tensorflow.python.eager.executor', 'tensorflow.tsl', 'tensorflow.tsl.protobuf', 'tensorflow.tsl.protobuf.histogram_pb2', 'tensorflow.core.framework.summary_pb2', 'tensorflow.python.framework', 'tensorflow.core.framework.api_def_pb2', 'tensorflow.python.util.compat', 'tensorflow.python.util.tf_contextlib', 'tensorflow.python.framework.c_api_util', 'tensorflow.python.eager.monitoring', 'tensorflow.python.framework.device_spec', 'tensorflow.python.framework.device', 'tensorflow.python.framework.tfrt_utils', 'tensorflow.python.util.is_in_graph_mode', 'tensorflow.python.platform.tf_logging', 'tensorflow.python.util.decorator_utils', 'tensorflow.tools', 'tensorflow.tools.docs', 'tensorflow.tools.docs.doc_controls', 'tensorflow.python.util.deprecation', 'tensorflow.python.eager.context', 'tensorflow.python.data.experimental.ops', 'tensorflow.core.protobuf.data_service_pb2', 'tensorflow.python.data.util', 'wrapt._wrappers', 'wrapt.wrappers', 'wrapt.decorators', 'wrapt.importer', 'wrapt', 'tensorflow.python.util._pywrap_utils', 'tensorflow.python.util._pywrap_nest', 'tensorflow.python.util.nest', 'tensorflow.python.framework.composite_tensor', 'encodings.raw_unicode_escape', 'encodings.unicode_escape', 'google.protobuf.internal.containers', 'google.protobuf.internal.wire_format', 'google.protobuf.internal.encoder', 'google.protobuf.internal.decoder', 'google.protobuf.internal.type_checkers', 'google.protobuf.text_format', 'tensorflow.core.lib', 'tensorflow.core.lib.core', 'tensorflow.tsl.protobuf.error_codes_pb2', 'tensorflow.core.lib.core.error_codes_pb2', 'tensorflow.python._pywrap_py_exception_registry', 'tensorflow.python.framework.errors_impl', 'tensorflow.python.framework.errors', 'tensorflow.python.eager.core', 'tensorflow.python.framework._dtypes', 'tensorflow.python.types', 'tensorflow.python.types.doc_typealias', 'tensorflow.python.lib', 'tensorflow.python.lib.core', 'tensorflow.python.lib.core._pywrap_bfloat16', 'typing_extensions', 'tensorflow.python.types.trace', 'tensorflow.core.function', 'google.protobuf.any_pb2', 'tensorflow.core.function.trace_type.serialization_pb2', 'tensorflow.core.function.trace_type.serialization', 'tensorflow.core.function.trace_type.default_types_pb2', 'tensorflow.core.function.trace_type.default_types', 'tensorflow.core.function.trace_type.util', 'tensorflow.core.function.trace_type.trace_type_builder', 'tensorflow.core.function.trace_type', 'tensorflow.python.framework.dtypes', 'absl.command_name', 'absl.app', 'tensorflow.python.util.lazy_loader', 'tensorflow.python.eager.tape', 'tensorflow.python.framework.cpp_shape_inference_pb2', 'tensorflow.python.framework.composite_tensor_gradient', 'tensorflow.python.framework.tensor_conversion_registry', 'tensorflow.python.framework.tensor_shape', 'tensorflow.core.protobuf.struct_pb2', 'tensorflow.python.framework.type_spec', 'tensorflow.python.types.internal', 'tensorflow.python.framework.indexed_slices', 'tensorflow.python.framework.registry', 'tensorflow.python.framework.traceable_stack', 'tensorflow.python.framework.versions', 'tensorflow.python.ops', 'tensorflow.python.ops.control_flow_util', 'tensorflow.python.profiler', 'tensorflow.python.profiler.internal', 'tensorflow.python.profiler.internal._pywrap_traceme', 'tensorflow.python.profiler.trace', 'tensorflow.python.types.core', 'tensorflow.python.framework._pywrap_python_api_dispatcher', 'tensorflow.python.util.traceback_utils', 'tensorflow.python.util.type_annotations', 'tensorflow.python.util.dispatch', 'tensorflow.python.util.function_utils', 'tensorflow.python.util.lock_util', 'tensorflow.python.util.memory', 'tensorflow.python.util.object_identity', 'tensorflow.python.framework.ops', 'tensorflow.python.eager.execute', 'tensorflow.python.framework.op_callbacks', 'tensorflow.python.framework.tensor_util', 'tensorflow.python.framework.constant_op', 'tensorflow.python.framework.common_shapes', 'tensorflow.python.framework.tensor_spec', 'tensorflow.python.framework._op_def_registry', 'tensorflow.python.framework.op_def_registry', 'tensorflow.core.config', 'tensorflow.python.flags_pybind', 'tensorflow.core.config.flags', 'tensorflow.python.framework._op_def_library_pybind', 'tensorflow.python.framework.op_def_library_pybind', 'tensorflow.python.framework.op_def_library', 'tensorflow.python.ops.gen_sparse_ops', 'tensorflow.python.framework.sparse_tensor', 'tensorflow.python.data.util.nest', 'tensorflow.core.framework.variable_pb2', 'tensorflow.python.compat', 'tensorflow.python.compat.compat', 'tensorflow.python.framework.auto_control_deps_utils', 'packaging.__about__', 'packaging', 'packaging._structures', 'packaging.version', 'google.protobuf.wrappers_pb2', 'tensorflow.core.protobuf.trackable_object_graph_pb2', 'tensorflow.core.protobuf.saved_object_graph_pb2', 'tensorflow.core.protobuf.saver_pb2', 'tensorflow.core.protobuf.meta_graph_pb2', 'tensorflow.core.protobuf.graph_debug_info_pb2', 'tensorflow.python.framework.error_interpolation', 'tensorflow.python.lib.io', 'tensorflow.python.lib.io._pywrap_file_io', 'tensorflow.python.lib.io.file_io', 'tensorflow.python.framework.graph_io', 'tensorflow.python.framework.graph_to_function_def', 'tensorflow.python.ops.gen_array_ops', 'tensorflow.python.ops.gen_math_ops', 'tensorflow.python.ops.array_ops', 'tensorflow.python.ops.gen_data_flow_ops', 'tensorflow.python.ops.session_ops', 'tensorflow.python.training', 'tensorflow.python.training.experimental', 'tensorflow.python.training.experimental.mixed_precision_global_state', 'tensorflow.python.client.session', 'tensorflow.python.ops.gen_linalg_ops', 'tensorflow.python.framework._proto_comparators', 'tensorflow.python.framework.graph_util_impl', 'tensorflow.python.framework.graph_util', 'tensorflow.python.ops.gen_bitwise_ops', 'tensorflow.python.ops.gen_nn_ops', 'tensorflow.python.ops.math_ops', 'tensorflow.python.ops.linalg_ops_impl', 'tensorflow.python.util._pywrap_determinism', 'tensorflow.python.util._pywrap_tensor_float_32_execution', 'tensorflow.python.framework.config', 'tensorflow.python.framework.random_seed', 'tensorflow.core.protobuf.control_flow_pb2', 'tensorflow.python.ops.gen_control_flow_ops', 'tensorflow.python.ops.gen_functional_ops', 'tensorflow.python.ops.gen_logging_ops', 'tensorflow.python.ops.gen_list_ops', 'tensorflow.python.ops.handle_data_util', 'tensorflow.python.ops.list_ops', 'tensorflow.python.util.tf_should_use', 'tensorflow.python.ops.tensor_array_ops', 'tensorflow.python.util.variable_utils', 'tensorflow.python.ops.control_flow_ops', 'tensorflow.python.ops.gen_random_ops', 'tensorflow.python.ops.bitwise_ops', 'tensorflow.python.ops.gen_random_index_shuffle_ops', 'tensorflow.python.ops.gen_stateless_random_ops', 'tensorflow.python.ops.gen_stateless_random_ops_v2', 'tensorflow.python.ops.stateless_random_ops', 'tensorflow.python.ops.random_ops', 'tensorflow.python.ops.init_ops', 'tensorflow.python.ops.gen_state_ops', 'tensorflow.python.ops.gen_resource_variable_ops', 'tensorflow.python.ops.state_ops', 'tensorflow.python.trackable', 'tensorflow.python.trackable.constants', 'tensorflow.python.training.saving', 'tensorflow.python.training.saving.saveable_object', 'tensorflow.python.trackable.base', 'tensorflow.python.ops.variables', 'tensorflow.python.ops.variable_scope', 'tensorflow.python.framework.function', 'tensorflow.python.framework.importer', 'tensorflow.python.framework.meta_graph', 'tensorflow.python.ops.resource_variable_ops', 'tensorflow.python.ops.ragged', 'tensorflow.python.ops.check_ops', 'tensorflow.python.ops.gen_ragged_conversion_ops', 'tensorflow.python.ops.ragged.ragged_config', 'tensorflow.python.ops.gen_ragged_math_ops', 'tensorflow.python.ops.ragged.ragged_util', 'tensorflow.python.ops.ragged.segment_id_ops', 'tensorflow.python.ops.ragged.row_partition', 'tensorflow.python.ops.ragged.ragged_tensor_value', 'tensorflow.python.ops.ragged.ragged_tensor', 'tensorflow.python.data.util.structure', 'tensorflow.python.ops.gen_experimental_dataset_ops', 'tensorflow.python.data.experimental.ops.compression_ops', 'tensorflow.python.data.experimental.service._pywrap_server_lib', 'tensorflow.python.data.experimental.service._pywrap_utils', 'tensorflow.python.data.ops', 'multiprocessing.process', 'multiprocessing.reduction', 'multiprocessing.context', '__mp_main__', 'multiprocessing', 'tensorflow.core.framework.dataset_metadata_pb2', 'tensorflow.core.framework.model_pb2', 'tensorflow.core.framework.dataset_options_pb2', 'tensorflow.python.ops.gen_dataset_ops', 'tensorflow.python.data.ops.optional_ops', 'tensorflow.python.data.util.options', 'tensorflow.python.data.ops.options', 'tensorflow.python.eager.polymorphic_function', 'tensorflow.python.saved_model', 'tensorflow.python.saved_model.registration.registration', 'tensorflow.python.saved_model.registration', 'tensorflow.python.trackable.asset', 'tensorflow.python.distribute', 'tensorflow.python.distribute.parallel_device', 'tensorflow.python._pywrap_parallel_device', 'tensorflow.python.distribute.device_util', 'tensorflow.python.tpu', 'tensorflow.python.tpu.ops', 'tensorflow.python.ops.gen_tpu_ops', 'tensorflow.python.tpu.tpu_function', 'tensorflow.python.tpu.ops.tpu_ops', 'tensorflow.python.distribute.parallel_device.parallel_device', 'tensorflow.python.eager.graph_only_ops', 'tensorflow.python.eager.polymorphic_function.composite_tensor_utils', 'tensorflow.python.framework.auto_control_deps', 'tensorflow.python.saved_model.save_context', 'tensorflow.python.framework.func_graph', 'tensorflow.python.ops.op_selector', 'tensorflow.python.eager.lift_to_graph', 'tensorflow.core.function.polymorphism', 'tensorflow.core.function.polymorphism.function_type', 'tensorflow.python.eager.polymorphic_function.function_spec', 'tensorflow.python.eager.backprop_util', 'tensorflow.python.ops.unconnected_gradients', 'tensorflow.python.eager.imperative_grad', 'tensorflow.python.ops.default_gradient', 'tensorflow.python.eager.backprop', 'tensorflow.python.eager.forwardprop_util', 'tensorflow.python.ops.functional_ops', 'tensorflow.python.ops.control_flow_v2_func_graphs', 'tensorflow.python.ops.control_flow_state', 'tensorflow.python.ops.gradients_util', 'tensorflow.python.eager.polymorphic_function.monomorphic_function', 'tensorflow.core.function.polymorphism.type_dispatch', 'tensorflow.core.function.polymorphism.function_cache', 'tensorflow.python.eager.polymorphic_function.function_context', 'tensorflow.python.eager.polymorphic_function.tracing_compiler', 'tensorflow.python.eager.polymorphic_function.polymorphic_function', 'tensorflow.python.eager.def_function', 'tensorflow.python.trackable.resource', 'tensorflow.python.eager.polymorphic_function.saved_model_utils', 'tensorflow.python.eager.polymorphic_function.quarantine', 'tensorflow.python.eager.function', 'tensorflow.python.saved_model.revived_types', 'tensorflow.python.trackable.layer_utils', 'tensorflow.python.trackable.data_structures', 'tensorflow.python.trackable.converter', 'tensorflow.python.checkpoint.trackable_view', 'tensorflow.python.util._pywrap_checkpoint_reader', 'tensorflow.python.training.py_checkpoint_reader', 'tensorflow.python.checkpoint.checkpoint_view', 'tensorflow.python.checkpoint', 'tensorflow.python.training.training_util', 'tensorflow.python.training.checkpoint_state_pb2', 'tensorflow.python.checkpoint.checkpoint_management', 'tensorflow.python.ops.gen_io_ops', 'tensorflow.python.lib.io._pywrap_record_io', 'tensorflow.python.lib.io.tf_record', 'tensorflow.python.lib.io.python_io', 'tensorflow.python.ops.gen_parsing_ops', 'tensorflow.python.ops.io_ops', 'tensorflow.python.ops.gen_string_ops', 'tensorflow.python.ops.string_ops', 'tensorflow.python.platform.gfile', 'tensorflow.python.saved_model.pywrap_saved_model.constants', 'tensorflow.python.saved_model.pywrap_saved_model.metrics', 'tensorflow.python.saved_model.pywrap_saved_model.fingerprinting', 'tensorflow.python.saved_model.pywrap_saved_model', 'tensorflow.python.checkpoint.saveable_compat', 'tensorflow.python.trackable.python_state', 'tensorflow.python.trackable.trackable_utils', 'tensorflow.python.training.saving.saveable_object_util', 'tensorflow.python.training.saver', 'tensorflow.python.data.ops.iterator_ops', 'tensorflow.python.lib.core._pywrap_py_func', 'tensorflow.python.ops.gen_script_ops', 'tensorflow.python.ops.script_ops', 'tensorflow.python.data.ops.structured_function', 'tensorflow.python.data.util.random_seed', 'tensorflow.python.data.util.traverse', 'tensorflow.python.framework.smart_cond', 'tensorflow.python.ops.logging_ops', 'tensorflow.python.data.ops.dataset_ops', 'tensorflow.python.data.experimental.ops.data_service_ops', 'tensorflow.core.protobuf.service_config_pb2', 'tensorflow.python.data.experimental.service.server_lib', 'tensorflow.python.data.experimental.service', 'tensorflow.python.data.util.convert', 'tensorflow.python.data.experimental.ops.batching', 'tensorflow.python.data.experimental.ops.cardinality', 'tensorflow.python.data.ops.counter_op', 'tensorflow.python.data.experimental.ops.counter', 'tensorflow.python.data.experimental.ops.distribute', 'tensorflow.python.data.experimental.ops.enumerate_ops', 'tensorflow.python.data.ops.ignore_errors_op', 'tensorflow.python.data.experimental.ops.error_ops', 'tensorflow.python.data.experimental.ops.from_list', 'tensorflow.python.data.experimental.ops.get_single_element', 'tensorflow.python.data.experimental.ops.grouping', 'tensorflow.python.data.ops.from_tensor_slices_op', 'tensorflow.python.data.ops.readers', 'tensorflow.python.data.experimental.ops.interleave_ops', 'tensorflow.python.data.experimental.ops.io', 'tensorflow.core.util', 'tensorflow.core.util.event_pb2', 'tensorflow.python.client.timeline', 'tensorflow.python.training.session_run_hook', 'tensorflow.python.summary', 'tensorflow.python.summary.summary_iterator', 'tensorflow.python.summary.writer', 'tensorflow.python.summary.plugin_asset', 'tensorflow.python.client._pywrap_events_writer', 'tensorflow.python.summary.writer.event_file_writer', 'tensorflow.python.profiler.internal._pywrap_profiler', 'tensorflow.python.eager.profiler', 'tensorflow.python.ops.gen_summary_ops', 'tensorflow.python.ops.summary_op_util', 'tensorflow.python.ops.summary_ops_v2', 'tensorflow.python.summary.writer.event_file_writer_v2', 'tensorflow.python.summary.writer.writer', 'tensorflow.python.summary.writer.writer_cache', 'tensorflow.python.training.summary_io', 'tensorflow.python.training.basic_session_run_hooks', 'tensorflow.python.data.experimental.ops.iterator_ops', 'tensorflow.python.ops.gen_lookup_ops', 'tensorflow.python.ops.lookup_ops', 'tensorflow.python.data.experimental.ops.lookup_ops', 'opt_einsum.parser', 'opt_einsum.helpers', 'opt_einsum.blas', 'opt_einsum.paths', 'opt_einsum.path_random', 'opt_einsum.sharing', 'opt_einsum.backends.cupy', 'opt_einsum.backends.object_arrays', 'opt_einsum.backends.jax', 'opt_einsum.backends.tensorflow', 'opt_einsum.backends.theano', 'opt_einsum.backends.torch', 'opt_einsum.backends.dispatch', 'opt_einsum.backends', 'opt_einsum.contract', 'opt_einsum._version', 'opt_einsum', 'tensorflow.compiler', 'tensorflow.compiler.tf2xla', 'tensorflow.compiler.tf2xla.ops', 'tensorflow.compiler.tf2xla.ops.gen_xla_ops', 'tensorflow.python.ops.gen_special_math_ops', 'tensorflow.python.ops.special_math_ops', 'tensorflow.python.ops.sparse_ops', 'tensorflow.python.autograph.utils.context_managers', 'tensorflow.python.autograph.utils.misc', 'tensorflow.python.autograph.utils.py_func', 'tensorflow.python.autograph.utils.tensor_list', 'tensorflow.python.autograph.utils', 'tensorflow.python.autograph.utils.tensors', 'tensorflow.python.platform.device_context', 'tensorflow.python.ops.nn_ops', 'tensorflow.python.ops.sort_ops', 'tensorflow.python.autograph.operators.py_builtins', 'tensorflow.python.autograph.operators.variables', 'tensorflow.python.autograph.utils.ag_logging', 'tensorflow.python.data.experimental.ops.take_while_ops', 'tensorflow.python.types.distribute', 'tensorflow.python.autograph.operators.control_flow', 'tensorflow.python.autograph.operators.conditional_expressions', 'tensorflow.python.autograph.operators.data_structures', 'tensorflow.python.autograph.operators.exceptions', 'tensorflow.python.autograph.operators.logical', 'tensorflow.python.autograph.operators.slices', 'tensorflow.python.autograph.operators', 'tensorflow.python.autograph.core', 'tensorflow.python.autograph.pyct', 'gast.astn', 'gast.ast3', 'gast.gast', 'gast', 'tensorflow.python.autograph.pyct.anno', 'astunparse.unparser', 'astunparse.printer', 'astunparse', 'tensorflow.python.autograph.pyct.errors', 'tensorflow.python.autograph.pyct.inspect_utils', 'tensorflow.python.autograph.pyct.parser', 'tensorflow.python.autograph.pyct.qual_names', 'tensorflow.python.autograph.pyct.ast_util', 'tensorflow.python.autograph.pyct.templates', 'termcolor', 'tensorflow.python.autograph.pyct.pretty_printer', 'tensorflow.python.autograph.pyct.transformer', 'tensorflow.python.autograph.core.converter', 'tensorflow.python.autograph.impl', 'tensorflow.python.autograph.converters', 'tensorflow.python.autograph.converters.asserts', 'tensorflow.python.autograph.pyct.static_analysis', 'tensorflow.python.autograph.pyct.static_analysis.annos', 'tensorflow.python.autograph.pyct.static_analysis.activity', 'tensorflow.python.autograph.converters.break_statements', 'tensorflow.python.autograph.converters.call_trees', 'tensorflow.python.autograph.converters.conditional_expressions', 'tensorflow.python.autograph.converters.continue_statements', 'tensorflow.python.autograph.lang', 'tensorflow.python.autograph.lang.directives', 'tensorflow.python.autograph.pyct.cfg', 'tensorflow.python.autograph.pyct.origin_info', 'tensorflow.python.autograph.pyct.static_analysis.liveness', 'tensorflow.python.autograph.pyct.static_analysis.reaching_definitions', 'tensorflow.python.autograph.pyct.static_analysis.reaching_fndefs', 'tensorflow.python.autograph.converters.control_flow', 'tensorflow.python.autograph.converters.directives', 'tensorflow.python.autograph.converters.functions', 'tensorflow.python.autograph.converters.lists', 'tensorflow.python.autograph.converters.logical_expressions', 'tensorflow.python.autograph.converters.return_statements', 'tensorflow.python.autograph.converters.slices', 'tensorflow.python.autograph.converters.variables', 'tensorflow.python.autograph.core.ag_ctx', 'tensorflow.python.autograph.core.function_wrappers', 'tensorflow.python.autograph.core.unsupported_features_checker', 'tensorflow.python.autograph.core.config_lib', 'tensorflow.python.autograph.core.config', 'tensorflow.python.autograph.pyct.cache', 'tensorflow.python.autograph.impl.conversion', 'tensorflow.python.autograph.lang.special_functions', 'tensorflow.python.autograph.pyct.error_utils', 'tensorflow.python.autograph.pyct.loader', 'tensorflow.python.autograph.pyct.naming', 'tensorflow.python.autograph.pyct.transpiler', 'tensorflow.python.autograph.impl.api', 'tensorflow.python.util.all_util', 'tensorflow.python.autograph', 'tensorflow.python.ops.map_fn', 'tensorflow.python.ops.ragged.ragged_functional_ops', 'tensorflow.python.ops.ragged.ragged_math_ops', 'tensorflow.python.ops.parsing_config', 'tensorflow.python.ops.parsing_ops', 'tensorflow.python.data.experimental.ops.parsing_ops', 'tensorflow.python.data.experimental.ops.prefetching_ops', 'tensorflow.python.data.experimental.ops.random_ops', 'tensorflow.python.data.experimental.ops.readers', 'tensorflow.python.data.experimental.ops.resampling', 'tensorflow.python.data.experimental.ops.scan_ops', 'tensorflow.python.data.experimental.ops.shuffle_ops', 'tensorflow.python.data.experimental.ops.snapshot', 'tensorflow.python.data.experimental.ops.unique', 'tensorflow.python.data.experimental.ops.writers', 'tensorflow.python.data.experimental', 'tensorflow.python.data', 'tensorflow.python.feature_column', 'tensorflow.python.feature_column.utils', 'tensorflow.python.layers', 'tensorflow.python.keras.distribute', 'tensorflow.python.distribute.distribution_strategy_context', 'tensorflow.python.keras.backend_config', 'tensorflow.python.checkpoint.checkpoint_options', 'tensorflow.python.checkpoint.functional_saver', 'tensorflow.python.distribute.collective_util', 'tensorflow.python.distribute.numpy_dataset', 'tensorflow.python.distribute.reduce_util', 'tensorflow.python.distribute.packed_distributed_variable', 'tensorflow.python.saved_model.save_options', 'tensorflow.python.distribute.values_util', 'tensorflow.python.distribute.values', 'tensorflow.python.ops.custom_gradient', 'tensorflow.python.ops.losses', 'tensorflow.python.ops.confusion_matrix', 'tensorflow.python.ops.gen_ctc_ops', 'tensorflow.python.ops.inplace_ops', 'tensorflow.python.ops.linalg_ops', 'tensorflow.python.ops.nn_grad', 'tensorflow.python.ops.ctc_ops', 'tensorflow.python.ops.clip_ops', 'tensorflow.python.ops.data_flow_ops', 'tensorflow.python.ops.data_flow_grad', 'tensorflow.python.ops.embedding_ops', 'tensorflow.python.ops.gen_candidate_sampling_ops', 'tensorflow.python.ops.candidate_sampling_ops', 'tensorflow.python.ops.losses.util', 'tensorflow.python.ops.nn_impl', 'tensorflow.python.ops.nn', 'tensorflow.python.ops.gen_set_ops', 'tensorflow.python.ops.sets_impl', 'tensorflow.python.ops.sets', 'tensorflow.python.ops.weights_broadcast_ops', 'tensorflow.python.ops.losses.losses_impl', 'tensorflow.python.distribute.distribute_lib', 'tensorflow.python.compiler', 'tensorflow.python.compiler.xla.jit', 'tensorflow.compiler.jit', 'tensorflow.compiler.jit.ops', 'tensorflow.compiler.jit.ops.xla_ops', 'tensorflow.compiler.jit.ops.xla_ops_grad', 'tensorflow.python.distribute.summary_op_util', 'tensorflow.python.compiler.xla.xla', 'tensorflow.python.compiler.xla', 'tensorflow.python.compiler.xla.experimental', 'tensorflow.compiler.tf2xla.python', 'tensorflow.compiler.xla', 'tensorflow.compiler.xla.xla_data_pb2', 'tensorflow.python.ops.gen_manip_ops', 'tensorflow.python.ops.manip_ops', 'tensorflow.python.ops.numpy_ops.np_export', 'tensorflow.python.ops.numpy_ops.np_dtypes', 'tensorflow.python.ops.numpy_ops.np_arrays', 'tensorflow.python.ops.numpy_ops.np_utils', 'tensorflow.python.ops.numpy_ops.np_array_ops', 'tensorflow.python.ops.numpy_ops.np_random', 'tensorflow.python.ops.numpy_ops.np_math_ops', 'tensorflow.python.ops.numpy_ops.np_config', 'tensorflow.python.ops.numpy_ops', 'tensorflow.compiler.tf2xla.python.xla', 'tensorflow.python.compiler.xla.experimental.xla_sharding', 'tensorflow.core.protobuf.tpu', 'tensorflow.core.protobuf.tpu.dynamic_padding_pb2', 'tensorflow.compiler.xla.service', 'tensorflow.compiler.xla.service.hlo_pb2', 'tensorflow.core.protobuf.tpu.optimization_parameters_pb2', 'tensorflow.core.protobuf.tpu.tpu_embedding_configuration_pb2', 'tensorflow.core.protobuf.tpu.topology_pb2', 'tensorflow.python.tpu.topology', 'tensorflow.python.tpu.device_assignment', 'tensorflow.python.tpu.tpu_name_util', 'tensorflow.python.tpu.tpu_sharding', 'tensorflow.python.tpu.tpu_feed', 'tensorflow.python.tpu.tpu', 'tensorflow.python.distribute.tpu_util', 'tensorflow.python.ops.gen_tpu_partition_ops', 'tensorflow.python.distribute.tpu_replicated_variable', 'tensorflow.python.distribute.tpu_values', 'tensorflow.python.distribute.distribute_utils', 'tensorflow.python.ops.gen_image_ops', 'tensorflow.python.ops.gen_spectral_ops', 'tensorflow.python.platform.flags', 'tensorflow.python.ops.parallel_for.pfor', 'tensorflow.python.ops.parallel_for.control_flow_ops', 'tensorflow.python.ops.array_grad', 'tensorflow.python.ops.control_flow_grad', 'tensorflow.python.ops.image_grad', 'tensorflow.python.ops.linalg', 'tensorflow.python.ops.linalg.linalg_impl', 'tensorflow.python.ops.linalg_grad', 'tensorflow.python.ops.manip_grad', 'tensorflow.python.ops.math_grad', 'tensorflow.python.ops.optional_grad', 'tensorflow.python.ops.random_grad', 'tensorflow.python.ops.gradients_impl', 'tensorflow.python.ops.parallel_for.gradients', 'tensorflow.python.ops.parallel_for', 'tensorflow.python.eager.forwardprop', 'tensorflow.python.ops.gradients', 'tensorflow.python.training.slot_creator', 'tensorflow.python.training.optimizer', 'tensorflow.python.checkpoint.util', 'tensorflow.python.checkpoint.save_util_v1', 'tensorflow.python.checkpoint.graph_view', 'tensorflow.python.checkpoint.restore', 'tensorflow.python.checkpoint.save_util', 'tensorflow.python.saved_model.constants', 'tensorflow.python.framework.immutable_dict', 'tensorflow.python.framework.extension_type_field', 'tensorflow.core.protobuf.composite_tensor_variant_pb2', 'tensorflow.python.ops.gen_composite_tensor_ops', 'tensorflow.python.ops.composite_tensor_ops', 'tensorflow.python.framework.extension_type', 'tensorflow.python.saved_model.nested_structure_coder', 'tensorflow.python.saved_model.utils_impl', 'tensorflow.python.trackable.autotrackable', 'tensorflow.python.checkpoint.checkpoint', 'tensorflow.python.distribute.distribute_coordinator_context', 'tensorflow.python.ops.resources', 'google.protobuf.json_format', 'tensorflow.python.summary.summary', 'tensorflow.python.training.coordinator', 'tensorflow.core.protobuf.error_codes_pb2', 'tensorflow.core.protobuf.queue_runner_pb2', 'tensorflow.python.training.queue_runner_impl', 'tensorflow.python.training.queue_runner', 'tensorflow.python.training.session_manager', 'tensorflow.python.training.monitored_session', 'tensorflow.core.protobuf.device_filters_pb2', 'tensorflow.core.protobuf.tensorflow_server_pb2', 'tensorflow.python.training.server_lib', 'tensorflow.python.keras.distribute.distribute_coordinator_utils', 'tensorflow.python.keras.engine', 'tensorflow.python.keras.utils', 'tensorflow.python.keras.utils.object_identity', 'tensorflow.python.ops.gen_ragged_array_ops', 'tensorflow.python.ops.ragged.dynamic_ragged_shape', 'tensorflow.python.ops.ragged.ragged_array_ops', 'tensorflow.python.ops.ragged.ragged_gather_ops', 'tensorflow.python.ops.ragged.ragged_getitem', 'tensorflow.python.ops.ragged.ragged_operators', 'tensorflow.python.keras.engine.keras_tensor', 'tensorflow.python.keras.utils.control_flow_util', 'tensorflow.python.keras.utils.tf_contextlib', 'tensorflow.python.keras.utils.tf_inspect', 'tensorflow.python.ops.image_ops_impl', 'tensorflow.python.ops.image_ops', 'tensorflow.python.ops.tensor_array_grad', 'tensorflow.python.training.moving_averages', 'tensorflow.python.keras.backend', 'tensorflow.python.keras.distribute.distributed_training_utils', 'tensorflow.python.keras.utils.generic_utils', 'tensorflow.python.keras.constraints', 'tensorflow.python.keras.initializers.initializers_v1', 'tensorflow.python.keras.initializers.initializers_v2', 'tensorflow.python.keras.initializers', 'tensorflow.python.keras.regularizers', 'tensorflow.python.distribute.coordinator', 'multiprocessing.dummy.connection', 'multiprocessing.dummy', 'multiprocessing.util', '_multiprocessing', 'multiprocessing.connection', 'multiprocessing.pool', 'tensorflow.core.framework.device_attributes_pb2', 'tensorflow.python.client._pywrap_device_lib', 'tensorflow.python.client.device_lib', 'tensorflow.python.ops.gen_collective_ops', 'tensorflow.python.ops.collective_ops', 'tensorflow.python.ops.gen_nccl_ops', 'tensorflow.python.ops.nccl_ops', 'tensorflow.python.distribute.cross_device_utils', 'tensorflow.python.distribute.coordinator.coordinator_context', 'tensorflow.python.distribute.ps_values', 'tensorflow.core.framework.kernel_def_pb2', 'tensorflow.python.framework.kernels', 'tensorflow.python.distribute.cross_device_ops', 'tensorflow.python.ops.structured', 'tensorflow.python.ops.ragged.ragged_factory_ops', 'tensorflow.python.ops.structured.structured_tensor', 'tensorflow.python.framework.type_utils', 'tensorflow.python.data.ops.multi_device_iterator_ops', 'tensorflow.python.distribute.input_ops', 'tensorflow.python.distribute.input_lib', 'tensorflow.python.distribute.v1', 'tensorflow.python.distribute.v1.input_lib', 'tensorflow.python.distribute.input_util', 'tensorflow.python.distribute.shared_variable_creator', 'tensorflow.python.distribute.mirrored_run', 'tensorflow.python.distribute.multi_worker_util', 'tensorflow.python.distribute.cluster_resolver.cluster_resolver', 'tensorflow.python.distribute.cluster_resolver.gce_cluster_resolver', 'tensorflow.python.distribute.cluster_resolver.kubernetes_cluster_resolver', 'tensorflow.python.distribute.cluster_resolver.slurm_cluster_resolver', 'tensorflow.python.distribute.cluster_resolver.tfconfig_cluster_resolver', 'tensorflow.python.distribute.cluster_resolver.tpu', 'tensorflow.python.tpu.tpu_system_metadata', 'tensorflow.python.tpu.client', 'tensorflow.python.tpu.client.client', 'tensorflow.python.distribute.cluster_resolver.tpu.tpu_cluster_resolver', 'tensorflow.python.distribute.cluster_resolver.tpu_cluster_resolver', 'tensorflow.python.distribute.cluster_resolver', 'tensorflow.python.training.device_setter', 'tensorflow.python.distribute.parameter_server_strategy', 'tensorflow.python.ops.partitioned_variables', 'tensorflow.python.distribute.sharded_variable', 'tensorflow.python.platform.remote_utils', 'tensorflow.python.eager.remote', 'tensorflow.python.util.keras_deps', 'tensorflow.python.distribute.parameter_server_strategy_v2', 'tensorflow.python.distribute.coordinator.metric_utils', 'tensorflow.python.distribute.coordinator.values', 'tensorflow.python.distribute.coordinator.watchdog', 'tensorflow.python.eager.cancellation', 'tensorflow.python.distribute.coordinator.cluster_coordinator', 'tensorflow.python.keras.utils.tf_utils', 'tensorflow.python.keras.engine.base_layer_utils', 'tensorflow.python.keras.engine.input_spec', 'tensorflow.python.keras.saving', 'tensorflow.python.keras.saving.saved_model', 'tensorflow.python.keras.saving.saved_model.json_utils', 'tensorflow.python.keras.engine.node', 'tensorflow.python.keras.mixed_precision', 'tensorflow.python.keras.mixed_precision.autocast_variable', 'tensorflow.python.distribute.mirrored_strategy', 'tensorflow.python.tpu.tpu_strategy_util', 'tensorflow.python.distribute.collective_all_reduce_strategy', 'tensorflow.python.distribute.one_device_strategy', 'tensorflow.python.tpu.tpu_hardware_feature', 'tensorflow.python.platform.analytics', 'tensorflow.python.tpu.tensor_tracer_flags', 'tensorflow.python.tpu.tensor_tracer_pb2', 'tensorflow.python.tpu.tensor_tracer_report', 'tensorflow.python.tpu.tensor_tracer', 'tensorflow.python.tpu.training_loop', 'tensorflow.python.distribute.tpu_strategy', 'tensorflow.python.keras.optimizer_v1', 'tensorflow.python.keras.optimizer_v2', 'tensorflow.python.distribute.central_storage_strategy', 'tensorflow.python.keras.optimizer_v2.learning_rate_schedule', 'tensorflow.python.keras.optimizer_v2.utils', 'tensorflow.python.keras.utils.layer_utils', 'tensorflow.python.keras.optimizer_v2.optimizer_v2', 'tensorflow.python.ops.gen_training_ops', 'tensorflow.python.training.gen_training_ops', 'tensorflow.python.keras.optimizer_v2.adadelta', 'tensorflow.python.keras.optimizer_v2.adagrad', 'tensorflow.python.keras.optimizer_v2.adam', 'tensorflow.python.keras.optimizer_v2.adamax', 'tensorflow.python.keras.optimizer_v2.ftrl', 'tensorflow.python.keras.optimizer_v2.gradient_descent', 'tensorflow.python.keras.optimizer_v2.nadam', 'tensorflow.python.keras.optimizer_v2.rmsprop', 'tensorflow.python.keras.optimizers', 'tensorflow.python.training.experimental.loss_scale', 'tensorflow.python.keras.mixed_precision.loss_scale', 'tensorflow.python.trackable.base_delegate', 'tensorflow.python.training.experimental.loss_scale_optimizer', 'tensorflow.python.training.experimental.mixed_precision', 'tensorflow.python.keras.mixed_precision.loss_scale_optimizer', 'tensorflow.python.keras.mixed_precision.device_compatibility_check', 'tensorflow.python.keras.mixed_precision.policy', 'tensorflow.python.keras.saving.saved_model.utils', 'tensorflow.python.keras.saving.saved_model.base_serialization', 'tensorflow.python.keras.saving.saved_model.constants', 'tensorflow.python.keras.utils.losses_utils', 'tensorflow.python.ops.ragged.ragged_map_ops', 'tensorflow.python.keras.losses', 'tensorflow.python.keras.utils.version_utils', 'tensorflow.python.keras.utils.io_utils', 'tensorflow.python.keras.saving.saving_utils', 'tensorflow.python.keras.protobuf', 'tensorflow.python.keras.protobuf.versions_pb2', 'tensorflow.python.keras.protobuf.saved_metadata_pb2', 'tensorflow.python.keras.saving.saved_model.serialized_attributes', 'tensorflow.python.keras.utils.metrics_utils', 'tensorflow.python.framework.function_def_to_graph', 'tensorflow.python.saved_model.function_deserialization', 'tensorflow.python.saved_model.load_options', 'tensorflow.python.eager.wrap_function', 'tensorflow.core.protobuf.saved_model_pb2', 'tensorflow.python.saved_model.signature_constants', 'tensorflow.python.saved_model.signature_def_utils_impl', 'tensorflow.python.saved_model.signature_def_utils', 'tensorflow.python.saved_model.loader_impl', 'tensorflow.python.saved_model.function_serialization', 'tensorflow.python.saved_model.signature_serialization', 'tensorflow.python.saved_model.load_v1_in_v2', 'tensorflow.python.saved_model.load', 'tensorflow.python.keras.saving.saved_model.load', 'tensorflow.python.keras.saving.saved_model.save_impl', 'tensorflow.python.keras.saving.saved_model.layer_serialization', 'tensorflow.python.module', 'tensorflow.python.module.module', 'tensorflow.python.keras.engine.base_layer', 'tensorflow.python.keras.engine.input_layer', 'tensorflow.python.keras.engine.training_utils', 'tarfile', 'six.moves.urllib', 'six.moves.urllib.request', 'tensorflow.python.keras.utils.data_utils', 'tensorflow.python.keras.utils.dataset_creator', 'tensorflow.python.keras.engine.data_adapter', 'tensorflow.python.keras.engine.base_preprocessing_layer', 'tensorflow.python.keras.layers.advanced_activations', 'tensorflow.python.keras.utils.conv_utils', 'tensorflow.python.keras.layers.pooling', 'tensorflow.python.keras.layers.convolutional', 'tensorflow.python.ops.gen_cudnn_rnn_ops', 'tensorflow.python.ops.cudnn_rnn_grad', 'tensorflow.python.ops.gen_rnn_ops', 'tensorflow.python.ops.rnn_grad', 'tensorflow.python.ops.sparse_grad', 'tensorflow.python.ops.state_grad', 'tensorflow.python.ops.gen_batch_ops', 'tensorflow.python.ops.batch_ops', 'tensorflow.python.ops.critical_section_ops', 'tensorflow.python.ops.histogram_ops', 'tensorflow.python.ops.numerics', 'tensorflow.python.ops.gen_decode_proto_ops', 'tensorflow.python.ops.gen_encode_proto_ops', 'tensorflow.python.ops.proto_ops', 'tensorflow.python.ops.ragged.ragged_tensor_shape', 'tensorflow.python.ops.ragged.ragged_dispatch', 'tensorflow.python.ops.template', 'tensorflow.compiler.tf2tensorrt', 'tensorflow.compiler.tf2tensorrt._pywrap_py_utils', 'tensorflow.python.compiler.tensorrt.utils', 'tensorflow.python.grappler', 'tensorflow.python.grappler._pywrap_tf_optimizer', 'tensorflow.core.grappler', 'tensorflow.core.grappler.costs', 'tensorflow.core.protobuf.device_properties_pb2', 'tensorflow.core.grappler.costs.op_performance_data_pb2', 'tensorflow.python.grappler._pywrap_tf_cluster', 'tensorflow.python.grappler.cluster', 'tensorflow.python.grappler.tf_optimizer', 'tensorflow.python.framework.convert_to_constants', 'tensorflow.python.saved_model.builder_impl', 'tensorflow.python.saved_model.builder', 'tensorflow.python.saved_model.loader', 'tensorflow.python.saved_model.tag_constants', 'tensorflow.python.saved_model.tracing_utils', 'tensorflow.python.saved_model.save', 'tensorflow.compiler.tf2tensorrt.ops', 'tensorflow.compiler.tf2tensorrt.ops.gen_trt_ops', 'tensorflow.python.compiler.tensorrt.trt_convert', 'tensorflow.python.compiler.tensorrt', 'tensorflow.python.ops.standard_ops', 'tensorflow.python.keras.layers.core', 'tensorflow.python.keras.layers.dense_attention', 'tensorflow.python.keras.layers.embeddings', 'tensorflow.python.keras.layers.merge', 'tensorflow.python.keras.layers.recurrent', 'tensorflow.python.platform.sysconfig', 'tensorflow.python.keras.layers.recurrent_v2', 'tensorflow.python.keras.layers.convolutional_recurrent', 'tensorflow.python.keras.layers.cudnn_recurrent', 'tensorflow.python.keras.layers.legacy_rnn', 'tensorflow.python.keras.layers.legacy_rnn.rnn_cell_wrapper_impl', 'tensorflow.python.keras.layers.rnn_cell_wrapper_v2', 'tensorflow.python.keras.layers.serialization', 'tensorflow.python.keras.layers', 'tensorflow.python.keras.activations', 'tensorflow.python.keras.saving.saved_model.metric_serialization', 'tensorflow.python.keras.metrics', 'tensorflow.python.keras.distribute.distributed_file_utils', 'tensorflow.python.saved_model.model_utils.export_output', 'tensorflow.python.saved_model.utils', 'tensorflow.python.saved_model.model_utils.mode_keys', 'tensorflow.python.saved_model.model_utils.export_utils', 'tensorflow.python.saved_model.model_utils', 'tensorflow.python.keras.utils.mode_keys', 'tensorflow.python.keras.distribute.worker_training_state', 'tensorflow.python.profiler.profiler_v2', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3.exceptions', 'urllib3._version', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.connection', '_cffi_backend', '_brotli.lib', '_brotli', 'brotli._brotli', 'brotli.brotli', 'brotli', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.ssl_', 'urllib3.util.timeout', 'urllib3.util', 'urllib3.util.proxy', 'urllib3._collections', 'urllib3.connection', 'urllib3.fields', 'urllib3.filepost', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.request', 'urllib3.response', 'urllib3.util.queue', 'urllib3.connectionpool', 'urllib3.poolmanager', 'urllib3', 'chardet.enums', 'chardet.charsetprober', 'chardet.charsetgroupprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.escprober', 'chardet.latin1prober', 'chardet.mbcssm', 'chardet.utf8prober', 'chardet.mbcharsetprober', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.chardistribution', 'chardet.jpcntx', 'chardet.sjisprober', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.mbcsgroupprober', 'chardet.hebrewprober', 'chardet.sbcharsetprober', 'chardet.langbulgarianmodel', 'chardet.langgreekmodel', 'chardet.langhebrewmodel', 'chardet.langrussianmodel', 'chardet.langthaimodel', 'chardet.langturkishmodel', 'chardet.sbcsgroupprober', 'chardet.universaldetector', 'chardet.version', 'chardet', 'http.cookiejar', 'http.cookies', 'requests.compat', 'requests.exceptions', 'charset_normalizer.constant', '_multibytecodec', 'charset_normalizer.utils', 'charset_normalizer.md', 'charset_normalizer.models', 'charset_normalizer.assets', 'charset_normalizer.cd', 'charset_normalizer.api', 'charset_normalizer.legacy', 'charset_normalizer.version', 'charset_normalizer', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3._version', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.request', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.poolmanager', 'requests.packages.urllib3', 'idna.package_data', 'idna.idnadata', 'idna.intranges', 'idna.core', 'idna', 'requests.packages.idna.package_data', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.idna.core', 'requests.packages.idna', 'requests.packages.chardet', 'requests.packages', 'certifi.core', 'certifi', 'requests.certs', 'requests.__version__', 'requests._internal_utils', 'requests.cookies', 'requests.structures', 'requests.utils', 'requests.auth', 'requests.hooks', 'requests.status_codes', 'requests.models', 'socks', 'urllib3.contrib.socks', 'requests.adapters', 'requests.sessions', 'requests.api', 'requests', 'tensorflow.python.keras.callbacks', 'tensorflow.python.keras.engine.compile_utils', 'tensorflow.python.keras.saving.model_config', 'h5py._errors', '_cython_0_29_23', 'h5py.defs', 'h5py._objects', 'h5py.h5py_warnings', 'h5py.h5', 'h5py.version', 'h5py.h5r', 'h5py.utils', 'h5py.h5s', 'h5py.h5ac', 'h5py.h5p', 'h5py.h5t', 'h5py._conv', 'h5py.h5z', 'h5py._proxy', 'h5py.h5a', 'h5py.h5d', 'h5py.h5ds', 'h5py.h5g', 'h5py.h5i', 'h5py.h5f', 'h5py.h5fd', 'h5py.h5pl', 'h5py._hl', 'h5py._hl.compat', 'h5py._hl.filters', 'h5py._hl.base', 'h5py.h5o', 'h5py.h5l', 'h5py._selector', 'h5py._hl.selections', 'h5py._hl.selections2', 'h5py._hl.datatype', 'h5py._hl.vds', 'h5py._hl.dataset', 'h5py._hl.group', 'h5py._hl.files', 'h5py._hl.attrs', 'h5py', 'tensorflow.python.keras.saving.hdf5_format', 'tensorflow.python.keras.saving.saved_model.load_context', 'tensorflow.python.keras.saving.saved_model.save', 'tensorflow.python.keras.saving.save', 'tensorflow.python.keras.saving.saved_model.model_serialization', 'tensorflow.python.keras.engine.training', 'tensorflow.python.keras.saving.saved_model.network_serialization', 'tensorflow.python.keras.engine.functional', 'tensorflow.python.keras.engine.sequential', 'tensorflow.python.keras.engine.training_utils_v1', 'tensorflow.python.keras.distribute.distributed_training_utils_v1', 'scipy._lib._testutils', 'scipy._lib', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback_c', 'scipy._lib._ccallback', 'scipy', 'scipy._lib._util', 'scipy.sparse.sputils', 'scipy.sparse.base', 'scipy.sparse._sparsetools', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.compressed', 'scipy.sparse.csr', 'scipy.sparse.csc', 'scipy.sparse._csparsetools', 'scipy.sparse.lil', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.sparse.csgraph', 'scipy.sparse', 'tensorflow.python.keras.engine.training_arrays_v1', 'tensorflow.python.keras.engine.partial_batch_padding_handler', 'tensorflow.python.keras.engine.training_distributed_v1', 'tensorflow.python.keras.engine.training_eager_v1', 'tensorflow.python.keras.engine.training_generator_v1', 'tensorflow.python.keras.engine.training_v1', 'tensorflow.python.keras.models', 'tensorflow.python.keras', 'tensorflow.python.keras.legacy_tf_layers', 'tensorflow.python.keras.legacy_tf_layers.variable_scope_shim', 'tensorflow.python.keras.legacy_tf_layers.base', 'tensorflow.python.layers.base', 'tensorflow.python.training.checkpoint_utils', 'tensorflow.python.feature_column.feature_column', 'tensorflow.python.feature_column.feature_column_v2', 'tensorflow.python.feature_column.sequence_feature_column', 'tensorflow.python.feature_column.serialization', 'tensorflow.python.feature_column.feature_column_lib', 'tensorflow.python.ops.gen_count_ops', 'tensorflow.python.ops.bincount_ops', 'tensorflow.python.ops.control_flow_util_v2', 'tensorflow.python.ops.cond_v2', 'tensorflow.python.ops.gradient_checker_v2', 'tensorflow.python.ops.metrics_impl', 'tensorflow.python.ops.metrics', 'tensorflow.python.ops.gen_stateful_random_ops', 'tensorflow.python.ops.stateful_random_ops', 'tensorflow.python.ops.while_v2_indexed_slices_rewriter', 'tensorflow.python.ops.while_v2', 'tensorflow.python.ops.distributions', 'tensorflow.python.ops.distributions.kullback_leibler', 'tensorflow.python.ops.distributions.util', 'tensorflow.python.ops.distributions.distribution', 'tensorflow.python.ops.distributions.bernoulli', 'tensorflow.python.ops.distributions.beta', 'tensorflow.python.ops.distributions.categorical', 'tensorflow.python.ops.distributions.dirichlet', 'tensorflow.python.ops.distributions.dirichlet_multinomial', 'tensorflow.python.ops.distributions.gamma', 'tensorflow.python.ops.distributions.exponential', 'tensorflow.python.ops.distributions.special_math', 'tensorflow.python.ops.distributions.laplace', 'tensorflow.python.ops.distributions.multinomial', 'tensorflow.python.ops.distributions.normal', 'tensorflow.python.ops.distributions.student_t', 'tensorflow.python.ops.distributions.uniform', 'tensorflow.python.ops.distributions.distributions', 'tensorflow.python.ops.linalg.linear_operator_algebra', 'tensorflow.python.ops.linalg.linear_operator_util', 'tensorflow.python.ops.linalg.slicing', 'tensorflow.python.ops.linalg.linear_operator', 'tensorflow.python.ops.linalg.linear_operator_adjoint', 'tensorflow.python.ops.linalg.linear_operator_block_diag', 'tensorflow.python.ops.signal', 'tensorflow.python.ops.signal.fft_ops', 'tensorflow.python.ops.linalg.linear_operator_circulant', 'tensorflow.python.ops.linalg.linear_operator_diag', 'tensorflow.python.ops.linalg.linear_operator_householder', 'tensorflow.python.ops.linalg.linear_operator_identity', 'tensorflow.python.ops.linalg.linear_operator_kronecker', 'tensorflow.python.ops.linalg.adjoint_registrations', 'tensorflow.python.ops.linalg.linear_operator_lower_triangular', 'tensorflow.python.ops.linalg.cholesky_registrations', 'tensorflow.python.ops.linalg.linear_operator_full_matrix', 'tensorflow.python.ops.linalg.linear_operator_addition', 'tensorflow.python.ops.linalg.linear_operator_block_lower_triangular', 'tensorflow.python.ops.linalg.linear_operator_inversion', 'tensorflow.python.ops.linalg.inverse_registrations', 'tensorflow.python.ops.linalg.linear_operator_composition', 'tensorflow.python.ops.linalg.linear_operator_zeros', 'tensorflow.python.ops.linalg.registrations_util', 'tensorflow.python.ops.linalg.matmul_registrations', 'tensorflow.python.ops.linalg.solve_registrations', 'tensorflow.python.ops.linalg.linear_operator_low_rank_update', 'tensorflow.python.ops.linalg.linear_operator_permutation', 'tensorflow.python.ops.linalg.linear_operator_toeplitz', 'tensorflow.python.ops.linalg.linear_operator_tridiag', 'tensorflow.python.ops.linalg.linalg', 'tensorflow.python.ops.linalg.sparse', 'tensorflow.python.ops.linalg.sparse.conjugate_gradient', 'tensorflow.python.ops.linalg.sparse.gen_sparse_csr_matrix_ops', 'tensorflow.python.ops.linalg.sparse.sparse_csr_matrix_ops', 'tensorflow.python.ops.linalg.sparse.sparse_csr_matrix_grad', 'tensorflow.python.ops.linalg.sparse.sparse', 'tensorflow.python.ops.losses.losses', 'tensorflow.python.ops.ragged.ragged_batch_gather_ops', 'tensorflow.python.ops.ragged.ragged_concat_ops', 'tensorflow.python.ops.ragged.ragged_where_op', 'tensorflow.python.ops.ragged.ragged_batch_gather_with_default_op', 'tensorflow.python.ops.ragged.ragged_check_ops', 'tensorflow.python.ops.ragged.ragged_conversion_ops', 'tensorflow.python.ops.ragged.ragged_image_ops', 'tensorflow.python.ops.ragged.ragged_squeeze_op', 'tensorflow.python.ops.ragged.ragged_string_ops', 'tensorflow.python.ops.ragged.ragged_ops', 'tensorflow.python.ops.signal.dct_ops', 'fractions', 'tensorflow.python.ops.signal.util_ops', 'tensorflow.python.ops.signal.shape_ops', 'tensorflow.python.ops.signal.mel_ops', 'tensorflow.python.ops.signal.mfcc_ops', 'tensorflow.python.ops.signal.reconstruction_ops', 'tensorflow.python.ops.signal.window_ops', 'tensorflow.python.ops.signal.spectral_ops', 'tensorflow.python.ops.signal.signal', 'tensorflow.python.ops.structured.structured_array_ops', 'tensorflow.python.ops.structured.structured_ops', 'tensorflow.core.profiler', 'tensorflow.core.profiler.tfprof_log_pb2', 'tensorflow.core.profiler.tfprof_output_pb2', 'tensorflow.core.profiler.tfprof_options_pb2', 'tensorflow.python.profiler.internal.flops_registry', 'tensorflow.python.profiler.tfprof_logger', 'tensorflow.python.profiler.option_builder', 'tensorflow.python.util._pywrap_tfprof', 'tensorflow.python.profiler.model_analyzer', 'tensorflow.python.profiler.profiler', 'tensorflow.python.profiler.profiler_client', 'tensorflow.python.saved_model.main_op_impl', 'tensorflow.python.saved_model.main_op', 'tensorflow.python.saved_model.method_name_updater', 'tensorflow.python.saved_model.simple_save', 'tensorflow.python.saved_model.saved_model', 'tensorflow.python.tpu.bfloat16', 'tensorflow.python.tpu.feature_column', 'tensorflow.python.tpu.feature_column_v2', 'tensorflow.python.tpu.tpu_embedding', 'tensorflow.python.ops.init_ops_v2', 'tensorflow.python.tpu.tpu_embedding_v2_utils', 'tensorflow.python.tpu.tpu_embedding_base', 'tensorflow.python.tpu.tpu_embedding_for_serving', 'tensorflow.python.tpu.tpu_embedding_v1', 'tensorflow.python.tpu.tpu_embedding_v2', 'tensorflow.python.tpu.tpu_optimizer', 'tensorflow.python.tpu.api', 'tensorflow.python.user_ops', 'tensorflow.python.user_ops.ops', 'tensorflow.python.user_ops.ops.gen_user_ops', 'tensorflow.python.user_ops.user_ops', 'tensorflow.python.ops.gen_audio_ops', 'tensorflow.python.ops.gen_boosted_trees_ops', 'tensorflow.python.ops.gen_sendrecv_ops', 'tensorflow.python.ops.gen_uniform_quant_ops', 'tensorflow.python.ops.gen_sdca_ops', 'tensorflow.python.ops.sdca_ops', 'tensorflow.python.training.training_ops', 'tensorflow.python.training.adadelta', 'tensorflow.python.training.adagrad', 'tensorflow.python.training.adagrad_da', 'tensorflow.python.training.proximal_adagrad', 'tensorflow.python.training.adam', 'tensorflow.python.training.ftrl', 'tensorflow.python.training.momentum', 'tensorflow.python.training.rmsprop', 'tensorflow.python.training.gradient_descent', 'tensorflow.python.training.proximal_gradient_descent', 'tensorflow.python.training.sync_replicas_optimizer', 'tensorflow.python.layers.utils', 'tensorflow.python.training.input', 'tensorflow.python.training.basic_loops', 'tensorflow.python.training.supervisor', 'tensorflow.python.ops.gen_checkpoint_ops', 'tensorflow.python.training.checkpoint_ops', 'tensorflow.python.training.warm_starting_util', 'tensorflow.core.example', 'tensorflow.core.example.feature_pb2', 'tensorflow.core.example.example_pb2', 'tensorflow.python.keras.optimizer_v2.legacy_learning_rate_decay', 'tensorflow.python.training.learning_rate_decay', 'tensorflow.python.training.training', 'tensorflow.python._pywrap_quantize_training', 'tensorflow.python.training.quantize_training', 'tensorflow.python.platform.app', 'tensorflow.python.platform.resource_loader', 'absl.testing', 'absl.testing._pretty_print_reporter', 'xml.sax.handler', 'xml.sax._exceptions', 'xml.sax.xmlreader', 'xml.sax', 'xml.sax.saxutils', 'absl.testing.xml_reporter', 'absl.testing.absltest', 'absl.testing.parameterized', 'tensorflow.python._pywrap_sanitizers', 'tensorflow.python.pywrap_sanitizers', 'tensorflow.python.framework._test_metrics_util', 'tensorflow.python.framework.gpu_util', 'tensorflow.python.platform._pywrap_stacktrace_handler', 'tensorflow.core.util.test_log_pb2', 'tensorflow.python.platform.benchmark', 'tensorflow.python.platform.googletest', 'tensorflow.python.util._pywrap_util_port', 'tensorflow.python.util.protobuf', 'tensorflow.python.util.protobuf.compare', 'tensorflow.python.framework.test_util', 'tensorflow.python.ops.gradient_checker', 'tensorflow.python.platform.test', 'tensorflow.python.ops.control_flow_v2_toggles', 'tensorflow.python.compat.v2_compat', 'tensorflow.python.keras.layers.legacy_rnn.rnn_cell_impl', 'tensorflow.python.ops.rnn_cell_impl', 'tensorflow.python.ops.rnn', 'tensorflow.python.ops.rnn_cell', 'tensorflow.python.debug.lib', 'tensorflow.python.debug.lib.debug_graphs', 'tensorflow.python.debug.lib.debug_data', 'tensorflow.python.debug.lib.debug_gradients', 'tensorflow.python.debug.lib.debug_utils', 'tensorflow.python.debug.wrappers', 'tensorflow.python.debug.wrappers.framework', 'tensorflow.python.debug.wrappers.dumping_wrapper', 'tensorflow.python.debug.lib.common', 'tensorflow.python.debug.wrappers.grpc_wrapper', 'tensorflow.python.debug.cli', 'tensorflow.python.debug.cli.debugger_cli_common', 'tensorflow.python.debug.cli.cli_config', 'tensorflow.python.debug.cli.command_parser', 'tensorflow.python.debug.cli.tensor_format', 'tensorflow.python.debug.cli.cli_shared', 'tensorflow.python.debug.cli.evaluator', 'tensorflow.python.debug.cli.ui_factory', 'tensorflow.python.debug.lib.profiling', 'tensorflow.python.debug.lib.source_utils', 'tensorflow.python.debug.cli.analyzer_cli', 'tensorflow.python.debug.cli.profile_analyzer_cli', 'tensorflow.python.debug.wrappers.local_cli_wrapper', 'tensorflow.python.debug.wrappers.hooks', 'tensorflow.python.debug', 'tensorflow.core.protobuf.debug_event_pb2', 'tensorflow.python.debug.lib.op_callbacks_common', 'tensorflow.python.ops.gen_debug_ops', 'tensorflow.python.debug.lib.check_numerics_callback', 'tensorflow.python.client._pywrap_debug_events_writer', 'tensorflow.python.debug.lib.debug_events_writer', 'tensorflow.python.debug.lib.dumping_callback', 'tensorflow.python.dlpack', 'tensorflow.python.dlpack.dlpack', 'tensorflow.python.compiler.mlir', 'tensorflow.python._pywrap_mlir', 'tensorflow.python.pywrap_mlir', 'tensorflow.python.compiler.mlir.mlir', 'tensorflow.python', 'tensorflow.python.tools', 'tensorflow.python.tools.module_util', 'tensorflow._api', 'tensorflow._api.v2', 'tensorflow._api.v2.__internal__.autograph', 'tensorflow._api.v2.__internal__.decorator', 'tensorflow._api.v2.__internal__.dispatch', 'tensorflow.python.eager.test', 'tensorflow.python.distribute.multi_process_lib', 'tblib.cpython', 'tblib', 'tblib.pickling_support', 'tensorflow.python.distribute.multi_process_runner', 'tensorflow.python.distribute.distribute_coordinator', 'tensorflow.python.distribute.multi_worker_test_base', 'tensorflow.python.framework.test_combinations', 'tensorflow.python.framework.combinations', 'tensorflow.python.distribute.combinations', 'tensorflow.python.distribute.test_util', 'tensorflow.python.distribute.strategy_combinations', 'tensorflow._api.v2.__internal__.distribute.combinations', 'tensorflow.python.distribute.merge_call_interim', 'tensorflow._api.v2.__internal__.distribute.interim', 'tensorflow._api.v2.__internal__.distribute.multi_process_runner', 'tensorflow._api.v2.__internal__.distribute', 'tensorflow._api.v2.__internal__.eager_context', 'tensorflow._api.v2.__internal__.feature_column', 'tensorflow._api.v2.__internal__.function', 'tensorflow._api.v2.__internal__.graph_util', 'tensorflow._api.v2.__internal__.mixed_precision', 'tensorflow._api.v2.__internal__.monitoring', 'tensorflow._api.v2.__internal__.nest', 'tensorflow._api.v2.__internal__.ops', 'tensorflow._api.v2.__internal__.saved_model.load', 'tensorflow._api.v2.__internal__.saved_model', 'tensorflow._api.v2.__internal__.smart_cond', 'tensorflow._api.v2.__internal__.test.combinations', 'tensorflow._api.v2.__internal__.test', 'tensorflow._api.v2.__internal__.tf2', 'tensorflow._api.v2.__internal__.tracking', 'tensorflow._api.v2.__internal__.train', 'tensorflow._api.v2.__internal__.types', 'tensorflow._api.v2.__internal__', 'tensorflow._api.v2.__operators__', 'tensorflow._api.v2.audio', 'tensorflow._api.v2.autodiff', 'tensorflow._api.v2.autograph.experimental', 'tensorflow._api.v2.autograph', 'tensorflow._api.v2.bitwise', 'tensorflow._api.v2.compat.v1.app', 'tensorflow._api.v2.compat.v1.audio', 'tensorflow._api.v2.compat.v1.autograph.experimental', 'tensorflow._api.v2.compat.v1.autograph', 'tensorflow._api.v2.compat.v1.bitwise', 'tensorflow._api.v2.compat.v1.compat.v1.compat', 'tensorflow._api.v2.compat.v1.config.experimental', 'tensorflow._api.v2.compat.v1.config.optimizer', 'tensorflow._api.v2.compat.v1.config.threading', 'tensorflow._api.v2.compat.v1.config', 'tensorflow._api.v2.compat.v1.data.experimental.service', 'tensorflow._api.v2.compat.v1.data.experimental', 'tensorflow._api.v2.compat.v1.data', 'tensorflow._api.v2.compat.v1.debugging.experimental', 'tensorflow._api.v2.compat.v1.debugging', 'tensorflow._api.v2.compat.v1.distribute.cluster_resolver', 'tensorflow._api.v2.compat.v1.distribute.experimental', 'tensorflow._api.v2.compat.v1.distribute', 'tensorflow._api.v2.compat.v1.distributions', 'tensorflow._api.v2.compat.v1.dtypes', 'tensorflow._api.v2.compat.v1.errors', 'tensorflow.python.framework._pywrap_python_op_gen', 'tensorflow.python.framework.load_library', 'tensorflow._api.v2.compat.v1.experimental', 'tensorflow._api.v2.compat.v1.feature_column', 'tensorflow._api.v2.compat.v1.gfile', 'tensorflow._api.v2.compat.v1.graph_util', 'tensorflow._api.v2.compat.v1.image', 'tensorflow._api.v2.compat.v1.initializers', 'tensorflow._api.v2.compat.v1.io.gfile', 'tensorflow._api.v2.compat.v1.io', 'tensorflow._api.v2.compat.v1.layers.experimental', 'tensorflow._api.v2.compat.v1.layers', 'tensorflow._api.v2.compat.v1.linalg.experimental', 'tensorflow._api.v2.compat.v1.linalg', 'tensorflow.lite', 'tensorflow.lite.python', 'tensorflow.lite.toco', 'tensorflow.lite.toco.types_pb2', 'tensorflow.lite.toco.toco_flags_pb2', 'tensorflow.lite.python.lite_constants', 'tensorflow._api.v2.compat.v1.lite.constants', 'tensorflow.lite.python.authoring', 'flatbuffers.compat', 'flatbuffers.packer', 'flatbuffers.number_types', 'flatbuffers.encode', 'flatbuffers.builder', 'flatbuffers.table', 'flatbuffers._version', 'flatbuffers.util', 'flatbuffers', 'tensorflow.lite.python.conversion_metadata_schema_py_generated', 'tensorflow.lite.python.schema_py_generated', 'tensorflow.lite.python.schema_util', 'tensorflow.lite.python.tflite_keras_util', 'tensorflow.lite.python.op_hint', 'tensorflow.lite.tools', 'tensorflow.lite.tools.flatbuffer_utils', 'tensorflow.lite.python.util', 'tensorflow.python._pywrap_toco_api', 'tensorflow.lite.python.wrap_toco', 'tensorflow.lite.python.metrics', 'tensorflow.lite.python.metrics.converter_error_data_pb2', 'tensorflow.lite.python.metrics.metrics_interface', 'tensorflow.lite.python.metrics.metrics', 'tensorflow.lite.python.convert_phase', 'tensorflow.lite.python.metrics.wrapper', 'tensorflow.lite.python.metrics._pywrap_tensorflow_lite_metrics_wrapper', 'tensorflow.lite.python.metrics.wrapper.metrics_wrapper', 'tensorflow.lite.toco.model_flags_pb2', 'tensorflow.lite.python.convert', 'tensorflow.lite.experimental', 'tensorflow.lite.experimental.microfrontend', 'tensorflow.lite.experimental.microfrontend.python', 'tensorflow.lite.experimental.microfrontend.python.ops', 'tensorflow.lite.experimental.microfrontend.ops', 'tensorflow.lite.experimental.microfrontend.ops.gen_audio_microfrontend_op', 'aa8f2297d25b4dc6fd3d98411eb3ba53823c4f42', 'tensorflow.lite.experimental.microfrontend.python.ops.audio_microfrontend_op', 'tensorflow.lite.python.convert_saved_model', 'tensorflow.lite.python.interpreter_wrapper', 'tensorflow.lite.python.interpreter_wrapper._pywrap_tensorflow_interpreter_wrapper', 'tensorflow.lite.python.interpreter', 'tensorflow.lite.python.optimize', 'tensorflow.lite.python.optimize.calibrator', 'tensorflow.lite.tools.optimize', 'tensorflow.lite.tools.optimize.debugging', 'tensorflow.lite.tools.optimize.debugging.python', 'tensorflow.lite.tools.optimize.debugging.python.debugger', 'tensorflow.lite.python.lite', 'tensorflow.lite.python.authoring.authoring', 'tensorflow._api.v2.compat.v1.lite.experimental.authoring', 'tensorflow.lite.python.analyzer_wrapper', 'tensorflow.lite.python.analyzer_wrapper._pywrap_analyzer_wrapper', 'tensorflow.lite.python.analyzer', 'tensorflow._api.v2.compat.v1.lite.experimental', 'tensorflow._api.v2.compat.v1.lite', 'tensorflow._api.v2.compat.v1.logging', 'tensorflow._api.v2.compat.v1.lookup.experimental', 'tensorflow._api.v2.compat.v1.lookup', 'tensorflow._api.v2.compat.v1.losses', 'tensorflow._api.v2.compat.v1.manip', 'tensorflow._api.v2.compat.v1.math.special', 'tensorflow._api.v2.compat.v1.math', 'tensorflow._api.v2.compat.v1.metrics', 'tensorflow._api.v2.compat.v1.mixed_precision.experimental', 'tensorflow._api.v2.compat.v1.mixed_precision', 'tensorflow._api.v2.compat.v1.mlir.experimental', 'tensorflow._api.v2.compat.v1.mlir', 'tensorflow._api.v2.compat.v1.nest', 'tensorflow._api.v2.compat.v1.nn.experimental', 'tensorflow._api.v2.compat.v1.nn.rnn_cell', 'tensorflow._api.v2.compat.v1.nn', 'tensorflow._api.v2.compat.v1.profiler', 'tensorflow._api.v2.compat.v1.python_io', 'tensorflow._api.v2.compat.v1.quantization', 'tensorflow._api.v2.compat.v1.queue', 'tensorflow._api.v2.compat.v1.ragged', 'tensorflow._api.v2.compat.v1.random.experimental', 'tensorflow._api.v2.compat.v1.random', 'tensorflow._api.v2.compat.v1.raw_ops', 'tensorflow._api.v2.compat.v1.resource_loader', 'tensorflow._api.v2.compat.v1.saved_model.builder', 'tensorflow._api.v2.compat.v1.saved_model.constants', 'tensorflow._api.v2.compat.v1.saved_model.experimental', 'tensorflow._api.v2.compat.v1.saved_model.loader', 'tensorflow._api.v2.compat.v1.saved_model.main_op', 'tensorflow._api.v2.compat.v1.saved_model.signature_constants', 'tensorflow._api.v2.compat.v1.saved_model.signature_def_utils', 'tensorflow._api.v2.compat.v1.saved_model.tag_constants', 'tensorflow._api.v2.compat.v1.saved_model.utils', 'tensorflow._api.v2.compat.v1.saved_model', 'tensorflow._api.v2.compat.v1.sets', 'tensorflow._api.v2.compat.v1.signal', 'tensorflow._api.v2.compat.v1.sparse', 'tensorflow._api.v2.compat.v1.spectral', 'tensorflow._api.v2.compat.v1.strings', 'tensorflow._api.v2.compat.v1.summary', 'tensorflow._api.v2.compat.v1.sysconfig', 'tensorflow._api.v2.compat.v1.test', 'tensorflow._api.v2.compat.v1.tpu.experimental.embedding', 'tensorflow._api.v2.compat.v1.tpu.experimental', 'tensorflow._api.v2.compat.v1.tpu', 'tensorflow._api.v2.compat.v1.train.experimental', 'tensorflow._api.v2.compat.v1.train.queue_runner', 'tensorflow._api.v2.compat.v1.train', 'tensorflow._api.v2.compat.v1.types.experimental', 'tensorflow._api.v2.compat.v1.types', 'tensorflow._api.v2.compat.v1.user_ops', 'tensorflow._api.v2.compat.v1.version', 'tensorflow._api.v2.compat.v1.xla.experimental', 'tensorflow._api.v2.compat.v1.xla', 'tensorflow._api.v2.compat.v1.compat.v1', 'tensorflow._api.v2.compat.v1.compat.v2.compat', 'tensorflow._api.v2.compat.v2.__internal__.autograph', 'tensorflow._api.v2.compat.v2.__internal__.decorator', 'tensorflow._api.v2.compat.v2.__internal__.dispatch', 'tensorflow._api.v2.compat.v2.__internal__.distribute.combinations', 'tensorflow._api.v2.compat.v2.__internal__.distribute.interim', 'tensorflow._api.v2.compat.v2.__internal__.distribute.multi_process_runner', 'tensorflow._api.v2.compat.v2.__internal__.distribute', 'tensorflow._api.v2.compat.v2.__internal__.eager_context', 'tensorflow._api.v2.compat.v2.__internal__.feature_column', 'tensorflow._api.v2.compat.v2.__internal__.function', 'tensorflow._api.v2.compat.v2.__internal__.graph_util', 'tensorflow._api.v2.compat.v2.__internal__.mixed_precision', 'tensorflow._api.v2.compat.v2.__internal__.monitoring', 'tensorflow._api.v2.compat.v2.__internal__.nest', 'tensorflow._api.v2.compat.v2.__internal__.ops', 'tensorflow._api.v2.compat.v2.__internal__.saved_model.load', 'tensorflow._api.v2.compat.v2.__internal__.saved_model', 'tensorflow._api.v2.compat.v2.__internal__.smart_cond', 'tensorflow._api.v2.compat.v2.__internal__.test.combinations', 'tensorflow._api.v2.compat.v2.__internal__.test', 'tensorflow._api.v2.compat.v2.__internal__.tf2', 'tensorflow._api.v2.compat.v2.__internal__.tracking', 'tensorflow._api.v2.compat.v2.__internal__.train', 'tensorflow._api.v2.compat.v2.__internal__.types', 'tensorflow._api.v2.compat.v2.__internal__', 'tensorflow._api.v2.compat.v2.__operators__', 'tensorflow._api.v2.compat.v2.audio', 'tensorflow._api.v2.compat.v2.autodiff', 'tensorflow._api.v2.compat.v2.autograph.experimental', 'tensorflow._api.v2.compat.v2.autograph', 'tensorflow._api.v2.compat.v2.bitwise', 'tensorflow._api.v2.compat.v2.compat.v1.compat', 'tensorflow._api.v2.compat.v2.compat.v1', 'tensorflow._api.v2.compat.v2.compat.v2.compat', 'tensorflow._api.v2.compat.v2.config.experimental', 'tensorflow._api.v2.compat.v2.config.optimizer', 'tensorflow._api.v2.compat.v2.config.threading', 'tensorflow._api.v2.compat.v2.config', 'tensorflow._api.v2.compat.v2.data.experimental.service', 'tensorflow._api.v2.compat.v2.data.experimental', 'tensorflow._api.v2.compat.v2.data', 'tensorflow._api.v2.compat.v2.debugging.experimental', 'tensorflow._api.v2.compat.v2.debugging', 'tensorflow._api.v2.compat.v2.distribute.cluster_resolver', 'tensorflow._api.v2.compat.v2.distribute.coordinator', 'tensorflow._api.v2.compat.v2.distribute.experimental.coordinator', 'tensorflow._api.v2.compat.v2.distribute.experimental.partitioners', 'tensorflow.python.distribute.failure_handling', 'tensorflow.core.distributed_runtime', 'tensorflow.core.distributed_runtime.preemption', 'tensorflow.core.distributed_runtime.preemption.gen_check_preemption_op', 'tensorflow.python.distribute.failure_handling.gce_util', 'tensorflow.python.distribute.failure_handling.failure_handling', 'tensorflow.python.distribute.experimental', 'tensorflow.python.distribute.experimental.rpc', 'tensorflow.distribute', 'tensorflow.distribute.experimental', 'tensorflow.distribute.experimental.rpc', 'tensorflow.distribute.experimental.rpc.kernels', 'tensorflow.distribute.experimental.rpc.kernels.gen_rpc_ops', 'tensorflow.distribute.experimental.rpc.proto', 'tensorflow.distribute.experimental.rpc.proto.tf_rpc_service_pb2', 'tensorflow.python.distribute.experimental.rpc.rpc_ops', 'tensorflow._api.v2.compat.v2.distribute.experimental.rpc', 'tensorflow._api.v2.compat.v2.distribute.experimental', 'tensorflow._api.v2.compat.v2.distribute', 'tensorflow._api.v2.compat.v2.dtypes', 'tensorflow._api.v2.compat.v2.errors', 'tensorflow._api.v2.compat.v2.experimental.dlpack', 'tensorflow.dtensor', 'tensorflow.dtensor.python', 'tensorflow.dtensor.python.config', 'tensorflow.dtensor.python.gen_dtensor_ops', 'tensorflow.dtensor.proto', 'tensorflow.dtensor.proto.layout_pb2', 'tensorflow.python._pywrap_dtensor_device', 'tensorflow.dtensor.python.layout', 'tensorflow.dtensor.python.dtensor_device', 'tensorflow.dtensor.python.api', 'tensorflow.dtensor.python.heartbeat', 'tensorflow.dtensor.python.tpu_util', 'tensorflow.dtensor.python.accelerator_util', 'tensorflow.dtensor.python.d_variable', 'tensorflow.dtensor.python.mesh_util', 'tensorflow.dtensor.python.save_restore', 'tensorflow.dtensor.python.d_checkpoint', 'tensorflow.dtensor.python.input_util', 'tensorflow._api.v2.compat.v2.experimental.dtensor', 'tensorflow._api.v2.compat.v2.experimental.numpy.random', 'tensorflow._api.v2.compat.v2.experimental.numpy', 'tensorflow._api.v2.compat.v2.experimental.tensorrt', 'tensorflow._api.v2.compat.v2.experimental', 'tensorflow._api.v2.compat.v2.feature_column', 'tensorflow._api.v2.compat.v2.graph_util', 'tensorflow._api.v2.compat.v2.image', 'tensorflow._api.v2.compat.v2.io.gfile', 'tensorflow._api.v2.compat.v2.io', 'tensorflow._api.v2.compat.v2.linalg.experimental', 'tensorflow._api.v2.compat.v2.linalg', 'tensorflow._api.v2.compat.v2.lite.experimental.authoring', 'tensorflow._api.v2.compat.v2.lite.experimental', 'tensorflow._api.v2.compat.v2.lite', 'tensorflow._api.v2.compat.v2.lookup.experimental', 'tensorflow._api.v2.compat.v2.lookup', 'tensorflow._api.v2.compat.v2.math.special', 'tensorflow._api.v2.compat.v2.math', 'tensorflow._api.v2.compat.v2.mlir.experimental', 'tensorflow._api.v2.compat.v2.mlir', 'tensorflow._api.v2.compat.v2.nest', 'tensorflow._api.v2.compat.v2.nn.experimental', 'tensorflow._api.v2.compat.v2.nn', 'tensorflow._api.v2.compat.v2.profiler.experimental.client', 'tensorflow._api.v2.compat.v2.profiler.experimental.server', 'tensorflow._api.v2.compat.v2.profiler.experimental', 'tensorflow._api.v2.compat.v2.profiler', 'tensorflow._api.v2.compat.v2.quantization', 'tensorflow._api.v2.compat.v2.queue', 'tensorflow._api.v2.compat.v2.ragged', 'tensorflow._api.v2.compat.v2.random.experimental', 'tensorflow._api.v2.compat.v2.random', 'tensorflow._api.v2.compat.v2.raw_ops', 'tensorflow._api.v2.compat.v2.saved_model.experimental', 'tensorflow._api.v2.compat.v2.saved_model', 'tensorflow._api.v2.compat.v2.sets', 'tensorflow._api.v2.compat.v2.signal', 'tensorflow._api.v2.compat.v2.sparse', 'tensorflow._api.v2.compat.v2.strings', 'tensorflow._api.v2.compat.v2.summary.experimental', 'tensorflow._api.v2.compat.v2.summary', 'tensorflow._api.v2.compat.v2.sysconfig', 'tensorflow._api.v2.compat.v2.test', 'tensorflow._api.v2.compat.v2.tpu.experimental.embedding', 'tensorflow._api.v2.compat.v2.tpu.experimental', 'tensorflow._api.v2.compat.v2.tpu', 'tensorflow._api.v2.compat.v2.train.experimental', 'tensorflow._api.v2.compat.v2.train', 'tensorflow._api.v2.compat.v2.types.experimental.distributed', 'tensorflow._api.v2.compat.v2.types.experimental', 'tensorflow._api.v2.compat.v2.types', 'tensorflow._api.v2.compat.v2.version', 'tensorflow._api.v2.compat.v2.xla.experimental', 'tensorflow._api.v2.compat.v2.xla', 'tensorboard.lazy', 'tensorboard.version', 'tensorboard', 'tensorboard.plugins', 'tensorboard.plugins.audio', 'tensorboard.util', 'tensorboard.util.op_evaluator', 'tensorboard.util.encoder', 'tensorboard.compat', 'tensorboard.compat.proto', 'tensorboard.compat.proto.histogram_pb2', 'tensorboard.compat.proto.tensor_shape_pb2', 'tensorboard.compat.proto.types_pb2', 'tensorboard.compat.proto.resource_handle_pb2', 'tensorboard.compat.proto.tensor_pb2', 'tensorboard.compat.proto.summary_pb2', 'tensorboard.plugins.audio.plugin_data_pb2', 'tensorboard.plugins.audio.metadata', 'tensorboard.util.lazy_tensor_creator', 'tensorboard.plugins.audio.summary_v2', 'tensorboard.plugins.audio.summary', 'tensorboard.plugins.custom_scalar', 'tensorboard.plugins.custom_scalar.layout_pb2', 'tensorboard.plugins.custom_scalar.metadata', 'tensorboard.plugins.custom_scalar.summary', 'tensorboard.plugins.histogram', 'tensorboard.plugins.histogram.plugin_data_pb2', 'tensorboard.plugins.histogram.metadata', 'tensorboard.compat.proto.cost_graph_pb2', 'tensorboard.compat.proto.attr_value_pb2', 'tensorboard.compat.proto.full_type_pb2', 'tensorboard.compat.proto.node_def_pb2', 'tensorboard.compat.proto.op_def_pb2', 'tensorboard.compat.proto.function_pb2', 'tensorboard.compat.proto.versions_pb2', 'tensorboard.compat.proto.graph_pb2', 'tensorboard.compat.proto.allocation_description_pb2', 'tensorboard.compat.proto.tensor_description_pb2', 'tensorboard.compat.proto.step_stats_pb2', 'tensorboard.compat.proto.cluster_pb2', 'tensorboard.compat.proto.coordination_config_pb2', 'tensorboard.compat.proto.debug_pb2', 'tensorboard.compat.proto.verifier_config_pb2', 'tensorboard.compat.proto.rewriter_config_pb2', 'tensorboard.compat.proto.config_pb2', 'tensorboard.compat.proto.event_pb2', 'tensorboard.compat.proto.variable_pb2', 'tensorboard.compat.proto.struct_pb2', 'tensorboard.compat.proto.trackable_object_graph_pb2', 'tensorboard.compat.proto.saved_object_graph_pb2', 'tensorboard.compat.proto.saver_pb2', 'tensorboard.compat.proto.meta_graph_pb2', 'tensorboard.compat.tensorflow_stub.error_codes', 'tensorboard.compat.tensorflow_stub.errors', 'importlib.metadata', 'fsspec._version', 'fsspec.caching', 'fsspec.callbacks', 'fsspec.utils', 'fsspec.config', 'fsspec.dircache', 'fsspec.transaction', 'fsspec.spec', 'fsspec.compression', 'fsspec.registry', 'fsspec.core', 'fsspec.exceptions', 'fsspec.mapping', 'fsspec', 'tensorboard.compat.tensorflow_stub.compat.v1', 'tensorboard.compat.tensorflow_stub.compat', 'tensorboard.compat.tensorflow_stub.io.gfile', 'tensorboard.compat.tensorflow_stub.io', 'tensorboard.compat.tensorflow_stub.pywrap_tensorflow', 'tensorboard.compat.tensorflow_stub.dtypes', 'tensorboard.compat.tensorflow_stub.flags', 'tensorboard.compat.tensorflow_stub.app', 'tensorboard.compat.tensorflow_stub.tensor_shape', 'tensorboard.compat.tensorflow_stub', 'tensorboard.util.tensor_util', 'tensorboard.plugins.histogram.summary_v2', 'tensorboard.plugins.histogram.summary', 'tensorboard.plugins.image', 'tensorboard.plugins.image.plugin_data_pb2', 'tensorboard.plugins.image.metadata', 'tensorboard.plugins.image.summary_v2', 'tensorboard.plugins.image.summary', 'tensorboard.plugins.pr_curve', 'tensorboard.plugins.pr_curve.plugin_data_pb2', 'tensorboard.plugins.pr_curve.metadata', 'tensorboard.plugins.pr_curve.summary', 'tensorboard.plugins.scalar', 'tensorboard.plugins.scalar.plugin_data_pb2', 'tensorboard.plugins.scalar.metadata', 'tensorboard.plugins.scalar.summary_v2', 'tensorboard.plugins.scalar.summary', 'tensorboard.plugins.text', 'tensorboard.plugins.text.plugin_data_pb2', 'tensorboard.plugins.text.metadata', 'tensorboard.plugins.text.summary_v2', 'tensorboard.plugins.text.summary', 'tensorboard.summary.v1', 'tensorboard.summary.v2', 'tensorboard.summary.writer', 'tensorboard.summary.writer.record_writer', 'tensorboard.summary.writer.event_file_writer', 'tensorboard.summary._output', 'tensorboard.summary._writer', 'tensorboard.summary', 'tensorboard.summary._tf', 'tensorboard.summary._tf.summary', 'tensorflow._api.v2.compat.v2.compat.v2', 'tensorflow._api.v2.compat.v2.compat', 'tensorflow._api.v2.compat.v2', 'tensorflow._api.v2.compat.v1.compat.v2', 'tensorflow._api.v2.compat.v1.compat', 'tensorflow._api.v2.compat.v1', 'tensorflow._api.v2.compat', 'tensorflow._api.v2.config.experimental', 'tensorflow._api.v2.config.optimizer', 'tensorflow._api.v2.config.threading', 'tensorflow._api.v2.config', 'tensorflow._api.v2.data.experimental.service', 'tensorflow._api.v2.data.experimental', 'tensorflow._api.v2.data', 'tensorflow._api.v2.debugging.experimental', 'tensorflow._api.v2.debugging', 'tensorflow._api.v2.distribute.cluster_resolver', 'tensorflow._api.v2.distribute.coordinator', 'tensorflow._api.v2.distribute.experimental.coordinator', 'tensorflow._api.v2.distribute.experimental.partitioners', 'tensorflow._api.v2.distribute.experimental.rpc', 'tensorflow._api.v2.distribute.experimental', 'tensorflow._api.v2.distribute', 'tensorflow._api.v2.dtypes', 'tensorflow._api.v2.errors', 'tensorflow._api.v2.experimental.dlpack', 'tensorflow._api.v2.experimental.dtensor', 'tensorflow._api.v2.experimental.numpy.random', 'tensorflow._api.v2.experimental.numpy', 'tensorflow._api.v2.experimental.tensorrt', 'tensorflow._api.v2.experimental', 'tensorflow._api.v2.feature_column', 'tensorflow._api.v2.graph_util', 'tensorflow._api.v2.image', 'tensorflow._api.v2.io.gfile', 'tensorflow._api.v2.io', 'tensorflow._api.v2.linalg.experimental', 'tensorflow._api.v2.linalg', 'tensorflow._api.v2.lite.experimental.authoring', 'tensorflow._api.v2.lite.experimental', 'tensorflow._api.v2.lite', 'tensorflow._api.v2.lookup.experimental', 'tensorflow._api.v2.lookup', 'tensorflow._api.v2.math.special', 'tensorflow._api.v2.math', 'tensorflow._api.v2.mlir.experimental', 'tensorflow._api.v2.mlir', 'tensorflow._api.v2.nest', 'tensorflow._api.v2.nn.experimental', 'tensorflow._api.v2.nn', 'tensorflow._api.v2.profiler.experimental.client', 'tensorflow._api.v2.profiler.experimental.server', 'tensorflow._api.v2.profiler.experimental', 'tensorflow._api.v2.profiler', 'tensorflow._api.v2.quantization', 'tensorflow._api.v2.queue', 'tensorflow._api.v2.ragged', 'tensorflow._api.v2.random.experimental', 'tensorflow._api.v2.random', 'tensorflow._api.v2.raw_ops', 'tensorflow._api.v2.saved_model.experimental', 'tensorflow._api.v2.saved_model', 'tensorflow._api.v2.sets', 'tensorflow._api.v2.signal', 'tensorflow._api.v2.sparse', 'tensorflow._api.v2.strings', 'tensorflow._api.v2.summary.experimental', 'tensorflow._api.v2.summary', 'tensorflow._api.v2.sysconfig', 'tensorflow._api.v2.test', 'tensorflow._api.v2.tpu.experimental.embedding', 'tensorflow._api.v2.tpu.experimental', 'tensorflow._api.v2.tpu', 'tensorflow._api.v2.train.experimental', 'tensorflow._api.v2.train', 'tensorflow._api.v2.types.experimental.distributed', 'tensorflow._api.v2.types.experimental', 'tensorflow._api.v2.types', 'tensorflow._api.v2.version', 'tensorflow._api.v2.xla.experimental', 'tensorflow._api.v2.xla', 'keras.distribute', 'keras.engine', 'tensorflow.compat.v1.app', 'tensorflow.compat.v1.audio', 'tensorflow.compat.v1.autograph.experimental', 'tensorflow.compat.v1.autograph', 'tensorflow.compat.v1.bitwise', 'tensorflow.compat.v1.compat.v1.compat', 'tensorflow.compat.v1.compat.v1', 'tensorflow.compat.v1.compat.v2.compat', 'tensorflow.compat.v1.compat.v2', 'tensorflow.compat.v1.compat', 'tensorflow.compat.v1.config.experimental', 'tensorflow.compat.v1.config.optimizer', 'tensorflow.compat.v1.config.threading', 'tensorflow.compat.v1.config', 'tensorflow.compat.v1.data.experimental.service', 'tensorflow.compat.v1.data.experimental', 'tensorflow.compat.v1.data', 'tensorflow.compat.v1.debugging.experimental', 'tensorflow.compat.v1.debugging', 'tensorflow.compat.v1.distribute.cluster_resolver', 'tensorflow.compat.v1.distribute.experimental', 'tensorflow.compat.v1.distribute', 'tensorflow.compat.v1.distributions', 'tensorflow.compat.v1.dtypes', 'tensorflow.compat.v1.errors', 'tensorflow.compat.v1.experimental', 'tensorflow.compat.v1.feature_column', 'tensorflow.compat.v1.gfile', 'tensorflow.compat.v1.graph_util', 'tensorflow.compat.v1.image', 'tensorflow.compat.v1.initializers', 'tensorflow.compat.v1.io.gfile', 'tensorflow.compat.v1.io', 'tensorflow.compat.v1.layers.experimental', 'tensorflow.compat.v1.layers', 'tensorflow.compat.v1.linalg.experimental', 'tensorflow.compat.v1.linalg', 'tensorflow.compat.v1.lite.constants', 'tensorflow.compat.v1.lite.experimental.authoring', 'tensorflow.compat.v1.lite.experimental', 'tensorflow.compat.v1.lite', 'tensorflow.compat.v1.logging', 'tensorflow.compat.v1.lookup.experimental', 'tensorflow.compat.v1.lookup', 'tensorflow.compat.v1.losses', 'tensorflow.compat.v1.manip', 'tensorflow.compat.v1.math.special', 'tensorflow.compat.v1.math', 'tensorflow.compat.v1.metrics', 'tensorflow.compat.v1.mixed_precision.experimental', 'tensorflow.compat.v1.mixed_precision', 'tensorflow.compat.v1.mlir.experimental', 'tensorflow.compat.v1.mlir', 'tensorflow.compat.v1.nest', 'tensorflow.compat.v1.nn.experimental', 'tensorflow.compat.v1.nn.rnn_cell', 'tensorflow.compat.v1.nn', 'tensorflow.compat.v1.profiler', 'tensorflow.compat.v1.python_io', 'tensorflow.compat.v1.quantization', 'tensorflow.compat.v1.queue', 'tensorflow.compat.v1.ragged', 'tensorflow.compat.v1.random.experimental', 'tensorflow.compat.v1.random', 'tensorflow.compat.v1.raw_ops', 'tensorflow.compat.v1.resource_loader', 'tensorflow.compat.v1.saved_model.builder', 'tensorflow.compat.v1.saved_model.constants', 'tensorflow.compat.v1.saved_model.experimental', 'tensorflow.compat.v1.saved_model.loader', 'tensorflow.compat.v1.saved_model.main_op', 'tensorflow.compat.v1.saved_model.signature_constants', 'tensorflow.compat.v1.saved_model.signature_def_utils', 'tensorflow.compat.v1.saved_model.tag_constants', 'tensorflow.compat.v1.saved_model.utils', 'tensorflow.compat.v1.saved_model', 'tensorflow.compat.v1.sets', 'tensorflow.compat.v1.signal', 'tensorflow.compat.v1.sparse', 'tensorflow.compat.v1.spectral', 'tensorflow.compat.v1.strings', 'tensorflow.compat.v1.summary', 'tensorflow.compat.v1.sysconfig', 'tensorflow.compat.v1.test', 'tensorflow.compat.v1.tpu.experimental.embedding', 'tensorflow.compat.v1.tpu.experimental', 'tensorflow.compat.v1.tpu', 'tensorflow.compat.v1.train.experimental', 'tensorflow.compat.v1.train.queue_runner', 'tensorflow.compat.v1.train', 'tensorflow.compat.v1.types.experimental', 'tensorflow.compat.v1.types', 'tensorflow.compat.v1.user_ops', 'tensorflow.compat.v1.version', 'tensorflow.compat.v1.xla.experimental', 'tensorflow.compat.v1.xla', 'tensorflow.compat.v1', 'tensorflow.compat.v2.__internal__.autograph', 'tensorflow.compat.v2.__internal__.decorator', 'tensorflow.compat.v2.__internal__.dispatch', 'tensorflow.compat.v2.__internal__.distribute.combinations', 'tensorflow.compat.v2.__internal__.distribute.interim', 'tensorflow.compat.v2.__internal__.distribute.multi_process_runner', 'tensorflow.compat.v2.__internal__.distribute', 'tensorflow.compat.v2.__internal__.eager_context', 'tensorflow.compat.v2.__internal__.feature_column', 'tensorflow.compat.v2.__internal__.function', 'tensorflow.compat.v2.__internal__.graph_util', 'tensorflow.compat.v2.__internal__.mixed_precision', 'tensorflow.compat.v2.__internal__.monitoring', 'tensorflow.compat.v2.__internal__.nest', 'tensorflow.compat.v2.__internal__.ops', 'tensorflow.compat.v2.__internal__.saved_model.load', 'tensorflow.compat.v2.__internal__.saved_model', 'tensorflow.compat.v2.__internal__.smart_cond', 'tensorflow.compat.v2.__internal__.test.combinations', 'tensorflow.compat.v2.__internal__.test', 'tensorflow.compat.v2.__internal__.tf2', 'tensorflow.compat.v2.__internal__.tracking', 'tensorflow.compat.v2.__internal__.train', 'tensorflow.compat.v2.__internal__.types', 'tensorflow.compat.v2.__internal__', 'tensorflow.compat.v2.__operators__', 'tensorflow.compat.v2.audio', 'tensorflow.compat.v2.autodiff', 'tensorflow.compat.v2.autograph.experimental', 'tensorflow.compat.v2.autograph', 'tensorflow.compat.v2.bitwise', 'tensorflow.compat.v2.compat.v1.compat', 'tensorflow.compat.v2.compat.v1', 'tensorflow.compat.v2.compat.v2.compat', 'tensorflow.compat.v2.compat.v2', 'tensorflow.compat.v2.compat', 'tensorflow.compat.v2.config.experimental', 'tensorflow.compat.v2.config.optimizer', 'tensorflow.compat.v2.config.threading', 'tensorflow.compat.v2.config', 'tensorflow.compat.v2.data.experimental.service', 'tensorflow.compat.v2.data.experimental', 'tensorflow.compat.v2.data', 'tensorflow.compat.v2.debugging.experimental', 'tensorflow.compat.v2.debugging', 'tensorflow.compat.v2.distribute.cluster_resolver', 'tensorflow.compat.v2.distribute.coordinator', 'tensorflow.compat.v2.distribute.experimental.coordinator', 'tensorflow.compat.v2.distribute.experimental.partitioners', 'tensorflow.compat.v2.distribute.experimental.rpc', 'tensorflow.compat.v2.distribute.experimental', 'tensorflow.compat.v2.distribute', 'tensorflow.compat.v2.dtypes', 'tensorflow.compat.v2.errors', 'tensorflow.compat.v2.experimental.dlpack', 'tensorflow.compat.v2.experimental.dtensor', 'tensorflow.compat.v2.experimental.numpy.random', 'tensorflow.compat.v2.experimental.numpy', 'tensorflow.compat.v2.experimental.tensorrt', 'tensorflow.compat.v2.experimental', 'tensorflow.compat.v2.feature_column', 'tensorflow.compat.v2.graph_util', 'tensorflow.compat.v2.image', 'tensorflow.compat.v2.io.gfile', 'tensorflow.compat.v2.io', 'tensorflow.compat.v2.linalg.experimental', 'tensorflow.compat.v2.linalg', 'tensorflow.compat.v2.lite.experimental.authoring', 'tensorflow.compat.v2.lite.experimental', 'tensorflow.compat.v2.lite', 'tensorflow.compat.v2.lookup.experimental', 'tensorflow.compat.v2.lookup', 'tensorflow.compat.v2.math.special', 'tensorflow.compat.v2.math', 'tensorflow.compat.v2.mlir.experimental', 'tensorflow.compat.v2.mlir', 'tensorflow.compat.v2.nest', 'tensorflow.compat.v2.nn.experimental', 'tensorflow.compat.v2.nn', 'tensorflow.compat.v2.profiler.experimental.client', 'tensorflow.compat.v2.profiler.experimental.server', 'tensorflow.compat.v2.profiler.experimental', 'tensorflow.compat.v2.profiler', 'tensorflow.compat.v2.quantization', 'tensorflow.compat.v2.queue', 'tensorflow.compat.v2.ragged', 'tensorflow.compat.v2.random.experimental', 'tensorflow.compat.v2.random', 'tensorflow.compat.v2.raw_ops', 'tensorflow.compat.v2.saved_model.experimental', 'tensorflow.compat.v2.saved_model', 'tensorflow.compat.v2.sets', 'tensorflow.compat.v2.signal', 'tensorflow.compat.v2.sparse', 'tensorflow.compat.v2.strings', 'tensorflow.compat.v2.summary.experimental', 'tensorflow.compat.v2.summary', 'tensorflow.compat.v2.sysconfig', 'tensorflow.compat.v2.test', 'tensorflow.compat.v2.tpu.experimental.embedding', 'tensorflow.compat.v2.tpu.experimental', 'tensorflow.compat.v2.tpu', 'tensorflow.compat.v2.train.experimental', 'tensorflow.compat.v2.train', 'tensorflow.compat.v2.types.experimental.distributed', 'tensorflow.compat.v2.types.experimental', 'tensorflow.compat.v2.types', 'tensorflow.compat.v2.version', 'tensorflow.compat.v2.xla.experimental', 'tensorflow.compat.v2.xla', 'tensorflow.compat.v2', 'tensorflow.compat', 'keras.backend_config', 'keras.distribute.distribute_coordinator_utils', 'keras.saving', 'keras.saving.legacy', 'keras.utils.tf_contextlib', 'keras.utils.tf_inspect', 'keras.saving.legacy.serialization', 'keras.saving.object_registration', 'keras.utils.dataset_utils', 'keras.utils.audio_dataset', 'six.moves.urllib.parse', 'keras.utils.keras_logging', 'keras.utils.io_utils', 'keras.saving.experimental', 'keras.saving.experimental.serialization_lib', 'keras.utils.generic_utils', 'keras.utils.data_utils', 'PIL._version', 'PIL', 'defusedxml.common', 'defusedxml', 'xml.etree', 'xml.etree.ElementPath', '_elementtree', 'xml.etree.ElementTree', 'defusedxml.ElementTree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'keras.utils.image_utils', 'keras.utils.image_dataset', 'keras.initializers.initializers_v1', 'keras.dtensor', 'keras.dtensor.utils', 'keras.initializers.initializers_v2', 'keras.initializers', 'keras.utils.layer_utils', 'keras.utils.np_utils', 'keras.optimizers.legacy', 'keras.optimizers.optimizer_v2', 'keras.utils.control_flow_util', 'keras.utils.object_identity', 'keras.utils.tf_utils', 'keras.engine.base_layer_utils', 'keras.optimizers.optimizer_v2.utils', 'keras.optimizers.schedules', 'keras.optimizers.schedules.learning_rate_schedule', 'keras.optimizers.optimizer_v2.optimizer_v2', 'keras.optimizers.optimizer_v2.adadelta', 'keras.optimizers.legacy.adadelta', 'keras.optimizers.optimizer_v2.adagrad', 'keras.optimizers.legacy.adagrad', 'keras.optimizers.optimizer_v2.adam', 'keras.optimizers.legacy.adam', 'keras.optimizers.optimizer_v2.adamax', 'keras.optimizers.legacy.adamax', 'keras.optimizers.optimizer_v2.ftrl', 'keras.optimizers.legacy.ftrl', 'keras.optimizers.optimizer_v2.nadam', 'keras.optimizers.legacy.nadam', 'keras.optimizers.legacy.optimizer', 'keras.optimizers.optimizer_v2.rmsprop', 'keras.optimizers.legacy.rmsprop', 'keras.optimizers.optimizer_v2.gradient_descent', 'keras.optimizers.legacy.sgd', 'keras.optimizers.optimizer_experimental', 'keras.optimizers.optimizer_experimental.optimizer', 'keras.optimizers.optimizer_experimental.adadelta', 'keras.optimizers.optimizer_experimental.adafactor', 'keras.optimizers.optimizer_experimental.adagrad', 'keras.optimizers.optimizer_experimental.adam', 'keras.optimizers.optimizer_experimental.adamax', 'keras.optimizers.optimizer_experimental.adamw', 'keras.optimizers.optimizer_experimental.ftrl', 'keras.optimizers.optimizer_experimental.nadam', 'keras.optimizers.optimizer_experimental.rmsprop', 'keras.optimizers.optimizer_experimental.sgd', 'keras.optimizers.optimizer_v1', 'keras.optimizers', 'keras.utils.sidecar_evaluator', 'keras.utils.text_dataset', 'keras.utils.timeseries_dataset', 'keras.utils.vis_utils', 'keras.utils', 'keras.engine.keras_tensor', 'keras.backend', 'keras.dtensor.lazy_variable', 'keras.constraints', 'keras.regularizers', 'keras.engine.input_spec', 'keras.saving.legacy.saved_model', 'keras.saving.legacy.saved_model.json_utils', 'keras.engine.node', 'keras.mixed_precision.loss_scale_optimizer', 'keras.mixed_precision.device_compatibility_check', 'keras.mixed_precision.policy', 'keras.mixed_precision', 'keras.distribute.distributed_training_utils', 'keras.mixed_precision.autocast_variable', 'keras.saving.legacy.saved_model.utils', 'keras.saving.legacy.saved_model.base_serialization', 'keras.saving.legacy.saved_model.constants', 'keras.saving.experimental.saving_lib', 'keras.utils.losses_utils', 'keras.losses', 'keras.utils.version_utils', 'keras.saving.legacy.saving_utils', 'keras.protobuf', 'keras.protobuf.versions_pb2', 'keras.protobuf.saved_metadata_pb2', 'keras.saving.legacy.saved_model.order_preserving_set', 'keras.saving.legacy.saved_model.serialized_attributes', 'keras.utils.metrics_utils', 'keras.saving.legacy.saved_model.load', 'keras.saving.legacy.saved_model.save_impl', 'keras.saving.legacy.saved_model.layer_serialization', 'keras.utils.traceback_utils', 'keras.engine.base_layer', 'keras.dtensor.layout_map', 'keras.engine.input_layer', 'keras.engine.functional_utils', 'keras.distribute.distributed_file_utils', 'keras.utils.mode_keys', 'keras.distribute.worker_training_state', 'keras.callbacks', 'keras.saving.legacy.saved_model.metric_serialization', 'keras.metrics.base_metric', 'keras.engine.training_utils', 'keras.utils.dataset_creator', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'mmap', 'pandas._typing', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.tzconversion', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.tslibs', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.hashtable', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._libs', 'pandas.util._decorators', 'pandas.core', 'pandas.core.util', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas._libs.hashing', 'pandas.core.dtypes', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.util.hashing', 'pandas.util', 'pandas.util.version', 'pandas.compat.numpy', 'pyarrow._generated_version', '_cython_0_29_28', 'cloudpickle.compat', 'cloudpickle.cloudpickle', 'cloudpickle.cloudpickle_fast', 'cloudpickle', 'pyarrow.util', 'pyarrow.lib', 'pyarrow._hdfsio', 'pyarrow.filesystem', 'pyarrow.hdfs', 'pyarrow.ipc', 'pyarrow.serialization', 'pyarrow.types', 'pyarrow', 'pandas.compat.pyarrow', 'pandas.compat', 'pandas.core.config_init', 'pandas.core.dtypes.missing', 'pandas.util._exceptions', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.array_algos', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.array_algos.take', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.roperator', 'pandas._libs.ops', 'pandas.core.computation', 'numexpr.__config__', 'numexpr.interpreter', 'numexpr.expressions', 'numexpr.utils', 'numexpr.necompiler', 'numexpr.version', 'numexpr', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.core.sorting', 'pandas.core.arrays.base', 'bottleneck.reduce', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.move', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.slow', 'bottleneck.benchmark', 'bottleneck.benchmark.autotimeit', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'bottleneck._pytesttester', 'bottleneck._version', 'bottleneck', 'pandas.core.nanops', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', 'pandas._libs.arrays', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.core.arrays.numeric', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.tseries.offsets', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.floating', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.dtypes.concat', 'pandas.core.array_algos.putmask', 'pandas.core.indexes.frozen', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pyarrow._compute', 'pyarrow._compute_docstrings', 'pyarrow.vendored', 'pyarrow.vendored.docscrape', 'pyarrow.compute', 'pandas.core.arrays.string_arrow', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.flags', 'pandas._libs.reduction', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.times', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas.core.aggregation', 'pandas.core.apply', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas.core.reshape', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.quantile', 'pandas.core.array_algos.replace', 'pandas.core.internals.blocks', 'pandas.core.internals.api', 'pandas.core.internals.base', 'pandas.core.internals.array_manager', 'pandas.core.internals.ops', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.core.internals', 'pandas.core.reshape.concat', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.describe', 'pandas.core.internals.construction', 'pandas.core.shared_docs', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.doc', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.online', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.generic', 'pandas.core.reshape.util', 'pandas.core.reshape.melt', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas.core.series', 'pandas.io.formats.info', 'pandas.core.frame', 'pandas.core.groupby.base', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.engines', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers.base_parser', 'pandas.io.parsers.c_parser_wrapper', 'pandas.io.parsers.python_parser', 'pandas.io.parsers.readers', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.formats.excel', 'pandas.io.excel._odswriter', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.xml', 'pandas.io.api', 'pandas.util._tester', 'pandas._testing._random', 'pandas._testing.contexts', 'pandas._testing._io', 'pandas._testing._warnings', 'cmath', 'pandas._libs.testing', 'pandas._testing.asserters', 'pandas._testing.compat', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'keras.engine.data_adapter', 'keras.engine.base_preprocessing_layer', 'keras.layers.activation.elu', 'keras.layers.activation.leaky_relu', 'keras.layers.activation.prelu', 'keras.layers.activation.relu', 'keras.layers.activation.softmax', 'keras.layers.activation.thresholded_relu', 'keras.layers.activation', 'keras.layers.attention.base_dense_attention', 'keras.layers.attention.additive_attention', 'keras.layers.attention.attention', 'keras.layers.core.activation', 'keras.layers.core.dense', 'keras.layers.core.einsum_dense', 'keras.layers.core.embedding', 'keras.layers.core.lambda_layer', 'keras.layers.core.masking', 'keras.layers.core.tf_op_layer', 'keras.layers.regularization.activity_regularization', 'keras.layers.regularization.alpha_dropout', 'keras.layers.regularization.dropout', 'keras.layers.regularization.gaussian_dropout', 'keras.layers.regularization.gaussian_noise', 'keras.layers.regularization.spatial_dropout1d', 'keras.layers.regularization.spatial_dropout2d', 'keras.layers.regularization.spatial_dropout3d', 'keras.layers.regularization', 'keras.utils.conv_utils', 'keras.layers.reshaping.cropping1d', 'keras.layers.reshaping.cropping2d', 'keras.layers.reshaping.cropping3d', 'keras.layers.reshaping.flatten', 'keras.layers.reshaping.permute', 'keras.layers.reshaping.repeat_vector', 'keras.layers.reshaping.reshape', 'keras.layers.reshaping.up_sampling1d', 'keras.layers.reshaping.up_sampling2d', 'keras.layers.reshaping.up_sampling3d', 'keras.layers.reshaping.zero_padding1d', 'keras.layers.reshaping.zero_padding2d', 'keras.layers.reshaping.zero_padding3d', 'keras.layers.reshaping', 'keras.layers.core', 'keras.layers.attention.multi_head_attention', 'keras.layers.attention', 'keras.layers.convolutional.base_conv', 'keras.layers.convolutional.conv1d', 'keras.layers.convolutional.conv1d_transpose', 'keras.layers.convolutional.conv2d', 'keras.layers.convolutional.conv2d_transpose', 'keras.layers.convolutional.conv3d', 'keras.layers.convolutional.conv3d_transpose', 'keras.layers.convolutional.base_depthwise_conv', 'keras.layers.convolutional.depthwise_conv1d', 'keras.layers.convolutional.depthwise_conv2d', 'keras.layers.convolutional.base_separable_conv', 'keras.layers.convolutional.separable_conv1d', 'keras.layers.convolutional.separable_conv2d', 'keras.layers.pooling.base_pooling1d', 'keras.layers.pooling.average_pooling1d', 'keras.layers.pooling.base_pooling2d', 'keras.layers.pooling.average_pooling2d', 'keras.layers.pooling.base_pooling3d', 'keras.layers.pooling.average_pooling3d', 'keras.layers.pooling.base_global_pooling1d', 'keras.layers.pooling.global_average_pooling1d', 'keras.layers.pooling.base_global_pooling2d', 'keras.layers.pooling.global_average_pooling2d', 'keras.layers.pooling.base_global_pooling3d', 'keras.layers.pooling.global_average_pooling3d', 'keras.layers.pooling.global_max_pooling1d', 'keras.layers.pooling.global_max_pooling2d', 'keras.layers.pooling.global_max_pooling3d', 'keras.layers.pooling.max_pooling1d', 'keras.layers.pooling.max_pooling2d', 'keras.layers.pooling.max_pooling3d', 'keras.layers.pooling', 'keras.layers.convolutional', 'keras.layers.locally_connected.locally_connected_utils', 'keras.layers.locally_connected.locally_connected1d', 'keras.layers.locally_connected.locally_connected2d', 'keras.layers.locally_connected', 'keras.layers.merging.base_merge', 'keras.layers.merging.add', 'keras.layers.merging.average', 'keras.layers.merging.concatenate', 'keras.layers.merging.dot', 'keras.layers.merging.maximum', 'keras.layers.merging.minimum', 'keras.layers.merging.multiply', 'keras.layers.merging.subtract', 'keras.layers.merging', 'keras.layers.normalization', 'keras.layers.normalization.batch_normalization', 'keras.layers.normalization.group_normalization', 'keras.layers.normalization.layer_normalization', 'keras.layers.normalization.unit_normalization', 'keras.layers.preprocessing', 'keras.layers.preprocessing.preprocessing_utils', 'keras.layers.preprocessing.category_encoding', 'keras.layers.preprocessing.discretization', 'keras.layers.preprocessing.hashed_crossing', 'keras.layers.preprocessing.hashing', 'keras.layers.preprocessing.image_preprocessing', 'keras.layers.preprocessing.index_lookup', 'keras.layers.preprocessing.integer_lookup', 'keras.layers.preprocessing.normalization', 'keras.layers.preprocessing.string_lookup', 'keras.layers.preprocessing.text_vectorization', 'keras.layers.normalization.batch_normalization_v1', 'keras.layers.kernelized', 'keras.layers.rnn.rnn_utils', 'keras.layers.rnn.abstract_rnn_cell', 'keras.layers.rnn.dropout_rnn_cell_mixin', 'keras.layers.rnn.stacked_rnn_cells', 'keras.layers.rnn.base_rnn', 'keras.layers.rnn.simple_rnn', 'keras.layers.rnn.gru_lstm_utils', 'keras.layers.rnn.gru', 'keras.layers.rnn.gru_v1', 'keras.layers.rnn.lstm', 'keras.layers.rnn.lstm_v1', 'keras.layers.rnn.base_wrapper', 'keras.layers.rnn.bidirectional', 'keras.layers.rnn.cell_wrappers', 'keras.layers.rnn.base_conv_rnn', 'keras.layers.rnn.base_conv_lstm', 'keras.layers.rnn.conv_lstm1d', 'keras.layers.rnn.conv_lstm2d', 'keras.layers.rnn.conv_lstm3d', 'keras.layers.rnn.base_cudnn_rnn', 'keras.layers.rnn.cudnn_gru', 'keras.layers.rnn.cudnn_lstm', 'keras.layers.rnn.time_distributed', 'keras.layers.rnn', 'keras.layers.serialization', 'keras.layers', 'keras.activations', 'keras.metrics.metrics', 'keras.metrics', 'keras.engine.compile_utils', 'keras.saving.pickle_utils', 'keras.saving.legacy.model_config', 'keras.saving.legacy.hdf5_format', 'keras.saving.legacy.saved_model.load_context', 'keras.saving.legacy.saved_model.save', 'keras.saving.legacy.save', 'keras.saving.legacy.saved_model.model_serialization', 'keras.engine.training', 'keras.saving.legacy.saved_model.network_serialization', 'keras.engine.functional', 'keras.engine.sequential', 'keras.engine.training_utils_v1', 'keras.distribute.distributed_training_utils_v1', 'keras.engine.training_arrays_v1', 'keras.engine.partial_batch_padding_handler', 'keras.engine.training_distributed_v1', 'keras.engine.training_eager_v1', 'keras.engine.training_generator_v1', 'keras.engine.training_v1', 'keras.models.cloning', 'keras.models.sharpness_aware_minimization', 'keras.models', 'keras', 'tensorflow.python.util.fast_module_type', 'tensorflow.tools.compatibility', 'tensorflow.tools.compatibility.renames_v2', 'tensorflow.tools.compatibility.all_renames_v2', 'tensorflow.python.util.module_wrapper', 'keras.api.keras.__internal__.layers', 'keras.legacy_tf_layers.migration_utils', 'keras.legacy_tf_layers', 'keras.engine.base_layer_v1', 'keras.legacy_tf_layers.variable_scope_shim', 'keras.legacy_tf_layers.base', 'keras.api.keras.__internal__.legacy.layers.experimental', 'keras.legacy_tf_layers.convolutional', 'keras.legacy_tf_layers.core', 'keras.legacy_tf_layers.normalization', 'keras.legacy_tf_layers.pooling', 'keras.api.keras.__internal__.legacy.layers', 'keras.layers.rnn.legacy_cells', 'keras.layers.rnn.legacy_cell_wrappers', 'keras.api.keras.__internal__.legacy.rnn_cell', 'keras.api.keras.__internal__.legacy', 'keras.api.keras.__internal__', 'keras.api.keras.activations', 'keras.applications.imagenet_utils', 'keras.applications.convnext', 'keras.applications.densenet', 'keras.applications.efficientnet', 'keras.applications.efficientnet_v2', 'keras.applications.inception_resnet_v2', 'keras.applications.inception_v3', 'keras.applications.mobilenet', 'keras.applications.mobilenet_v2', 'keras.applications.mobilenet_v3', 'keras.applications.nasnet', 'keras.applications.resnet', 'keras.applications.resnet_rs', 'keras.applications.resnet_v2', 'keras.applications.vgg16', 'keras.applications.vgg19', 'keras.applications.xception', 'keras.applications', 'keras.api.keras.applications.convnext', 'keras.api.keras.applications.densenet', 'keras.api.keras.applications.efficientnet', 'keras.api.keras.applications.efficientnet_v2', 'keras.api.keras.applications.imagenet_utils', 'keras.api.keras.applications.inception_resnet_v2', 'keras.api.keras.applications.inception_v3', 'keras.api.keras.applications.mobilenet', 'keras.api.keras.applications.mobilenet_v2', 'keras.api.keras.applications.mobilenet_v3', 'keras.api.keras.applications.nasnet', 'keras.applications.regnet', 'keras.api.keras.applications.regnet', 'keras.api.keras.applications.resnet', 'keras.api.keras.applications.resnet50', 'keras.api.keras.applications.resnet_rs', 'keras.api.keras.applications.resnet_v2', 'keras.api.keras.applications.vgg16', 'keras.api.keras.applications.vgg19', 'keras.api.keras.applications.xception', 'keras.api.keras.applications', 'keras.api.keras.backend', 'keras.callbacks_v1', 'keras.api.keras.callbacks', 'keras.api.keras.constraints', 'keras.datasets', 'keras.datasets.boston_housing', 'keras.api.keras.datasets.boston_housing', 'keras.datasets.cifar', 'keras.datasets.cifar10', 'keras.api.keras.datasets.cifar10', 'keras.datasets.cifar100', 'keras.api.keras.datasets.cifar100', 'keras.datasets.fashion_mnist', 'keras.api.keras.datasets.fashion_mnist', 'scipy.linalg._fblas', 'scipy.linalg.blas', 'scipy.linalg._flapack', 'scipy.linalg.lapack', 'scipy.linalg.misc', 'scipy.linalg._flinalg', 'scipy.linalg.flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.basic', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg.matfuncs', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._decomp_update', 'scipy.linalg._sketches', 'scipy.linalg._decomp_cossin', 'scipy.linalg', 'scipy.ndimage._ni_support', 'scipy.ndimage._nd_image', 'scipy._lib.doccer', 'scipy.ndimage._ni_docstrings', 'scipy.ndimage.filters', 'scipy.ndimage.fourier', 'scipy.special.sf_error', 'scipy.special._ufuncs_cxx', 'scipy.special._ufuncs', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.special._comb', 'scipy.special._basic', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm_2', 'scipy.special._ellip_harm', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.special', 'scipy.ndimage.interpolation', '_ni_label', 'scipy.ndimage._ni_label', 'scipy.ndimage.morphology', 'scipy.ndimage.measurements', 'scipy.ndimage', 'PIL.ImageFilter', 'PIL.ImageStat', 'PIL.ImageEnhance', 'keras.preprocessing.image', 'keras.preprocessing.sequence', 'keras.preprocessing.text', 'keras.preprocessing', 'keras.datasets.imdb', 'keras.api.keras.datasets.imdb', 'keras.datasets.mnist', 'keras.api.keras.datasets.mnist', 'keras.datasets.reuters', 'keras.api.keras.datasets.reuters', 'keras.api.keras.datasets', 'keras.estimator', 'keras.api.keras.estimator', 'keras.feature_column', 'keras.feature_column.base_feature_layer', 'keras.feature_column.sequence_feature_column', 'keras.premade_models.linear', 'keras.premade_models.wide_deep', 'keras.premade_models', 'keras.api.keras.experimental', 'keras.api.keras.initializers', 'keras.api.keras.layers.experimental.preprocessing', 'keras.api.keras.layers.experimental', 'keras.feature_column.dense_features', 'keras.api.keras.layers', 'keras.api.keras.losses', 'keras.api.keras.metrics', 'keras.api.keras.mixed_precision', 'keras.api.keras.models', 'keras.api.keras.optimizers.legacy', 'keras.api.keras.optimizers.schedules', 'keras.api.keras.optimizers', 'keras.api.keras.preprocessing.image', 'keras.api.keras.preprocessing.sequence', 'keras.api.keras.preprocessing.text', 'keras.api.keras.preprocessing', 'keras.api.keras.regularizers', 'keras.api.keras.utils', 'keras.wrappers', 'keras.wrappers.scikit_learn', 'keras.api.keras.wrappers.scikit_learn', 'keras.api.keras.wrappers', 'keras.api.keras', 'keras.api', 'keras.api._v2.keras.__internal__.backend', 'keras.api._v2.keras.__internal__.layers', 'keras.api._v2.keras.__internal__.losses', 'keras.api._v2.keras.__internal__.models', 'keras.api._v2.keras.__internal__.optimizers', 'keras.testing_infra', 'keras.testing_infra.test_utils', 'keras.api._v2.keras.__internal__.utils', 'keras.api._v2.keras.__internal__', 'keras.api._v2.keras.activations', 'keras.api._v2.keras.applications.convnext', 'keras.api._v2.keras.applications.densenet', 'keras.api._v2.keras.applications.efficientnet', 'keras.api._v2.keras.applications.efficientnet_v2', 'keras.api._v2.keras.applications.imagenet_utils', 'keras.api._v2.keras.applications.inception_resnet_v2', 'keras.api._v2.keras.applications.inception_v3', 'keras.api._v2.keras.applications.mobilenet', 'keras.api._v2.keras.applications.mobilenet_v2', 'keras.api._v2.keras.applications.mobilenet_v3', 'keras.api._v2.keras.applications.nasnet', 'keras.api._v2.keras.applications.regnet', 'keras.api._v2.keras.applications.resnet', 'keras.api._v2.keras.applications.resnet50', 'keras.api._v2.keras.applications.resnet_rs', 'keras.api._v2.keras.applications.resnet_v2', 'keras.api._v2.keras.applications.vgg16', 'keras.api._v2.keras.applications.vgg19', 'keras.api._v2.keras.applications.xception', 'keras.api._v2.keras.applications', 'keras.api._v2.keras.backend.experimental', 'keras.api._v2.keras.backend', 'keras.api._v2.keras.callbacks.experimental', 'keras.api._v2.keras.callbacks', 'keras.api._v2.keras.constraints', 'keras.api._v2.keras.datasets.boston_housing', 'keras.api._v2.keras.datasets.cifar10', 'keras.api._v2.keras.datasets.cifar100', 'keras.api._v2.keras.datasets.fashion_mnist', 'keras.api._v2.keras.datasets.imdb', 'keras.api._v2.keras.datasets.mnist', 'keras.api._v2.keras.datasets.reuters', 'keras.api._v2.keras.datasets', 'keras.dtensor.optimizers', 'keras.api._v2.keras.dtensor.experimental.optimizers', 'keras.api._v2.keras.dtensor.experimental', 'keras.api._v2.keras.dtensor', 'keras.api._v2.keras.estimator', 'keras.api._v2.keras.experimental', 'keras.api._v2.keras.initializers', 'keras.api._v2.keras.layers.experimental.preprocessing', 'keras.api._v2.keras.layers.experimental', 'keras.feature_column.dense_features_v2', 'keras.api._v2.keras.layers', 'keras.api._v2.keras.losses', 'keras.api._v2.keras.metrics', 'keras.api._v2.keras.mixed_precision', 'keras.api._v2.keras.models.experimental', 'keras.api._v2.keras.models', 'keras.api._v2.keras.optimizers.experimental', 'keras.api._v2.keras.optimizers.legacy', 'keras.api._v2.keras.optimizers.schedules', 'keras.api._v2.keras.optimizers', 'keras.api._v2.keras.preprocessing.image', 'keras.api._v2.keras.preprocessing.sequence', 'keras.api._v2.keras.preprocessing.text', 'keras.api._v2.keras.preprocessing', 'keras.api._v2.keras.regularizers', 'keras.api._v2.keras.utils.experimental', 'keras.api._v2.keras.utils', 'keras.api._v2.keras.wrappers.scikit_learn', 'keras.api._v2.keras.wrappers', 'keras.api._v2.keras', 'keras.api._v2', 'tensorflow', 'matplotlib', 'matplotlib._api.deprecation', 'matplotlib._api', 'matplotlib._c_internal_utils', 'matplotlib.cbook', 'matplotlib.docstring', 'matplotlib._animation_data', 'matplotlib.animation', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImagePalette', 'PIL.ImageSequence', 'PIL.PngImagePlugin', 'matplotlib._path', 'matplotlib.bezier', 'matplotlib.path', 'matplotlib.transforms', 'matplotlib.ticker', 'matplotlib.scale', 'matplotlib._color_data', 'matplotlib.colors', 'pyparsing.util', 'pyparsing.unicode', 'pyparsing.exceptions', 'pyparsing.actions', 'pyparsing.results', 'pyparsing.core', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib._enums', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver', 'dateutil.rrule', 'matplotlib.units', 'matplotlib.dates']
2023-02-01 23:49:20,429 [14244] DEBUG    matplotlib:224: [JupyterRequire] CACHEDIR=C:\Users\sunny\.matplotlib
2023-02-01 23:49:20,432 [14244] DEBUG    matplotlib.font_manager:1439: [JupyterRequire] Using fontManager instance from C:\Users\sunny\.matplotlib\fontlist-v330.json
2023-02-01 23:49:20,600 [14244] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-02-01 23:49:20,604 [14244] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-02-01 23:49:36,481 [14244] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:49:36,481 [14244] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-01 23:49:36,482 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-01 23:49:36,483 [14244] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-01 23:49:36,485 [14244] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:49:38,923 [14244] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:49:38,925 [14244] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-01 23:49:38,925 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-01 23:49:38,926 [14244] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-01 23:49:38,926 [14244] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:49:39,380 [14244] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:49:39,381 [14244] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-01 23:49:39,381 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-01 23:49:39,382 [14244] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-01 23:49:39,382 [14244] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:49:41,470 [14244] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:49:41,471 [14244] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-01 23:49:41,471 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-01 23:49:41,472 [14244] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-01 23:49:41,472 [14244] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:50:04,915 [14244] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:50:04,915 [14244] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-01 23:50:04,915 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-01 23:50:04,916 [14244] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-01 23:50:04,916 [14244] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:50:04,994 [14244] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\2and3\builtins.pyi
2023-02-01 23:50:08,610 [14244] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:50:08,611 [14244] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-01 23:50:08,611 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-01 23:50:08,613 [14244] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-01 23:50:08,613 [14244] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:50:35,581 [14244] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:50:35,582 [14244] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-01 23:50:35,582 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-01 23:50:35,583 [14244] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-01 23:50:35,583 [14244] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:50:35,653 [14244] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\api\_v2\keras\__init__.py
2023-02-01 23:51:00,004 [14244] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:51:00,005 [14244] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-01 23:51:00,005 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-01 23:51:00,005 [14244] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-01 23:51:00,006 [14244] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:51:01,887 [14244] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:51:01,888 [14244] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-01 23:51:01,888 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-01 23:51:01,889 [14244] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-01 23:51:01,889 [14244] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:51:40,066 [14244] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:51:40,067 [14244] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-01 23:51:40,067 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-01 23:51:40,067 [14244] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-01 23:51:40,068 [14244] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:51:44,056 [14244] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:51:44,058 [14244] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-01 23:51:44,058 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-01 23:51:44,058 [14244] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-01 23:51:44,058 [14244] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:51:47,264 [14244] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:51:47,264 [14244] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-01 23:51:47,266 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-01 23:51:47,266 [14244] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-01 23:51:47,266 [14244] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:52:21,046 [14244] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:52:21,047 [14244] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-01 23:52:21,047 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-01 23:52:21,048 [14244] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-01 23:52:21,048 [14244] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:52:38,015 [14244] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:52:38,015 [14244] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-01 23:52:38,015 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-01 23:52:38,016 [14244] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-01 23:52:38,016 [14244] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:52:41,961 [14244] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:52:41,961 [14244] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 2
2023-02-01 23:52:41,961 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:2]
2023-02-01 23:52:41,961 [14244] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2023-02-01 23:52:41,962 [14244] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:52:43,442 [14244] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:52:43,443 [14244] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 2
2023-02-01 23:52:43,443 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2023-02-01 23:52:43,443 [14244] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2023-02-01 23:52:43,443 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:2] new[2:2]
2023-02-01 23:52:43,443 [14244] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 2 (to 1 in part parser)
2023-02-01 23:52:43,443 [14244] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:52:44,720 [14244] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:52:44,721 [14244] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 2
2023-02-01 23:52:44,721 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2023-02-01 23:52:44,721 [14244] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2023-02-01 23:52:44,721 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:2] new[2:2]
2023-02-01 23:52:44,721 [14244] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 2 (to 1 in part parser)
2023-02-01 23:52:44,721 [14244] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:52:50,044 [14244] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:52:50,045 [14244] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 2
2023-02-01 23:52:50,045 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2023-02-01 23:52:50,046 [14244] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2023-02-01 23:52:50,046 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:2] new[2:2]
2023-02-01 23:52:50,046 [14244] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 2 (to 1 in part parser)
2023-02-01 23:52:50,046 [14244] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:52:52,768 [14244] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:52:52,769 [14244] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 2
2023-02-01 23:52:52,769 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2023-02-01 23:52:52,769 [14244] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2023-02-01 23:52:52,769 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:2] new[2:2]
2023-02-01 23:52:52,770 [14244] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 2 (to 1 in part parser)
2023-02-01 23:52:52,770 [14244] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:53:50,132 [14244] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:53:50,132 [14244] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 1
2023-02-01 23:53:50,132 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:2] new[1:1]
2023-02-01 23:53:50,134 [14244] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-01 23:53:50,134 [14244] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:53:50,164 [14244] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\sys.pyi
2023-02-01 23:54:02,356 [14244] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:54:02,357 [14244] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 3
2023-02-01 23:54:02,357 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:3]
2023-02-01 23:54:02,358 [14244] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-02-01 23:54:02,358 [14244] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:54:06,587 [14244] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:54:06,587 [14244] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 3
2023-02-01 23:54:06,588 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2023-02-01 23:54:06,589 [14244] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-02-01 23:54:06,589 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:3]
2023-02-01 23:54:06,589 [14244] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:54:09,086 [14244] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:54:09,087 [14244] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 3
2023-02-01 23:54:09,087 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2023-02-01 23:54:09,089 [14244] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-02-01 23:54:09,089 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:3]
2023-02-01 23:54:09,089 [14244] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:54:09,252 [14244] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:54:09,253 [14244] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 3
2023-02-01 23:54:09,253 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2023-02-01 23:54:09,253 [14244] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-02-01 23:54:09,253 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:3]
2023-02-01 23:54:09,253 [14244] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:54:09,391 [14244] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:54:09,392 [14244] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 3
2023-02-01 23:54:09,392 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2023-02-01 23:54:09,393 [14244] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-02-01 23:54:09,394 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:3]
2023-02-01 23:54:09,394 [14244] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:54:09,582 [14244] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:54:09,583 [14244] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 3
2023-02-01 23:54:09,584 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2023-02-01 23:54:09,585 [14244] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-02-01 23:54:09,586 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:3]
2023-02-01 23:54:09,586 [14244] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:54:09,830 [14244] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:54:09,831 [14244] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 3
2023-02-01 23:54:09,831 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2023-02-01 23:54:09,832 [14244] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-02-01 23:54:09,832 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:3]
2023-02-01 23:54:09,832 [14244] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:54:10,536 [14244] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:54:10,536 [14244] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 3
2023-02-01 23:54:10,536 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2023-02-01 23:54:10,538 [14244] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-02-01 23:54:10,538 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:3]
2023-02-01 23:54:10,538 [14244] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:56:34,080 [14244] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:56:34,080 [14244] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 3
2023-02-01 23:56:34,080 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2023-02-01 23:56:34,080 [14244] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-02-01 23:56:34,080 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:3]
2023-02-01 23:56:34,080 [14244] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:57:12,608 [14244] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:57:12,609 [14244] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 1
2023-02-01 23:57:12,609 [14244] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:3] new[1:1]
2023-02-01 23:57:12,610 [14244] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-01 23:57:12,610 [14244] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:57:15,137 [14244] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\__init__.py
2023-02-01 23:57:16,158 [14244] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\functools.py
2023-02-01 23:57:16,164 [14244] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\functools.pyi
2023-02-01 23:58:08,728 [300] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-01 23:58:08,729 [300] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-01 23:58:08,729 [300] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-01 23:58:08,731 [300] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-01 23:58:08,732 [300] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-01 23:58:08,733 [300] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-01 23:59:41,270 [300] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\sequential.py
2023-02-01 23:59:41,346 [300] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\2and3\builtins.pyi
2023-02-01 23:59:41,351 [300] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\__init__.py
2023-02-01 23:59:41,357 [300] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\__init__.py
2023-02-01 23:59:41,378 [300] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\functional.py
2023-02-01 23:59:41,427 [300] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\training.py
2023-02-01 23:59:41,451 [300] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\__init__.py
2023-02-01 23:59:41,463 [300] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\python\__init__.py
2023-02-01 23:59:41,469 [300] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\python\util\__init__.py
2023-02-01 23:59:41,480 [300] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\python\util\tf_export.py
2023-02-01 23:59:41,499 [300] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\functools.py
2023-02-01 23:59:41,503 [300] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\functools.pyi
2023-02-01 23:59:41,629 [300] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\base_layer.py
2023-02-01 23:59:41,893 [300] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\utils\__init__.py
2023-02-01 23:59:41,901 [300] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\utils\version_utils.py
2023-02-01 23:59:50,310 [300] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:59:50,311 [300] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-01 23:59:50,311 [300] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-01 23:59:50,311 [300] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-01 23:59:50,312 [300] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-01 23:59:50,755 [300] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-01 23:59:50,757 [300] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-01 23:59:50,758 [300] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-01 23:59:50,758 [300] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-01 23:59:50,759 [300] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 00:00:09,518 [300] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 00:00:09,519 [300] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 2
2023-02-02 00:00:09,519 [300] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:2]
2023-02-02 00:00:09,520 [300] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2023-02-02 00:00:09,520 [300] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 00:00:09,532 [300] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\sys.pyi
2023-02-02 00:00:28,989 [300] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 00:00:28,989 [300] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 2
2023-02-02 00:00:28,990 [300] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2023-02-02 00:00:28,990 [300] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2023-02-02 00:00:28,990 [300] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:2] new[2:2]
2023-02-02 00:00:28,991 [300] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 00:00:31,178 [300] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\typing.py
2023-02-02 00:00:31,195 [300] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\typing.pyi
2023-02-02 00:00:57,458 [300] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 00:00:57,458 [300] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 1
2023-02-02 00:00:57,458 [300] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:2] new[1:1]
2023-02-02 00:00:57,459 [300] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 00:00:57,459 [300] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 00:02:31,427 [300] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 00:02:31,428 [300] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 00:02:31,429 [300] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 00:02:31,429 [300] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 00:02:31,429 [300] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 00:02:34,853 [300] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 00:02:34,853 [300] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 00:02:34,854 [300] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 00:02:34,854 [300] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 00:02:34,854 [300] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 00:02:36,762 [300] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 00:02:36,763 [300] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 00:02:36,763 [300] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 00:02:36,765 [300] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 00:02:36,765 [300] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 00:02:39,782 [300] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 00:02:39,783 [300] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 00:02:39,783 [300] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 00:02:39,784 [300] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 0 in part parser)
2023-02-02 00:02:39,784 [300] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 00:02:44,012 [300] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 00:02:44,013 [300] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 00:02:44,013 [300] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 00:02:44,014 [300] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 00:02:44,014 [300] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 00:02:44,200 [300] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 00:02:44,201 [300] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 00:02:44,201 [300] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 00:02:44,202 [300] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 00:02:44,202 [300] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 00:04:37,698 [788] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-02 00:04:37,698 [788] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-02 00:04:37,698 [788] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-02 00:04:37,700 [788] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-02 00:04:37,701 [788] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-02 00:04:37,701 [788] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-02 00:06:46,106 [788] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\sequential.py
2023-02-02 00:06:46,259 [788] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\2and3\builtins.pyi
2023-02-02 00:06:46,265 [788] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\__init__.py
2023-02-02 00:06:46,265 [788] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\__init__.py
2023-02-02 00:06:46,301 [788] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\functional.py
2023-02-02 00:06:46,346 [788] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\training.py
2023-02-02 00:06:46,373 [788] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\__init__.py
2023-02-02 00:06:46,379 [788] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\python\__init__.py
2023-02-02 00:06:46,385 [788] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\python\util\__init__.py
2023-02-02 00:06:46,399 [788] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\python\util\tf_export.py
2023-02-02 00:06:46,473 [788] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\functools.py
2023-02-02 00:06:46,714 [788] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\functools.pyi
2023-02-02 00:06:46,781 [788] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\base_layer.py
2023-02-02 00:06:46,799 [788] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\utils\__init__.py
2023-02-02 00:06:46,817 [788] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\utils\version_utils.py
2023-02-02 00:06:54,170 [788] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 00:06:54,171 [788] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 2
2023-02-02 00:06:54,171 [788] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:2]
2023-02-02 00:06:54,172 [788] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2023-02-02 00:06:54,172 [788] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 00:06:54,264 [788] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\utils\traceback_utils.py
2023-02-02 00:06:54,303 [788] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\sys.pyi
2023-02-02 00:06:54,336 [788] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\typing.py
2023-02-02 00:06:54,353 [788] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\typing.pyi
2023-02-02 00:06:57,570 [788] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 00:06:57,571 [788] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 3
2023-02-02 00:06:57,571 [788] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2023-02-02 00:06:57,571 [788] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-02-02 00:06:57,571 [788] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:2] new[2:3]
2023-02-02 00:06:57,572 [788] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 00:07:00,189 [788] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 00:07:00,189 [788] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 3
2023-02-02 00:07:00,189 [788] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2023-02-02 00:07:00,190 [788] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-02-02 00:07:00,190 [788] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:2] new[2:2]
2023-02-02 00:07:00,191 [788] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[3:3] new[3:3]
2023-02-02 00:07:00,191 [788] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 00:08:06,736 [788] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 00:08:06,736 [788] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 4
2023-02-02 00:08:06,737 [788] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2023-02-02 00:08:06,737 [788] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 4 (to 3 in part parser)
2023-02-02 00:08:06,738 [788] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:3] new[2:4]
2023-02-02 00:08:06,738 [788] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 00:12:46,111 [12980] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-02 00:12:46,111 [12980] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-02 00:12:46,111 [12980] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-02 00:12:46,115 [12980] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-02 00:12:46,116 [12980] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-02 00:12:46,117 [12980] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-02 00:12:54,586 [12980] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\sequential.py
2023-02-02 00:12:54,663 [12980] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\2and3\builtins.pyi
2023-02-02 00:12:54,667 [12980] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\__init__.py
2023-02-02 00:12:54,671 [12980] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\__init__.py
2023-02-02 00:12:54,693 [12980] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\functional.py
2023-02-02 00:12:54,737 [12980] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\training.py
2023-02-02 00:12:54,763 [12980] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\__init__.py
2023-02-02 00:12:54,771 [12980] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\python\__init__.py
2023-02-02 00:12:54,778 [12980] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\python\util\__init__.py
2023-02-02 00:12:54,790 [12980] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\python\util\tf_export.py
2023-02-02 00:12:54,806 [12980] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\functools.py
2023-02-02 00:12:54,868 [12980] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\functools.pyi
2023-02-02 00:12:55,151 [12980] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\base_layer.py
2023-02-02 00:12:55,175 [12980] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\utils\__init__.py
2023-02-02 00:12:55,185 [12980] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\utils\version_utils.py
2023-02-02 00:12:55,194 [12980] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\utils\traceback_utils.py
2023-02-02 00:12:55,202 [12980] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\sys.pyi
2023-02-02 00:12:55,228 [12980] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\typing.py
2023-02-02 00:12:55,242 [12980] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\typing.pyi
2023-02-02 00:12:58,973 [12980] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 00:12:58,975 [12980] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 3
2023-02-02 00:12:58,975 [12980] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2023-02-02 00:12:58,976 [12980] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-02-02 00:12:58,976 [12980] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:2] new[2:3]
2023-02-02 00:12:58,977 [12980] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 00:13:04,309 [12980] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 00:13:04,310 [12980] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 3
2023-02-02 00:13:04,310 [12980] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2023-02-02 00:13:04,311 [12980] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-02-02 00:13:04,311 [12980] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:3]
2023-02-02 00:13:04,311 [12980] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 00:13:22,805 [12980] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 00:13:22,805 [12980] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 8
2023-02-02 00:13:22,805 [12980] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:3] new[1:8]
2023-02-02 00:13:22,807 [12980] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 8 (to 7 in part parser)
2023-02-02 00:13:22,807 [12980] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 00:13:22,819 [12980] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\__init__.py
2023-02-02 00:13:39,394 [12980] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 00:13:39,394 [12980] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 8; new: 3
2023-02-02 00:13:39,394 [12980] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:8] new[1:3]
2023-02-02 00:13:39,395 [12980] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-02-02 00:13:39,395 [12980] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 00:14:12,963 [12980] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 00:14:12,964 [12980] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 1
2023-02-02 00:14:12,964 [12980] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:3] new[1:1]
2023-02-02 00:14:12,964 [12980] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 00:14:12,964 [12980] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 00:14:14,792 [12980] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 00:14:14,793 [12980] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 00:14:14,793 [12980] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 00:14:14,793 [12980] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 00:14:14,793 [12980] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 00:14:15,884 [12980] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 00:14:15,885 [12980] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 00:14:15,885 [12980] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 00:14:15,886 [12980] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 00:14:15,886 [12980] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 00:17:13,607 [11240] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-02 00:17:13,607 [11240] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-02 00:17:13,608 [11240] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-02 00:17:13,609 [11240] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-02 00:17:13,610 [11240] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-02 00:17:13,611 [11240] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-02 00:19:48,710 [18688] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-02 00:19:48,710 [18688] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-02 00:19:48,710 [18688] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-02 00:19:48,713 [18688] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-02 00:19:48,715 [18688] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-02 00:19:48,716 [18688] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-02 00:46:05,048 [23116] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-02 00:46:05,048 [23116] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-02 00:46:05,048 [23116] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-02 00:46:05,051 [23116] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-02 00:46:05,051 [23116] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-02 00:46:05,052 [23116] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-02 00:46:05,850 [23116] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-02 00:46:05,852 [23116] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-02 00:46:05,852 [23116] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-02 00:46:05,855 [23116] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-02 00:46:05,856 [23116] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-02 00:46:05,856 [23116] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-02 00:48:05,039 [23116] INFO     numexpr.utils:145: [JupyterRequire] Note: NumExpr detected 12 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
2023-02-02 00:48:05,039 [23116] INFO     numexpr.utils:157: [JupyterRequire] NumExpr defaulting to 8 threads.
2023-02-02 00:49:48,043 [23116] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\frame.py
2023-02-02 00:49:48,152 [23116] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\2and3\builtins.pyi
2023-02-02 00:49:48,162 [23116] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\__init__.py
2023-02-02 00:49:48,166 [23116] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\__init__.py
2023-02-02 00:49:48,253 [23116] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\generic.py
2023-02-02 00:49:48,296 [23116] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\base.py
2023-02-02 00:49:48,310 [23116] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\accessor.py
2023-02-02 00:49:48,359 [23116] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\indexing.py
2023-02-02 00:49:48,381 [23116] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\arraylike.py
2023-02-02 00:56:13,094 [23116] DEBUG    matplotlib:224: [JupyterRequire] matplotlib data path: C:\Users\sunny\anaconda3\lib\site-packages\matplotlib\mpl-data
2023-02-02 00:56:13,105 [23116] DEBUG    matplotlib:224: [JupyterRequire] CONFIGDIR=C:\Users\sunny\.matplotlib
2023-02-02 00:56:13,107 [23116] DEBUG    matplotlib:1394: [JupyterRequire] matplotlib version 3.4.3
2023-02-02 00:56:13,107 [23116] DEBUG    matplotlib:1395: [JupyterRequire] interactive is False
2023-02-02 00:56:13,107 [23116] DEBUG    matplotlib:1396: [JupyterRequire] platform is win32
2023-02-02 00:56:13,107 [23116] DEBUG    matplotlib:1397: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', '_io', 'marshal', 'nt', 'winreg', '_frozen_importlib_external', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', 'encodings.cp1252', '_signal', 'encodings.latin_1', '_abc', 'abc', 'io', '__main__', '_stat', 'stat', '_collections_abc', 'genericpath', 'ntpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', '_distutils_hack', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', '_heapq', 'heapq', 'itertools', 'keyword', '_operator', 'operator', 'reprlib', '_collections', 'collections', 'collections.abc', '_functools', 'functools', 'contextlib', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', 'typing.io', 'typing.re', 'typing', 'importlib.abc', 'importlib.util', 'google', 'google.cloud', 'google.logging', 'mpl_toolkits', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'msvcrt', '_winapi', 'subprocess', 'jupyter_client._version', 'posixpath', 'fnmatch', 'glob', '_socket', 'math', 'select', 'selectors', 'socket', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_bisect', 'bisect', '_random', '_sha512', 'random', 'tempfile', 'getpass', 'platform', 'zmq.libzmq', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_24', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'copy', '_struct', 'struct', '_compat_pickle', '_pickle', 'pickle', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'atexit', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', '_ast', 'ast', '_opcode', 'opcode', 'dis', 'token', 'tokenize', 'linecache', 'inspect', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.traitlets', 'traitlets.utils.decorators', 'traitlets._version', 'traitlets', 'traceback', '_string', 'string', 'logging', 'pprint', 'gettext', 'argparse', 'traitlets.config.loader', 'textwrap', 'traitlets.utils.text', 'traitlets.config.configurable', 'traitlets.config.application', 'traitlets.config', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'urllib', 'urllib.parse', 'pathlib', 'jupyter_core.paths', 'jupyter_client.utils', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_ssl', 'binascii', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.threads', '_overlapped', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.selector_events', 'asyncio.windows_utils', 'asyncio.windows_events', 'asyncio', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', '_queue', 'queue', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', '_uuid', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', '_datetime', 'datetime', 'numbers', 'logging.handlers', 'html.entities', 'html', 'array', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', '_ctypes', 'ctypes._endian', 'ctypes', 'ctypes.wintypes', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', '__future__', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'sysconfig', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'locale', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_win32', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'IPython.lib.security', 'IPython.lib', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.deduplicate', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout.scrollable_pane', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'prompt_toolkit.patch_stdout', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'parso._compatibility', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.file_io', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.common', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.lib.clipboard', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'nturl2path', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'dataclasses', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'ipython_genutils._version', 'ipython_genutils', 'ipython_genutils.encoding', 'ipython_genutils.py3compat', 'ipython_genutils.path', 'imp', 'hmac', 'dateutil._version', 'dateutil', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.control', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'setuptools._distutils', 'distutils.debug', 'distutils.errors', 'distutils.fancy_getopt', 'distutils.dep_util', 'distutils._log', 'distutils.spawn', 'distutils.util', 'distutils.dist', 'distutils.dir_util', 'distutils.file_util', 'zipfile', 'distutils.archive_util', 'distutils.cmd', 'configparser', 'distutils.config', 'distutils.extension', 'distutils.core', '_distutils_hack.override', 'setuptools._deprecation_warning', 'xml.parsers', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'plistlib', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'importlib._common', 'importlib.resources', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources._vendor.more_itertools.more', 'pkg_resources._vendor.more_itertools', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.functools', 'pkg_resources.extern.jaraco.context', 'pkg_resources.extern.jaraco.text', 'pkg_resources._vendor.platformdirs.api', 'pkg_resources._vendor.platformdirs.version', 'pkg_resources._vendor.platformdirs.windows', 'pkg_resources._vendor.platformdirs', 'pkg_resources.extern.platformdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources._vendor.packaging', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.version', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.tags', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources._vendor.pyparsing.util', 'pkg_resources._vendor.pyparsing.unicode', 'pkg_resources._vendor.pyparsing.exceptions', 'pkg_resources._vendor.pyparsing.actions', 'pkg_resources._vendor.pyparsing.results', 'pkg_resources._vendor.pyparsing.core', 'pkg_resources._vendor.pyparsing.helpers', 'pkg_resources._vendor.pyparsing.testing', 'pkg_resources._vendor.pyparsing.common', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'pkg_resources.extern.packaging.requirements', 'encodings.cp437', 'pkg_resources', 'setuptools.version', 'distutils.filelist', 'setuptools.monkey', 'setuptools.extension', 'distutils.log', 'distutils.command', 'setuptools.extern', 'setuptools._vendor', 'setuptools._vendor.packaging.__about__', 'setuptools._vendor.packaging', 'setuptools.extern.packaging', 'setuptools._vendor.ordered_set', 'setuptools.extern.ordered_set', 'setuptools._vendor.more_itertools.recipes', 'setuptools._vendor.more_itertools.more', 'setuptools._vendor.more_itertools', 'setuptools.extern.more_itertools', '_csv', 'csv', 'setuptools._vendor.zipp', 'setuptools._vendor.importlib_metadata._functools', 'setuptools._vendor.importlib_metadata._text', 'setuptools._vendor.importlib_metadata._adapters', 'setuptools._vendor.importlib_metadata._compat', 'setuptools._vendor.importlib_metadata._meta', 'setuptools._vendor.importlib_metadata._collections', 'setuptools._vendor.importlib_metadata._itertools', 'setuptools._vendor.importlib_metadata', 'setuptools.extern.importlib_metadata', 'zipp', 'importlib_metadata._functools', 'importlib_metadata._text', 'importlib_metadata._adapters', 'importlib_metadata._compat', 'importlib_metadata._meta', 'importlib_metadata._collections', 'importlib_metadata._itertools', 'importlib_metadata', 'setuptools._importlib', 'distutils.command.bdist', 'setuptools.command', 'setuptools.windows_support', 'setuptools._vendor.pyparsing.util', 'setuptools._vendor.pyparsing.unicode', 'setuptools._vendor.pyparsing.exceptions', 'setuptools._vendor.pyparsing.actions', 'setuptools._vendor.pyparsing.results', 'setuptools._vendor.pyparsing.core', 'setuptools._vendor.pyparsing.helpers', 'setuptools._vendor.pyparsing.testing', 'setuptools._vendor.pyparsing.common', 'setuptools._vendor.pyparsing', 'setuptools.extern.pyparsing', 'setuptools._vendor.packaging._manylinux', 'setuptools._vendor.packaging._musllinux', 'setuptools.extern.packaging.tags', 'setuptools.extern.packaging._structures', 'setuptools.extern.packaging.version', 'setuptools.extern.packaging.utils', 'setuptools.extern.packaging.specifiers', 'setuptools.extern.packaging.markers', 'setuptools.extern.packaging.requirements', 'setuptools._path', 'setuptools.config.expand', 'setuptools.config.setupcfg', 'setuptools.config', 'setuptools.errors', 'email._header_value_parser', 'email.headerregistry', 'setuptools.config._apply_pyprojecttoml', 'setuptools.config.pyprojecttoml', 'setuptools.discovery', 'setuptools._vendor.jaraco', 'setuptools.extern.jaraco', 'setuptools.extern.jaraco.functools', 'setuptools.extern.jaraco.context', 'setuptools.extern.jaraco.text', 'setuptools._reqs', 'setuptools._itertools', 'setuptools._entry_points', 'setuptools.dist', 'setuptools.py34compat', 'setuptools._imp', 'setuptools.depends', 'setuptools.logging', 'setuptools.msvc', 'unittest.util', 'unittest.result', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.signals', 'unittest.runner', 'unittest.main', 'unittest', 'unittest.mock', 'distutils.ccompiler', 'distutils._msvccompiler', 'setuptools', 'distutils', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.compiler', 'debugpy._version', 'debugpy.common', 'debugpy.common.json', 'debugpy.common.fmt', 'debugpy.common.compat', 'debugpy', 'debugpy._vendored._util', 'debugpy._vendored', '_pydevd_bundle', 'encodings.ascii', 'stringprep', 'encodings.idna', '_pydevd_bundle.pydevd_vm_type', '_pydev_imps', 'xmlrpc', 'gzip', 'xmlrpc.client', 'socketserver', 'http.server', 'xmlrpc.server', '_pydev_imps._pydev_saved_modules', '_pydevd_bundle.pydevd_constants', '_pydev_bundle', '_pydev_runfiles', '_pydevd_frame_eval', 'pydev_ipython', 'pydevd_concurrency_analyser', 'pydevd_plugins', '_pydev_bundle.pydev_log', '_pydev_bundle._pydev_filesystem_encoding', '_pydevd_bundle.pydevd_comm_constants', 'pydevd_file_utils', '_pydev_imps._pydev_execfile', '_pydevd_bundle.pydevd_exec2', '_pydev_bundle.pydev_imports', '_pydev_bundle.pydev_is_thread_alive', '_pydev_bundle.pydev_override', 'pydevd_plugins.extensions', '_pydevd_bundle.pydevd_extension_utils', '_pydevd_bundle.pydevd_frame_utils', '_pydevd_bundle.pydevd_filtering', '_pydevd_bundle.pydevd_io', '_pydevd_bundle.pydevd_utils', '_pydev_bundle._pydev_tipper_common', '_pydev_bundle._pydev_imports_tipper', '_pydev_bundle._pydev_calltip_util', '_pydevd_bundle.pydevd_safe_repr', '_pydevd_bundle.pydevd_resolver', '_pydevd_bundle.pydevd_extension_api', '_pydevd_bundle.pydevd_xml', '_pydevd_bundle.pydevd_dont_trace', '_pydevd_frame_eval.vendored', '_pydevd_frame_eval.vendored.bytecode.flags', '_pydevd_frame_eval.vendored.bytecode.instr', '_pydevd_frame_eval.vendored.bytecode.bytecode', '_pydevd_frame_eval.vendored.bytecode.concrete', '_pydevd_frame_eval.vendored.bytecode.cfg', '_pydevd_frame_eval.vendored.bytecode', '_pydevd_bundle.pydevd_bytecode_utils', '_pydevd_bundle.pydevd_cython', '_pydevd_bundle.pydevd_cython_wrapper', '_pydevd_bundle.pydevd_additional_thread_info', '_pydevd_bundle.pydevd_thread_lifecycle', '_pydevd_bundle.pydevd_save_locals', '_pydevd_bundle.pydevd_defaults', '_pydev_bundle.pydev_monkey', 'pydevd_tracing', '_pydevd_bundle.pydevd_daemon_thread', '_pydevd_bundle.pydevd_timeout', '_pydevd_bundle.pydevd_vars', '_pydev_bundle.pydev_console_utils', '_pydevd_bundle.pydevd_import_class', '_pydevd_bundle.pydevd_breakpoints', '_pydevd_bundle.pydevd_custom_frames', '_pydevd_bundle.pydevd_dont_trace_files', '_pydevd_bundle.pydevd_net_command', '_pydev_bundle.pydev_umd', 'pydevconsole', '_pydev_bundle._pydev_completer', '_pydevd_bundle.pydevd_net_command_factory_xml', '_pydevd_bundle.pydevd_frame', '_pydevd_bundle.pydevd_additional_thread_info_regular', '_pydevd_bundle.pydevd_trace_dispatch', '_pydevd_frame_eval.pydevd_frame_eval_main', '_pydevd_bundle.pydevd_source_mapping', 'pydevd_concurrency_analyser.pydevd_thread_wrappers', 'pydevd_concurrency_analyser.pydevd_concurrency_logger', '_pydevd_bundle._debug_adapter', '_pydevd_bundle._debug_adapter.pydevd_schema_log', '_pydevd_bundle._debug_adapter.pydevd_base_schema', '_pydevd_bundle._debug_adapter.pydevd_schema', '_pydevd_bundle.pydevd_reload', '_pydev_bundle.fsnotify', '_pydevd_bundle.pydevd_console', '_pydevd_bundle.pydevd_comm', '_pydevd_bundle.pydevd_net_command_factory_json', '_pydevd_bundle.pydevd_collect_bytecode_info', '_pydevd_bundle.pydevd_api', '_pydevd_bundle.pydevd_json_debug_options', '_pydevd_bundle.pydevd_process_net_command_json', '_pydevd_bundle.pydevd_traceproperty', '_pydevd_bundle.pydevd_process_net_command', '_pydevd_bundle.pydevd_suspended_frames', '_pydevd_bundle.pydevd_trace_api', 'pydevd_plugins.django_debug', 'pydevd_plugins.jinja2_debug', '_pydevd_bundle.pydevd_plugin_utils', 'pydevd_plugins.extensions.types', 'pydevd_plugins.extensions.types.pydevd_helpers', 'pydevd_plugins.extensions.types.pydevd_plugin_numpy_types', 'pydevd_plugins.extensions.types.pydevd_plugins_django_form_str', 'pydevd', 'debugpy._vendored.force_pydevd', 'debugpy.server', 'debugpy.adapter', 'debugpy.common.timestamp', 'debugpy.common.util', 'debugpy.common.log', 'debugpy.common.sockets', 'debugpy.server.api', 'ipykernel.debugger', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'IPython.core.completerlib', 'storemagic', 'pyforest._importable', 'pyforest.user_specific_imports', 'pyforest._imports', 'pyforest.utils', 'pyforest', 'logging.config', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.types', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'jupyter_require', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'mkl._mklinit', 'mkl._py_mkl_service', 'mkl', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._add_newdocs_scalars', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'mmap', 'pandas._typing', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.tzconversion', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.tslibs', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.hashtable', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._libs', 'pandas.util._decorators', 'pandas.core', 'pandas.core.util', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas._libs.hashing', 'pandas.core.dtypes', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.util.hashing', 'pandas.util', 'pandas.util.version', 'pandas.compat.numpy', 'pyarrow._generated_version', '_cython_0_29_28', 'cloudpickle.compat', 'typing_extensions', 'cloudpickle.cloudpickle', 'cloudpickle.cloudpickle_fast', 'cloudpickle', 'pyarrow.util', 'pyarrow.lib', 'pyarrow._hdfsio', 'pyarrow.filesystem', 'pyarrow.hdfs', 'pyarrow.ipc', 'pyarrow.serialization', 'pyarrow.types', 'pyarrow', 'pandas.compat.pyarrow', 'pandas.compat', 'pandas.core.config_init', 'pandas.core.dtypes.missing', 'pandas.util._exceptions', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.array_algos', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.array_algos.take', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.roperator', 'pandas._libs.ops', 'pandas.core.computation', 'numexpr.__config__', 'numexpr.interpreter', 'numexpr.expressions', 'numexpr.utils', 'numexpr.necompiler', 'numexpr.version', 'numexpr', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.core.sorting', 'pandas.core.arrays.base', 'bottleneck.reduce', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.move', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.slow', 'bottleneck.benchmark', 'bottleneck.benchmark.autotimeit', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'bottleneck._pytesttester', 'bottleneck._version', 'bottleneck', 'pandas.core.nanops', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', 'pandas._libs.arrays', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.core.arrays.numeric', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.tseries.offsets', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.floating', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.dtypes.concat', 'pandas.core.array_algos.putmask', 'pandas.core.indexes.frozen', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pyarrow._compute', 'pyarrow._compute_docstrings', 'pyarrow.vendored', 'pyarrow.vendored.docscrape', 'pyarrow.compute', 'pandas.core.arrays.string_arrow', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.flags', 'pandas._libs.reduction', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.times', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas.core.aggregation', 'pandas.core.apply', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas.core.reshape', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.quantile', 'pandas.core.array_algos.replace', 'pandas.core.internals.blocks', 'pandas.core.internals.api', 'pandas.core.internals.base', 'pandas.core.internals.array_manager', 'pandas.core.internals.ops', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.core.internals', 'pandas.core.reshape.concat', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.describe', 'pandas.core.internals.construction', 'pandas.core.shared_docs', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.doc', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.online', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.generic', 'pandas.core.reshape.util', 'pandas.core.reshape.melt', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas.core.series', 'pandas.io.formats.info', 'pandas.core.frame', 'pandas.core.groupby.base', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.engines', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers.base_parser', 'pandas.io.parsers.c_parser_wrapper', 'pandas.io.parsers.python_parser', 'pandas.io.parsers.readers', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.formats.excel', 'pandas.io.excel._odswriter', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.xml', 'pandas.io.api', 'pandas.util._tester', 'pandas._testing._random', 'pandas._testing.contexts', 'pandas._testing._io', 'pandas._testing._warnings', 'cmath', 'pandas._libs.testing', 'pandas._testing.asserters', 'pandas._testing.compat', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'pandas.io.formats.string', 'pandas.io.formats.html', 'jedi.inference.finder', 'matplotlib', 'matplotlib._api.deprecation', 'matplotlib._api', 'matplotlib._c_internal_utils', 'matplotlib.cbook', 'matplotlib.docstring', 'PIL._version', 'PIL', 'defusedxml.common', 'defusedxml', 'xml.etree', 'xml.etree.ElementPath', '_elementtree', 'xml.etree.ElementTree', 'defusedxml.ElementTree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'matplotlib._animation_data', 'matplotlib.animation', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImagePalette', 'PIL.ImageSequence', 'PIL.PngImagePlugin', 'matplotlib._path', 'matplotlib.bezier', 'matplotlib.path', 'matplotlib.transforms', 'matplotlib.ticker', 'matplotlib.scale', 'matplotlib._color_data', 'matplotlib.colors', 'pyparsing.util', 'pyparsing.unicode', 'pyparsing.exceptions', 'pyparsing.actions', 'pyparsing.results', 'pyparsing.core', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib._enums', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver', 'dateutil.rrule', 'matplotlib.units', 'matplotlib.dates']
2023-02-02 00:56:13,153 [23116] DEBUG    matplotlib:224: [JupyterRequire] CACHEDIR=C:\Users\sunny\.matplotlib
2023-02-02 00:56:13,157 [23116] DEBUG    matplotlib.font_manager:1439: [JupyterRequire] Using fontManager instance from C:\Users\sunny\.matplotlib\fontlist-v330.json
2023-02-02 00:56:13,330 [23116] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-02-02 00:56:13,330 [23116] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-02-02 00:56:14,445 [23116] DEBUG    matplotlib.colorbar:620: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x0000023D28D5EAF0>
2023-02-02 00:56:14,445 [23116] DEBUG    matplotlib.colorbar:665: [JupyterRequire] Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x0000023D28D5EAF0> on colorbar
2023-02-02 00:56:14,446 [23116] DEBUG    matplotlib.colorbar:794: [JupyterRequire] Setting pcolormesh
2023-02-02 00:56:14,497 [23116] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2023-02-02 00:56:14,497 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,498 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,498 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,498 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-02-02 00:56:14,498 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,498 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,498 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-02-02 00:56:14,498 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,498 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,498 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,498 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,498 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,498 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,500 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-02-02 00:56:14,500 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,500 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-02-02 00:56:14,500 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,500 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,500 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-02-02 00:56:14,500 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,500 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-02-02 00:56:14,500 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-02-02 00:56:14,500 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,500 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,501 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,501 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,501 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,501 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-02-02 00:56:14,501 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,501 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,501 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,502 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,502 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,502 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-02-02 00:56:14,502 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,502 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,502 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,502 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,502 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,502 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,503 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,503 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2023-02-02 00:56:14,503 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,503 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,503 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,503 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2023-02-02 00:56:14,503 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,503 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,503 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,504 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2023-02-02 00:56:14,504 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,504 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,504 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,504 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,504 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,504 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,504 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,504 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,504 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,504 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2023-02-02 00:56:14,504 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2023-02-02 00:56:14,506 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2023-02-02 00:56:14,506 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2023-02-02 00:56:14,506 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,506 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,506 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,506 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2023-02-02 00:56:14,506 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,506 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,506 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,507 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2023-02-02 00:56:14,507 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,507 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2023-02-02 00:56:14,507 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sitka' (SitkaVF.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,507 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,507 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2023-02-02 00:56:14,507 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,507 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,507 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,508 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,508 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2023-02-02 00:56:14,508 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,508 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,508 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,508 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,508 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,508 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2023-02-02 00:56:14,509 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,509 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,509 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,509 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,509 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2023-02-02 00:56:14,509 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,509 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,509 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,509 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,510 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,510 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,510 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,510 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,510 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,510 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,510 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,510 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,511 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,511 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,511 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,511 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2023-02-02 00:56:14,511 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,511 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,511 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,511 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,512 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,512 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2023-02-02 00:56:14,512 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,512 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2023-02-02 00:56:14,512 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2023-02-02 00:56:14,512 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,512 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,512 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2023-02-02 00:56:14,513 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,513 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,513 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2023-02-02 00:56:14,513 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,513 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2023-02-02 00:56:14,513 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,513 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,513 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,514 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2023-02-02 00:56:14,514 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2023-02-02 00:56:14,514 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2023-02-02 00:56:14,514 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2023-02-02 00:56:14,514 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,514 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,514 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,514 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,514 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,514 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,514 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,514 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,515 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,515 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2023-02-02 00:56:14,515 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,515 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2023-02-02 00:56:14,516 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,516 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,516 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,516 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,516 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,516 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2023-02-02 00:56:14,516 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,517 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,517 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2023-02-02 00:56:14,517 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2023-02-02 00:56:14,517 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Variable' (SegUIVar.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,517 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,517 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,517 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,517 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,518 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,518 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,518 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,518 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,518 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,518 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,519 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,519 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,519 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2023-02-02 00:56:14,519 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2023-02-02 00:56:14,519 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2023-02-02 00:56:14,519 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,519 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2023-02-02 00:56:14,519 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,520 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,520 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,520 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,520 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2023-02-02 00:56:14,520 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2023-02-02 00:56:14,520 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2023-02-02 00:56:14,520 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,520 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,520 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,520 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2023-02-02 00:56:14,521 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2023-02-02 00:56:14,521 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,521 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,521 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2023-02-02 00:56:14,522 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,522 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,522 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2023-02-02 00:56:14,522 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,522 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,522 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,522 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2023-02-02 00:56:14,522 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,523 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,523 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,523 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2023-02-02 00:56:14,523 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,523 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2023-02-02 00:56:14,524 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,524 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2023-02-02 00:56:14,524 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,524 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,524 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,524 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,524 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,524 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,525 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2023-02-02 00:56:14,525 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2023-02-02 00:56:14,525 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2023-02-02 00:56:14,525 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2023-02-02 00:56:14,525 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2023-02-02 00:56:14,525 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,525 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,526 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,526 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,526 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,526 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,526 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,526 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,526 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,527 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,527 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,527 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,527 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,527 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,527 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,527 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,527 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2023-02-02 00:56:14,527 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2023-02-02 00:56:14,527 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,527 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,527 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2023-02-02 00:56:14,528 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,528 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,528 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,528 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2023-02-02 00:56:14,528 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,528 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2023-02-02 00:56:14,528 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,528 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,528 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,528 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,529 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,529 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,529 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,529 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,529 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2023-02-02 00:56:14,529 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,529 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,529 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,529 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,529 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,529 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sitka' (SitkaVF-Italic.ttf) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,531 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,531 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2023-02-02 00:56:14,531 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,531 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,531 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,531 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2023-02-02 00:56:14,531 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,531 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,531 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,532 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,532 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,532 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2023-02-02 00:56:14,533 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2023-02-02 00:56:14,533 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,533 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,533 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,533 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,533 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,533 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,533 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2023-02-02 00:56:14,534 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,534 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2023-02-02 00:56:14,534 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,534 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,534 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2023-02-02 00:56:14,534 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,535 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,535 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,535 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,535 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,535 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2023-02-02 00:56:14,535 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2023-02-02 00:56:14,535 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2023-02-02 00:56:14,536 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,536 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2023-02-02 00:56:14,536 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2023-02-02 00:56:14,536 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,536 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,536 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2023-02-02 00:56:14,536 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,537 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2023-02-02 00:56:14,537 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,537 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,537 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,537 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2023-02-02 00:56:14,537 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2023-02-02 00:56:14,537 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,537 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,537 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,538 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,538 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,538 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2023-02-02 00:56:14,538 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2023-02-02 00:56:14,538 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,538 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,538 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2023-02-02 00:56:14,538 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,538 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2023-02-02 00:56:14,539 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2023-02-02 00:56:14,539 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2023-02-02 00:56:14,539 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,539 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,539 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2023-02-02 00:56:14,539 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,539 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,539 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,539 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,540 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,540 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,540 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,540 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,540 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,540 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,540 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,540 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,541 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2023-02-02 00:56:14,541 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,541 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2023-02-02 00:56:14,541 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2023-02-02 00:56:14,541 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2023-02-02 00:56:14,541 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2023-02-02 00:56:14,541 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2023-02-02 00:56:14,541 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,542 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,542 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,542 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,542 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,542 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,542 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,542 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,542 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,542 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,543 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,543 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,543 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,543 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,543 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,543 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,543 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2023-02-02 00:56:14,544 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,544 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2023-02-02 00:56:14,544 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2023-02-02 00:56:14,544 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2023-02-02 00:56:14,544 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2023-02-02 00:56:14,544 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,544 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,545 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,545 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,545 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,545 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2023-02-02 00:56:14,545 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,545 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,545 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,545 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2023-02-02 00:56:14,545 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,546 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2023-02-02 00:56:14,546 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2023-02-02 00:56:14,546 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,546 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2023-02-02 00:56:14,546 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2023-02-02 00:56:14,546 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2023-02-02 00:56:14,546 [23116] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Fluent Icons' (SegoeIcons.ttf) normal normal 400 normal>) = 10.05
2023-02-02 00:56:14,546 [23116] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2023-02-02 00:56:45,905 [23116] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 00:56:45,905 [23116] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 00:56:45,905 [23116] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 00:56:45,905 [23116] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 00:56:45,905 [23116] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 00:56:48,969 [23116] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 00:56:48,971 [23116] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 00:56:48,971 [23116] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 00:56:48,971 [23116] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 00:56:48,972 [23116] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 00:57:00,346 [23116] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 00:57:00,347 [23116] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 00:57:00,347 [23116] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 00:57:00,347 [23116] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 00:57:00,347 [23116] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 00:57:02,184 [23116] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\_typing.py
2023-02-02 00:57:02,271 [23116] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\typing.py
2023-02-02 00:57:02,290 [23116] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\typing.pyi
2023-02-02 00:57:02,306 [23116] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\sys.pyi
2023-02-02 00:57:02,331 [23116] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\types.py
2023-02-02 00:57:02,340 [23116] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\types.pyi
2023-02-02 00:57:02,407 [23116] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\core\series.py
2023-02-02 01:01:27,780 [21600] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-02 01:01:27,780 [21600] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-02 01:01:27,781 [21600] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-02 01:01:27,783 [21600] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-02 01:01:27,783 [21600] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-02 01:01:27,784 [21600] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-02 01:01:49,893 [21600] INFO     numexpr.utils:145: [JupyterRequire] Note: NumExpr detected 12 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
2023-02-02 01:01:49,893 [21600] INFO     numexpr.utils:157: [JupyterRequire] NumExpr defaulting to 8 threads.
2023-02-02 01:01:50,447 [21600] DEBUG    matplotlib:224: [JupyterRequire] matplotlib data path: C:\Users\sunny\anaconda3\lib\site-packages\matplotlib\mpl-data
2023-02-02 01:01:50,454 [21600] DEBUG    matplotlib:224: [JupyterRequire] CONFIGDIR=C:\Users\sunny\.matplotlib
2023-02-02 01:01:50,456 [21600] DEBUG    matplotlib:1394: [JupyterRequire] matplotlib version 3.4.3
2023-02-02 01:01:50,456 [21600] DEBUG    matplotlib:1395: [JupyterRequire] interactive is False
2023-02-02 01:01:50,457 [21600] DEBUG    matplotlib:1396: [JupyterRequire] platform is win32
2023-02-02 01:01:50,457 [21600] DEBUG    matplotlib:1397: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', '_io', 'marshal', 'nt', 'winreg', '_frozen_importlib_external', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', 'encodings.cp1252', '_signal', 'encodings.latin_1', '_abc', 'abc', 'io', '__main__', '_stat', 'stat', '_collections_abc', 'genericpath', 'ntpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', '_distutils_hack', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', '_heapq', 'heapq', 'itertools', 'keyword', '_operator', 'operator', 'reprlib', '_collections', 'collections', 'collections.abc', '_functools', 'functools', 'contextlib', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', 'typing.io', 'typing.re', 'typing', 'importlib.abc', 'importlib.util', 'google', 'google.cloud', 'google.logging', 'mpl_toolkits', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'msvcrt', '_winapi', 'subprocess', 'jupyter_client._version', 'posixpath', 'fnmatch', 'glob', '_socket', 'math', 'select', 'selectors', 'socket', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_bisect', 'bisect', '_random', '_sha512', 'random', 'tempfile', 'getpass', 'platform', 'zmq.libzmq', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_24', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'copy', '_struct', 'struct', '_compat_pickle', '_pickle', 'pickle', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'atexit', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', '_ast', 'ast', '_opcode', 'opcode', 'dis', 'token', 'tokenize', 'linecache', 'inspect', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.traitlets', 'traitlets.utils.decorators', 'traitlets._version', 'traitlets', 'traceback', '_string', 'string', 'logging', 'pprint', 'gettext', 'argparse', 'traitlets.config.loader', 'textwrap', 'traitlets.utils.text', 'traitlets.config.configurable', 'traitlets.config.application', 'traitlets.config', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'urllib', 'urllib.parse', 'pathlib', 'jupyter_core.paths', 'jupyter_client.utils', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_ssl', 'binascii', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.threads', '_overlapped', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.selector_events', 'asyncio.windows_utils', 'asyncio.windows_events', 'asyncio', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', '_queue', 'queue', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', '_uuid', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', '_datetime', 'datetime', 'numbers', 'logging.handlers', 'html.entities', 'html', 'array', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', '_ctypes', 'ctypes._endian', 'ctypes', 'ctypes.wintypes', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', '__future__', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'sysconfig', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'locale', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_win32', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'IPython.lib.security', 'IPython.lib', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.deduplicate', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout.scrollable_pane', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'prompt_toolkit.patch_stdout', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'parso._compatibility', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.file_io', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.common', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.lib.clipboard', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'nturl2path', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'dataclasses', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'ipython_genutils._version', 'ipython_genutils', 'ipython_genutils.encoding', 'ipython_genutils.py3compat', 'ipython_genutils.path', 'imp', 'hmac', 'dateutil._version', 'dateutil', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.control', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'setuptools._distutils', 'distutils.debug', 'distutils.errors', 'distutils.fancy_getopt', 'distutils.dep_util', 'distutils._log', 'distutils.spawn', 'distutils.util', 'distutils.dist', 'distutils.dir_util', 'distutils.file_util', 'zipfile', 'distutils.archive_util', 'distutils.cmd', 'configparser', 'distutils.config', 'distutils.extension', 'distutils.core', '_distutils_hack.override', 'setuptools._deprecation_warning', 'xml.parsers', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'plistlib', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'importlib._common', 'importlib.resources', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources._vendor.more_itertools.more', 'pkg_resources._vendor.more_itertools', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.functools', 'pkg_resources.extern.jaraco.context', 'pkg_resources.extern.jaraco.text', 'pkg_resources._vendor.platformdirs.api', 'pkg_resources._vendor.platformdirs.version', 'pkg_resources._vendor.platformdirs.windows', 'pkg_resources._vendor.platformdirs', 'pkg_resources.extern.platformdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources._vendor.packaging', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.version', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.tags', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources._vendor.pyparsing.util', 'pkg_resources._vendor.pyparsing.unicode', 'pkg_resources._vendor.pyparsing.exceptions', 'pkg_resources._vendor.pyparsing.actions', 'pkg_resources._vendor.pyparsing.results', 'pkg_resources._vendor.pyparsing.core', 'pkg_resources._vendor.pyparsing.helpers', 'pkg_resources._vendor.pyparsing.testing', 'pkg_resources._vendor.pyparsing.common', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'pkg_resources.extern.packaging.requirements', 'encodings.cp437', 'pkg_resources', 'setuptools.version', 'distutils.filelist', 'setuptools.monkey', 'setuptools.extension', 'distutils.log', 'distutils.command', 'setuptools.extern', 'setuptools._vendor', 'setuptools._vendor.packaging.__about__', 'setuptools._vendor.packaging', 'setuptools.extern.packaging', 'setuptools._vendor.ordered_set', 'setuptools.extern.ordered_set', 'setuptools._vendor.more_itertools.recipes', 'setuptools._vendor.more_itertools.more', 'setuptools._vendor.more_itertools', 'setuptools.extern.more_itertools', '_csv', 'csv', 'setuptools._vendor.zipp', 'setuptools._vendor.importlib_metadata._functools', 'setuptools._vendor.importlib_metadata._text', 'setuptools._vendor.importlib_metadata._adapters', 'setuptools._vendor.importlib_metadata._compat', 'setuptools._vendor.importlib_metadata._meta', 'setuptools._vendor.importlib_metadata._collections', 'setuptools._vendor.importlib_metadata._itertools', 'setuptools._vendor.importlib_metadata', 'setuptools.extern.importlib_metadata', 'zipp', 'importlib_metadata._functools', 'importlib_metadata._text', 'importlib_metadata._adapters', 'importlib_metadata._compat', 'importlib_metadata._meta', 'importlib_metadata._collections', 'importlib_metadata._itertools', 'importlib_metadata', 'setuptools._importlib', 'distutils.command.bdist', 'setuptools.command', 'setuptools.windows_support', 'setuptools._vendor.pyparsing.util', 'setuptools._vendor.pyparsing.unicode', 'setuptools._vendor.pyparsing.exceptions', 'setuptools._vendor.pyparsing.actions', 'setuptools._vendor.pyparsing.results', 'setuptools._vendor.pyparsing.core', 'setuptools._vendor.pyparsing.helpers', 'setuptools._vendor.pyparsing.testing', 'setuptools._vendor.pyparsing.common', 'setuptools._vendor.pyparsing', 'setuptools.extern.pyparsing', 'setuptools._vendor.packaging._manylinux', 'setuptools._vendor.packaging._musllinux', 'setuptools.extern.packaging.tags', 'setuptools.extern.packaging._structures', 'setuptools.extern.packaging.version', 'setuptools.extern.packaging.utils', 'setuptools.extern.packaging.specifiers', 'setuptools.extern.packaging.markers', 'setuptools.extern.packaging.requirements', 'setuptools._path', 'setuptools.config.expand', 'setuptools.config.setupcfg', 'setuptools.config', 'setuptools.errors', 'email._header_value_parser', 'email.headerregistry', 'setuptools.config._apply_pyprojecttoml', 'setuptools.config.pyprojecttoml', 'setuptools.discovery', 'setuptools._vendor.jaraco', 'setuptools.extern.jaraco', 'setuptools.extern.jaraco.functools', 'setuptools.extern.jaraco.context', 'setuptools.extern.jaraco.text', 'setuptools._reqs', 'setuptools._itertools', 'setuptools._entry_points', 'setuptools.dist', 'setuptools.py34compat', 'setuptools._imp', 'setuptools.depends', 'setuptools.logging', 'setuptools.msvc', 'unittest.util', 'unittest.result', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.signals', 'unittest.runner', 'unittest.main', 'unittest', 'unittest.mock', 'distutils.ccompiler', 'distutils._msvccompiler', 'setuptools', 'distutils', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.compiler', 'debugpy._version', 'debugpy.common', 'debugpy.common.json', 'debugpy.common.fmt', 'debugpy.common.compat', 'debugpy', 'debugpy._vendored._util', 'debugpy._vendored', '_pydevd_bundle', 'encodings.ascii', 'stringprep', 'encodings.idna', '_pydevd_bundle.pydevd_vm_type', '_pydev_imps', 'xmlrpc', 'gzip', 'xmlrpc.client', 'socketserver', 'http.server', 'xmlrpc.server', '_pydev_imps._pydev_saved_modules', '_pydevd_bundle.pydevd_constants', '_pydev_bundle', '_pydev_runfiles', '_pydevd_frame_eval', 'pydev_ipython', 'pydevd_concurrency_analyser', 'pydevd_plugins', '_pydev_bundle.pydev_log', '_pydev_bundle._pydev_filesystem_encoding', '_pydevd_bundle.pydevd_comm_constants', 'pydevd_file_utils', '_pydev_imps._pydev_execfile', '_pydevd_bundle.pydevd_exec2', '_pydev_bundle.pydev_imports', '_pydev_bundle.pydev_is_thread_alive', '_pydev_bundle.pydev_override', 'pydevd_plugins.extensions', '_pydevd_bundle.pydevd_extension_utils', '_pydevd_bundle.pydevd_frame_utils', '_pydevd_bundle.pydevd_filtering', '_pydevd_bundle.pydevd_io', '_pydevd_bundle.pydevd_utils', '_pydev_bundle._pydev_tipper_common', '_pydev_bundle._pydev_imports_tipper', '_pydev_bundle._pydev_calltip_util', '_pydevd_bundle.pydevd_safe_repr', '_pydevd_bundle.pydevd_resolver', '_pydevd_bundle.pydevd_extension_api', '_pydevd_bundle.pydevd_xml', '_pydevd_bundle.pydevd_dont_trace', '_pydevd_frame_eval.vendored', '_pydevd_frame_eval.vendored.bytecode.flags', '_pydevd_frame_eval.vendored.bytecode.instr', '_pydevd_frame_eval.vendored.bytecode.bytecode', '_pydevd_frame_eval.vendored.bytecode.concrete', '_pydevd_frame_eval.vendored.bytecode.cfg', '_pydevd_frame_eval.vendored.bytecode', '_pydevd_bundle.pydevd_bytecode_utils', '_pydevd_bundle.pydevd_cython', '_pydevd_bundle.pydevd_cython_wrapper', '_pydevd_bundle.pydevd_additional_thread_info', '_pydevd_bundle.pydevd_thread_lifecycle', '_pydevd_bundle.pydevd_save_locals', '_pydevd_bundle.pydevd_defaults', '_pydev_bundle.pydev_monkey', 'pydevd_tracing', '_pydevd_bundle.pydevd_daemon_thread', '_pydevd_bundle.pydevd_timeout', '_pydevd_bundle.pydevd_vars', '_pydev_bundle.pydev_console_utils', '_pydevd_bundle.pydevd_import_class', '_pydevd_bundle.pydevd_breakpoints', '_pydevd_bundle.pydevd_custom_frames', '_pydevd_bundle.pydevd_dont_trace_files', '_pydevd_bundle.pydevd_net_command', '_pydev_bundle.pydev_umd', 'pydevconsole', '_pydev_bundle._pydev_completer', '_pydevd_bundle.pydevd_net_command_factory_xml', '_pydevd_bundle.pydevd_frame', '_pydevd_bundle.pydevd_additional_thread_info_regular', '_pydevd_bundle.pydevd_trace_dispatch', '_pydevd_frame_eval.pydevd_frame_eval_main', '_pydevd_bundle.pydevd_source_mapping', 'pydevd_concurrency_analyser.pydevd_thread_wrappers', 'pydevd_concurrency_analyser.pydevd_concurrency_logger', '_pydevd_bundle._debug_adapter', '_pydevd_bundle._debug_adapter.pydevd_schema_log', '_pydevd_bundle._debug_adapter.pydevd_base_schema', '_pydevd_bundle._debug_adapter.pydevd_schema', '_pydevd_bundle.pydevd_reload', '_pydev_bundle.fsnotify', '_pydevd_bundle.pydevd_console', '_pydevd_bundle.pydevd_comm', '_pydevd_bundle.pydevd_net_command_factory_json', '_pydevd_bundle.pydevd_collect_bytecode_info', '_pydevd_bundle.pydevd_api', '_pydevd_bundle.pydevd_json_debug_options', '_pydevd_bundle.pydevd_process_net_command_json', '_pydevd_bundle.pydevd_traceproperty', '_pydevd_bundle.pydevd_process_net_command', '_pydevd_bundle.pydevd_suspended_frames', '_pydevd_bundle.pydevd_trace_api', 'pydevd_plugins.django_debug', 'pydevd_plugins.jinja2_debug', '_pydevd_bundle.pydevd_plugin_utils', 'pydevd_plugins.extensions.types', 'pydevd_plugins.extensions.types.pydevd_helpers', 'pydevd_plugins.extensions.types.pydevd_plugin_numpy_types', 'pydevd_plugins.extensions.types.pydevd_plugins_django_form_str', 'pydevd', 'debugpy._vendored.force_pydevd', 'debugpy.server', 'debugpy.adapter', 'debugpy.common.timestamp', 'debugpy.common.util', 'debugpy.common.log', 'debugpy.common.sockets', 'debugpy.server.api', 'ipykernel.debugger', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'IPython.core.completerlib', 'storemagic', 'pyforest._importable', 'pyforest.user_specific_imports', 'pyforest._imports', 'pyforest.utils', 'pyforest', 'logging.config', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.types', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_require', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'mkl._mklinit', 'mkl._py_mkl_service', 'mkl', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._add_newdocs_scalars', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'mmap', 'pandas._typing', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.tzconversion', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.tslibs', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.hashtable', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._libs', 'pandas.util._decorators', 'pandas.core', 'pandas.core.util', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas._libs.hashing', 'pandas.core.dtypes', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.util.hashing', 'pandas.util', 'pandas.util.version', 'pandas.compat.numpy', 'pyarrow._generated_version', '_cython_0_29_28', 'cloudpickle.compat', 'typing_extensions', 'cloudpickle.cloudpickle', 'cloudpickle.cloudpickle_fast', 'cloudpickle', 'pyarrow.util', 'pyarrow.lib', 'pyarrow._hdfsio', 'pyarrow.filesystem', 'pyarrow.hdfs', 'pyarrow.ipc', 'pyarrow.serialization', 'pyarrow.types', 'pyarrow', 'pandas.compat.pyarrow', 'pandas.compat', 'pandas.core.config_init', 'pandas.core.dtypes.missing', 'pandas.util._exceptions', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.array_algos', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.array_algos.take', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.roperator', 'pandas._libs.ops', 'pandas.core.computation', 'numexpr.__config__', 'numexpr.interpreter', 'numexpr.expressions', 'numexpr.utils', 'numexpr.necompiler', 'numexpr.version', 'numexpr', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.core.sorting', 'pandas.core.arrays.base', 'bottleneck.reduce', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.move', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.slow', 'bottleneck.benchmark', 'bottleneck.benchmark.autotimeit', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'bottleneck._pytesttester', 'bottleneck._version', 'bottleneck', 'pandas.core.nanops', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', 'pandas._libs.arrays', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.core.arrays.numeric', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.tseries.offsets', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.floating', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.dtypes.concat', 'pandas.core.array_algos.putmask', 'pandas.core.indexes.frozen', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pyarrow._compute', 'pyarrow._compute_docstrings', 'pyarrow.vendored', 'pyarrow.vendored.docscrape', 'pyarrow.compute', 'pandas.core.arrays.string_arrow', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.flags', 'pandas._libs.reduction', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.times', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas.core.aggregation', 'pandas.core.apply', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas.core.reshape', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.quantile', 'pandas.core.array_algos.replace', 'pandas.core.internals.blocks', 'pandas.core.internals.api', 'pandas.core.internals.base', 'pandas.core.internals.array_manager', 'pandas.core.internals.ops', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.core.internals', 'pandas.core.reshape.concat', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.describe', 'pandas.core.internals.construction', 'pandas.core.shared_docs', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.doc', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.online', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.generic', 'pandas.core.reshape.util', 'pandas.core.reshape.melt', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas.core.series', 'pandas.io.formats.info', 'pandas.core.frame', 'pandas.core.groupby.base', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.engines', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers.base_parser', 'pandas.io.parsers.c_parser_wrapper', 'pandas.io.parsers.python_parser', 'pandas.io.parsers.readers', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.formats.excel', 'pandas.io.excel._odswriter', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.xml', 'pandas.io.api', 'pandas.util._tester', 'pandas._testing._random', 'pandas._testing.contexts', 'pandas._testing._io', 'pandas._testing._warnings', 'cmath', 'pandas._libs.testing', 'pandas._testing.asserters', 'pandas._testing.compat', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'matplotlib', 'matplotlib._api.deprecation', 'matplotlib._api', 'matplotlib._c_internal_utils', 'matplotlib.cbook', 'matplotlib.docstring', 'PIL._version', 'PIL', 'defusedxml.common', 'defusedxml', 'xml.etree', 'xml.etree.ElementPath', '_elementtree', 'xml.etree.ElementTree', 'defusedxml.ElementTree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'matplotlib._animation_data', 'matplotlib.animation', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImagePalette', 'PIL.ImageSequence', 'PIL.PngImagePlugin', 'matplotlib._path', 'matplotlib.bezier', 'matplotlib.path', 'matplotlib.transforms', 'matplotlib.ticker', 'matplotlib.scale', 'matplotlib._color_data', 'matplotlib.colors', 'pyparsing.util', 'pyparsing.unicode', 'pyparsing.exceptions', 'pyparsing.actions', 'pyparsing.results', 'pyparsing.core', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib._enums', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver', 'dateutil.rrule', 'matplotlib.units', 'matplotlib.dates']
2023-02-02 01:01:50,486 [21600] DEBUG    matplotlib:224: [JupyterRequire] CACHEDIR=C:\Users\sunny\.matplotlib
2023-02-02 01:01:50,489 [21600] DEBUG    matplotlib.font_manager:1439: [JupyterRequire] Using fontManager instance from C:\Users\sunny\.matplotlib\fontlist-v330.json
2023-02-02 01:01:50,593 [21600] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-02-02 01:01:50,596 [21600] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-02-02 01:01:51,422 [21600] DEBUG    matplotlib.colorbar:620: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x000002134E99DB50>
2023-02-02 01:01:51,423 [21600] DEBUG    matplotlib.colorbar:665: [JupyterRequire] Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x000002134E99DB50> on colorbar
2023-02-02 01:01:51,423 [21600] DEBUG    matplotlib.colorbar:794: [JupyterRequire] Setting pcolormesh
2023-02-02 01:01:51,447 [21600] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2023-02-02 01:01:51,447 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,447 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,447 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,448 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-02-02 01:01:51,448 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,448 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,448 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-02-02 01:01:51,448 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,448 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,448 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,448 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,449 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,449 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,449 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-02-02 01:01:51,449 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,449 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-02-02 01:01:51,449 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,449 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,449 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-02-02 01:01:51,450 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,450 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-02-02 01:01:51,450 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-02-02 01:01:51,450 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,450 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,450 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,450 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,450 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,451 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-02-02 01:01:51,451 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,451 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,451 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,451 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,451 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,451 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-02-02 01:01:51,451 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,452 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,452 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,452 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,452 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,452 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,452 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,452 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2023-02-02 01:01:51,452 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,453 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,453 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,453 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2023-02-02 01:01:51,453 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,453 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,453 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,453 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2023-02-02 01:01:51,453 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,454 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,454 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,454 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,454 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,454 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,454 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,454 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,454 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,455 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2023-02-02 01:01:51,455 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2023-02-02 01:01:51,455 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2023-02-02 01:01:51,455 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2023-02-02 01:01:51,455 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,455 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,455 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,455 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2023-02-02 01:01:51,456 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,456 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,456 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,456 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2023-02-02 01:01:51,456 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,456 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2023-02-02 01:01:51,456 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sitka' (SitkaVF.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,456 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,457 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2023-02-02 01:01:51,457 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,457 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,457 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,457 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,457 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2023-02-02 01:01:51,457 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,457 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,458 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,458 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,458 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,458 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2023-02-02 01:01:51,458 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,458 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,458 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,458 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,459 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2023-02-02 01:01:51,459 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,459 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,459 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,459 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,459 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,459 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,459 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,460 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,460 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,460 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,460 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,460 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,460 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,460 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,460 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,461 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2023-02-02 01:01:51,461 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,461 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,461 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,461 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,461 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,461 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2023-02-02 01:01:51,461 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,462 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2023-02-02 01:01:51,462 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2023-02-02 01:01:51,462 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,462 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,462 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2023-02-02 01:01:51,462 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,462 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,462 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2023-02-02 01:01:51,463 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,463 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2023-02-02 01:01:51,463 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,463 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,463 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,463 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2023-02-02 01:01:51,463 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2023-02-02 01:01:51,463 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2023-02-02 01:01:51,463 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2023-02-02 01:01:51,464 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,464 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,464 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,464 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,464 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,464 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,464 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,465 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,465 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,465 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2023-02-02 01:01:51,465 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,465 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2023-02-02 01:01:51,465 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,465 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,465 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,466 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,466 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,466 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2023-02-02 01:01:51,466 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,466 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,466 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2023-02-02 01:01:51,466 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2023-02-02 01:01:51,466 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Variable' (SegUIVar.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,467 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,467 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,467 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,467 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,467 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,467 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,467 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,467 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,468 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,468 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,468 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,468 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,468 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2023-02-02 01:01:51,468 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2023-02-02 01:01:51,468 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2023-02-02 01:01:51,468 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,469 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2023-02-02 01:01:51,469 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,469 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,469 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,469 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,469 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2023-02-02 01:01:51,469 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2023-02-02 01:01:51,469 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2023-02-02 01:01:51,470 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,470 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,470 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,470 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2023-02-02 01:01:51,470 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2023-02-02 01:01:51,470 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,470 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,470 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2023-02-02 01:01:51,471 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,471 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,471 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2023-02-02 01:01:51,471 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,471 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,471 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,471 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2023-02-02 01:01:51,471 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,472 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,472 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,472 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2023-02-02 01:01:51,472 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,472 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2023-02-02 01:01:51,472 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,472 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2023-02-02 01:01:51,472 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,473 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,473 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,473 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,473 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,473 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,473 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2023-02-02 01:01:51,473 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2023-02-02 01:01:51,473 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2023-02-02 01:01:51,473 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2023-02-02 01:01:51,474 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2023-02-02 01:01:51,474 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,474 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,474 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,474 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,474 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,474 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,474 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,475 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,475 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,475 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,475 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,475 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,475 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,475 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,475 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,476 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,476 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2023-02-02 01:01:51,476 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2023-02-02 01:01:51,476 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,476 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,476 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2023-02-02 01:01:51,476 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,476 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,477 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,477 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2023-02-02 01:01:51,477 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,477 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2023-02-02 01:01:51,477 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,477 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,477 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,477 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,478 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,478 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,478 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,478 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,478 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2023-02-02 01:01:51,478 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,478 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,478 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,479 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,479 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,479 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sitka' (SitkaVF-Italic.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,479 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,479 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2023-02-02 01:01:51,479 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,479 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,479 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,480 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2023-02-02 01:01:51,480 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,480 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,480 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,480 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,480 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,480 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2023-02-02 01:01:51,480 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2023-02-02 01:01:51,480 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,481 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,481 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,481 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,481 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,481 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,481 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2023-02-02 01:01:51,481 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,481 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2023-02-02 01:01:51,482 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,482 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,482 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2023-02-02 01:01:51,482 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,482 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,482 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,482 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,482 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,483 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2023-02-02 01:01:51,483 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2023-02-02 01:01:51,483 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2023-02-02 01:01:51,483 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,483 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2023-02-02 01:01:51,483 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2023-02-02 01:01:51,483 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,483 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,484 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2023-02-02 01:01:51,484 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,484 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2023-02-02 01:01:51,484 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,484 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,484 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,484 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2023-02-02 01:01:51,484 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2023-02-02 01:01:51,484 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,485 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,485 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,485 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,485 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,486 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2023-02-02 01:01:51,486 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2023-02-02 01:01:51,486 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,486 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,486 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2023-02-02 01:01:51,486 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,486 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2023-02-02 01:01:51,486 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2023-02-02 01:01:51,487 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2023-02-02 01:01:51,487 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,487 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,487 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2023-02-02 01:01:51,487 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,487 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,487 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,487 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,488 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,488 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,488 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,488 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,488 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,488 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,488 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,488 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,489 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2023-02-02 01:01:51,489 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,489 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2023-02-02 01:01:51,489 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2023-02-02 01:01:51,489 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2023-02-02 01:01:51,489 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2023-02-02 01:01:51,489 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2023-02-02 01:01:51,490 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,490 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,490 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,490 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,490 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,490 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,490 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,490 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,490 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,491 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,491 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,491 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,491 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,491 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,491 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,491 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,491 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2023-02-02 01:01:51,492 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,492 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2023-02-02 01:01:51,492 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2023-02-02 01:01:51,492 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2023-02-02 01:01:51,492 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2023-02-02 01:01:51,492 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,492 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,492 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,493 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,493 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,493 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2023-02-02 01:01:51,493 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,493 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,493 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,493 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2023-02-02 01:01:51,493 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,494 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:01:51,494 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2023-02-02 01:01:51,494 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,494 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2023-02-02 01:01:51,494 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2023-02-02 01:01:51,494 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:01:51,494 [21600] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Fluent Icons' (SegoeIcons.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:01:51,494 [21600] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2023-02-02 01:03:01,471 [21600] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\anaconda3\lib\site-packages\sklearn\base.py:409: UserWarning: X does not have valid feature names, but StandardScaler was fitted with feature names
  warnings.warn(

2023-02-02 01:03:15,401 [21600] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\anaconda3\lib\site-packages\sklearn\base.py:402: UserWarning: X has feature names, but StandardScaler was fitted without feature names
  warnings.warn(

2023-02-02 01:03:15,404 [21600] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\anaconda3\lib\site-packages\sklearn\base.py:402: UserWarning: X has feature names, but StandardScaler was fitted without feature names
  warnings.warn(

2023-02-02 01:04:21,620 [12688] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-02 01:04:21,620 [12688] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-02 01:04:21,620 [12688] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-02 01:04:21,623 [12688] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-02 01:04:21,624 [12688] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-02 01:04:21,625 [12688] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-02 01:04:54,351 [12688] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\2and3\builtins.pyi
2023-02-02 01:04:54,385 [12688] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\sys.pyi
2023-02-02 01:05:12,591 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:05:12,591 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 2
2023-02-02 01:05:12,592 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2023-02-02 01:05:12,592 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2023-02-02 01:05:12,592 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:2] new[2:2]
2023-02-02 01:05:12,593 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:05:12,620 [12688] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\__init__.py
2023-02-02 01:06:25,019 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:06:25,020 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 1
2023-02-02 01:06:25,020 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:2] new[1:1]
2023-02-02 01:06:25,022 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:06:25,022 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:06:32,550 [12688] DEBUG    tensorflow:32: [JupyterRequire] Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2023-02-02 01:06:33,232 [12688] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 7 to 5
2023-02-02 01:06:33,232 [12688] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 5 to 7
2023-02-02 01:06:33,232 [12688] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 7 to 5
2023-02-02 01:06:33,232 [12688] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 5 to 7
2023-02-02 01:11:52,105 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:11:52,106 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:11:52,106 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:11:52,108 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:11:52,109 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:11:54,878 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:11:54,879 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:11:54,879 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:11:54,880 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:11:54,880 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:11:54,894 [12688] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\__init__.py
2023-02-02 01:11:55,492 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:11:55,493 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:11:55,493 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:11:55,493 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:11:55,493 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:11:57,890 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:11:57,891 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:11:57,891 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:11:57,891 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:11:57,891 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:12:00,568 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:12:00,569 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:12:00,570 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:12:00,570 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:12:00,571 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:12:03,878 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:12:03,878 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 2
2023-02-02 01:12:03,878 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:2]
2023-02-02 01:12:03,879 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2023-02-02 01:12:03,879 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:12:07,669 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:12:07,670 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 2
2023-02-02 01:12:07,670 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2023-02-02 01:12:07,670 [12688] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2023-02-02 01:12:07,671 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:2] new[2:2]
2023-02-02 01:12:07,671 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 2 (to 1 in part parser)
2023-02-02 01:12:07,671 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:12:09,897 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:12:09,898 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 2
2023-02-02 01:12:09,898 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2023-02-02 01:12:09,898 [12688] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2023-02-02 01:12:09,898 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:2] new[2:2]
2023-02-02 01:12:09,899 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 2 (to 1 in part parser)
2023-02-02 01:12:09,899 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:12:12,610 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:12:12,611 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 2
2023-02-02 01:12:12,611 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2023-02-02 01:12:12,611 [12688] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2023-02-02 01:12:12,611 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:2] new[2:2]
2023-02-02 01:12:12,611 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 2 (to 1 in part parser)
2023-02-02 01:12:12,611 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:12:14,924 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:12:14,924 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 2
2023-02-02 01:12:14,926 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2023-02-02 01:12:14,926 [12688] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2023-02-02 01:12:14,926 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:2] new[2:2]
2023-02-02 01:12:14,926 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 2 (to 1 in part parser)
2023-02-02 01:12:14,926 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:12:22,763 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:12:22,764 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 1
2023-02-02 01:12:22,764 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:2] new[1:1]
2023-02-02 01:12:22,765 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:12:22,765 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:12:28,596 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:12:28,597 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 3
2023-02-02 01:12:28,597 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:3]
2023-02-02 01:12:28,598 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-02-02 01:12:28,598 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:12:34,066 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:12:34,067 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 3
2023-02-02 01:12:34,067 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2023-02-02 01:12:34,067 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-02-02 01:12:34,068 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:3]
2023-02-02 01:12:34,068 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:12:34,078 [12688] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\layers\core\dense.py
2023-02-02 01:12:42,542 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:12:42,542 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 3
2023-02-02 01:12:42,543 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2023-02-02 01:12:42,543 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-02-02 01:12:42,545 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:3]
2023-02-02 01:12:42,545 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:12:50,560 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:12:50,561 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 1
2023-02-02 01:12:50,561 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:3] new[1:1]
2023-02-02 01:12:50,562 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:12:50,562 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:14:37,678 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:14:37,678 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:14:37,678 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:14:37,680 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:14:37,680 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:14:37,692 [12688] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\sequential.py
2023-02-02 01:14:37,701 [12688] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\__init__.py
2023-02-02 01:14:37,706 [12688] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\__init__.py
2023-02-02 01:14:37,743 [12688] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\functional.py
2023-02-02 01:14:37,810 [12688] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\training.py
2023-02-02 01:14:38,102 [12688] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\python\__init__.py
2023-02-02 01:14:38,108 [12688] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\python\util\__init__.py
2023-02-02 01:14:38,126 [12688] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\python\util\tf_export.py
2023-02-02 01:14:38,148 [12688] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\functools.py
2023-02-02 01:14:38,155 [12688] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\functools.pyi
2023-02-02 01:14:38,197 [12688] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\base_layer.py
2023-02-02 01:14:38,220 [12688] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\utils\__init__.py
2023-02-02 01:14:38,229 [12688] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\utils\version_utils.py
2023-02-02 01:14:45,827 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:14:45,829 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:14:45,829 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:14:45,829 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:14:45,830 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:15:02,601 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:15:02,602 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:15:02,602 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:15:02,603 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:15:02,603 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:16:32,904 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:16:32,904 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:16:32,905 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:16:32,905 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:16:32,905 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:16:42,507 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:16:42,507 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 3
2023-02-02 01:16:42,508 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:3]
2023-02-02 01:16:42,508 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-02-02 01:16:42,508 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:16:47,871 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:16:47,871 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 4
2023-02-02 01:16:47,872 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2023-02-02 01:16:47,872 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 4 (to 3 in part parser)
2023-02-02 01:16:47,872 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:4]
2023-02-02 01:16:47,872 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:16:54,279 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:16:54,280 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 4; new: 5
2023-02-02 01:16:54,281 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:3] new[1:3]
2023-02-02 01:16:54,282 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 5 (to 4 in part parser)
2023-02-02 01:16:54,282 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[4:4] new[4:5]
2023-02-02 01:16:54,282 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:17:26,259 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:17:26,259 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 5; new: 7
2023-02-02 01:17:26,259 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:4] new[1:4]
2023-02-02 01:17:26,261 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 7 (to 6 in part parser)
2023-02-02 01:17:26,261 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[5:5] new[5:7]
2023-02-02 01:17:26,261 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:17:36,133 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:17:36,133 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 7; new: 7
2023-02-02 01:17:36,134 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:6] new[1:6]
2023-02-02 01:17:36,135 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 7 (to 6 in part parser)
2023-02-02 01:17:36,135 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[7:7] new[7:7]
2023-02-02 01:17:36,135 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:17:40,089 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:17:40,091 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 7; new: 7
2023-02-02 01:17:40,091 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:6] new[1:6]
2023-02-02 01:17:40,092 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 7 (to 6 in part parser)
2023-02-02 01:17:40,092 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[7:7] new[7:7]
2023-02-02 01:17:40,092 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:17:50,435 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:17:50,435 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 7; new: 8
2023-02-02 01:17:50,435 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:6] new[1:6]
2023-02-02 01:17:50,436 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 8 (to 7 in part parser)
2023-02-02 01:17:50,436 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[7:7] new[7:8]
2023-02-02 01:17:50,436 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:17:54,011 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:17:54,011 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 8; new: 8
2023-02-02 01:17:54,012 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:7] new[1:7]
2023-02-02 01:17:54,013 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 8 (to 7 in part parser)
2023-02-02 01:17:54,013 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[8:8] new[8:8]
2023-02-02 01:17:54,013 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:17:54,119 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:17:54,119 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 8; new: 8
2023-02-02 01:17:54,120 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:7] new[1:7]
2023-02-02 01:17:54,121 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 8 (to 7 in part parser)
2023-02-02 01:17:54,121 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[8:8] new[8:8]
2023-02-02 01:17:54,121 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:17:54,462 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:17:54,462 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 8; new: 8
2023-02-02 01:17:54,462 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:7] new[1:7]
2023-02-02 01:17:54,464 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 8 (to 7 in part parser)
2023-02-02 01:17:54,464 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[8:8] new[8:8]
2023-02-02 01:17:54,464 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:18:24,907 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:18:24,908 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 8; new: 1
2023-02-02 01:18:24,908 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:8] new[1:1]
2023-02-02 01:18:24,908 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:18:24,909 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:18:54,777 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:18:54,778 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 10
2023-02-02 01:18:54,778 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:10]
2023-02-02 01:18:54,780 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 10 (to 9 in part parser)
2023-02-02 01:18:54,780 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:18:55,345 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:18:55,345 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 10; new: 10
2023-02-02 01:18:55,345 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:9] new[1:9]
2023-02-02 01:18:55,346 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 10 (to 9 in part parser)
2023-02-02 01:18:55,347 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[10:10] new[10:10]
2023-02-02 01:18:55,347 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:22:17,104 [12688] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-02-02 01:22:17,104 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,104 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,104 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,104 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-02-02 01:22:17,104 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,104 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,104 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-02-02 01:22:17,104 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,104 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,104 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,104 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,104 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,104 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sitka' (SitkaVF.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,119 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Variable' (SegUIVar.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sitka' (SitkaVF-Italic.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,135 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Fluent Icons' (SegoeIcons.ttf) normal normal 400 normal>) = 10.05
2023-02-02 01:22:17,151 [12688] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2023-02-02 01:24:25,507 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:24:25,508 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 10; new: 1
2023-02-02 01:24:25,508 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:10] new[1:1]
2023-02-02 01:24:25,508 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:24:25,509 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:24:32,229 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:24:32,229 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 3
2023-02-02 01:24:32,229 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:3]
2023-02-02 01:24:32,230 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-02-02 01:24:32,230 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:24:39,913 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:24:39,913 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 3
2023-02-02 01:24:39,913 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2023-02-02 01:24:39,914 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-02-02 01:24:39,914 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:3]
2023-02-02 01:24:39,914 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:24:46,562 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:24:46,562 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 3
2023-02-02 01:24:46,563 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2023-02-02 01:24:46,563 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-02-02 01:24:46,563 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:3]
2023-02-02 01:24:46,564 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:24:56,735 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:24:56,736 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 4
2023-02-02 01:24:56,736 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2023-02-02 01:24:56,737 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 4 (to 3 in part parser)
2023-02-02 01:24:56,737 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:4]
2023-02-02 01:24:56,738 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:25:02,357 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:25:02,357 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 4; new: 4
2023-02-02 01:25:02,358 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:3] new[1:3]
2023-02-02 01:25:02,358 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 4 (to 3 in part parser)
2023-02-02 01:25:02,359 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[4:4] new[4:4]
2023-02-02 01:25:02,359 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:25:49,211 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:25:49,212 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 4; new: 1
2023-02-02 01:25:49,212 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:4] new[1:1]
2023-02-02 01:25:49,212 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:25:49,212 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:25:52,915 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:25:52,916 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:25:52,916 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:25:52,917 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:25:52,917 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:25:52,990 [12688] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\utils\traceback_utils.py
2023-02-02 01:25:53,021 [12688] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\typing.py
2023-02-02 01:25:53,035 [12688] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\typing.pyi
2023-02-02 01:26:21,948 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:26:21,948 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:26:21,949 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:26:21,949 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:26:21,949 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:26:23,364 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:26:23,364 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:26:23,365 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:26:23,365 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:26:23,365 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:26:25,975 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:26:25,977 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:26:25,977 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:26:25,977 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:26:25,977 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:26:27,164 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:26:27,165 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:26:27,165 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:26:27,166 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:26:27,166 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:26:27,565 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:26:27,566 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:26:27,567 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:26:27,567 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:26:27,567 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:26:30,438 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:26:30,438 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:26:30,438 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:26:30,439 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:26:30,440 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:26:31,167 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:26:31,169 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:26:31,169 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:26:31,169 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:26:31,169 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:26:33,671 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:26:33,672 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:26:33,672 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:26:33,672 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:26:33,672 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:26:35,275 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:26:35,275 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:26:35,275 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:26:35,276 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:26:35,276 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:26:35,286 [12688] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\api\_v2\keras\__init__.py
2023-02-02 01:26:38,025 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:26:38,026 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:26:38,026 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:26:38,028 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:26:38,028 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:26:42,148 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:26:42,149 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:26:42,149 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:26:42,149 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:26:42,149 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:26:43,707 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:26:43,708 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:26:43,708 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:26:43,708 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:26:43,709 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:26:45,779 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:26:45,779 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:26:45,780 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:26:45,780 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:26:45,780 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:27:29,975 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:27:29,975 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:27:29,975 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:27:29,976 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:27:29,976 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:27:37,631 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:27:37,633 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:27:37,633 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:27:37,634 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:27:37,634 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:28:15,919 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:28:15,919 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:28:15,919 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:28:15,920 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:28:15,920 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:29:49,864 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:29:49,864 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:29:49,864 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:29:49,865 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:29:49,865 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:29:51,987 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:29:51,988 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 2
2023-02-02 01:29:51,988 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:2]
2023-02-02 01:29:51,990 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2023-02-02 01:29:51,990 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:32:23,930 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:32:23,931 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 1
2023-02-02 01:32:23,932 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:2] new[1:1]
2023-02-02 01:32:23,932 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:32:23,932 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:32:28,939 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:32:28,939 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:32:28,939 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:32:28,940 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:32:28,940 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:32:45,884 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:32:45,884 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 2
2023-02-02 01:32:45,885 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:2]
2023-02-02 01:32:45,885 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2023-02-02 01:32:45,885 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:32:51,644 [12688] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:32:51,644 [12688] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 3
2023-02-02 01:32:51,645 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2023-02-02 01:32:51,645 [12688] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2023-02-02 01:32:51,645 [12688] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:2] new[2:3]
2023-02-02 01:32:51,645 [12688] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 3 (to 2 in part parser)
2023-02-02 01:32:51,646 [12688] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:36:26,309 [8084] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-02 01:36:26,309 [8084] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-02 01:36:26,309 [8084] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-02 01:36:26,311 [8084] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-02 01:36:26,311 [8084] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-02 01:36:26,312 [8084] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-02 01:36:36,351 [8084] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\2and3\builtins.pyi
2023-02-02 01:36:36,387 [8084] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\sys.pyi
2023-02-02 01:36:40,900 [8084] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:36:40,900 [8084] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:36:40,900 [8084] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:36:40,902 [8084] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:36:40,902 [8084] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:36:40,933 [8084] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\__init__.py
2023-02-02 01:39:28,390 [18448] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-02 01:39:28,390 [18448] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-02 01:39:28,391 [18448] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-02 01:39:28,392 [18448] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-02 01:39:28,393 [18448] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-02 01:39:28,393 [18448] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-02 01:39:41,177 [18448] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\2and3\builtins.pyi
2023-02-02 01:39:41,214 [18448] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\sys.pyi
2023-02-02 01:39:44,350 [18448] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:39:44,350 [18448] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:39:44,351 [18448] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:39:44,351 [18448] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:39:44,351 [18448] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:39:47,312 [18448] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\__init__.py
2023-02-02 01:39:47,319 [18448] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\python\__init__.py
2023-02-02 01:39:47,324 [18448] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\python\util\__init__.py
2023-02-02 01:39:47,335 [18448] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\python\util\tf_export.py
2023-02-02 01:39:47,351 [18448] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\functools.py
2023-02-02 01:39:47,358 [18448] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\functools.pyi
2023-02-02 01:39:49,166 [18448] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:39:49,166 [18448] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:39:49,168 [18448] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:39:49,168 [18448] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:39:49,168 [18448] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:40:07,615 [18448] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:40:07,616 [18448] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:40:07,616 [18448] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:40:07,616 [18448] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:40:07,617 [18448] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:40:23,647 [18448] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:40:23,648 [18448] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:40:23,648 [18448] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:40:23,649 [18448] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:40:23,649 [18448] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:40:25,436 [18448] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:40:25,437 [18448] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:40:25,438 [18448] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:40:25,438 [18448] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:40:25,438 [18448] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:40:31,976 [18448] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:40:31,977 [18448] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 2
2023-02-02 01:40:31,977 [18448] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:2]
2023-02-02 01:40:31,978 [18448] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2023-02-02 01:40:31,978 [18448] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:40:34,531 [18448] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:40:34,531 [18448] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 2
2023-02-02 01:40:34,532 [18448] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2023-02-02 01:40:34,532 [18448] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2023-02-02 01:40:34,532 [18448] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:2] new[2:2]
2023-02-02 01:40:34,532 [18448] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 2 (to 1 in part parser)
2023-02-02 01:40:34,532 [18448] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:45:08,282 [23460] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-02 01:45:08,282 [23460] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-02 01:45:08,282 [23460] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-02 01:45:08,284 [23460] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-02 01:45:08,285 [23460] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-02 01:45:08,285 [23460] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-02 01:45:34,906 [23460] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\matplotlib\pyplot.py
2023-02-02 01:45:35,085 [23460] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\2and3\builtins.pyi
2023-02-02 01:45:35,120 [23460] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\sys.pyi
2023-02-02 01:46:13,954 [23460] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:46:13,954 [23460] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 1
2023-02-02 01:46:13,955 [23460] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:2] new[1:1]
2023-02-02 01:46:13,955 [23460] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:46:13,955 [23460] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:46:13,967 [23460] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\sequential.py
2023-02-02 01:46:13,974 [23460] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\__init__.py
2023-02-02 01:46:13,978 [23460] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\__init__.py
2023-02-02 01:46:14,001 [23460] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\functional.py
2023-02-02 01:46:14,041 [23460] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\training.py
2023-02-02 01:46:14,064 [23460] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\__init__.py
2023-02-02 01:46:14,071 [23460] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\python\__init__.py
2023-02-02 01:46:14,075 [23460] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\python\util\__init__.py
2023-02-02 01:46:14,086 [23460] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\python\util\tf_export.py
2023-02-02 01:46:14,104 [23460] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\functools.py
2023-02-02 01:46:14,110 [23460] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\functools.pyi
2023-02-02 01:46:14,147 [23460] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\base_layer.py
2023-02-02 01:46:14,202 [23460] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\utils\__init__.py
2023-02-02 01:46:14,212 [23460] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\utils\version_utils.py
2023-02-02 01:46:19,071 [23460] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:46:19,072 [23460] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:46:19,072 [23460] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:46:19,073 [23460] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:46:19,073 [23460] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:46:19,150 [23460] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\utils\traceback_utils.py
2023-02-02 01:46:19,178 [23460] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\typing.py
2023-02-02 01:46:19,192 [23460] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\typing.pyi
2023-02-02 01:46:28,784 [23460] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:46:28,784 [23460] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:46:28,784 [23460] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:46:28,784 [23460] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:46:28,786 [23460] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:46:30,646 [23460] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:46:30,647 [23460] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:46:30,647 [23460] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:46:30,647 [23460] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:46:30,647 [23460] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:47:53,997 [23460] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 01:47:53,997 [23460] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 01:47:53,997 [23460] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 01:47:53,999 [23460] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 01:47:53,999 [23460] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 01:49:31,373 [23460] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-02 01:49:31,375 [23460] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-02 01:49:31,376 [23460] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-02 01:49:31,381 [23460] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-02 01:49:31,383 [23460] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-02 01:49:31,385 [23460] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-02 01:49:31,564 [18688] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-02 01:49:31,578 [18688] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-02 01:49:31,580 [18688] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-02 01:49:31,615 [18688] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-02 01:49:31,617 [18688] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-02 01:49:31,618 [18688] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-02 10:50:43,884 [18688] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-02 10:50:43,884 [18688] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-02 10:50:43,884 [18688] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-02 10:50:43,916 [18688] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-02 10:50:43,922 [18688] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-02 10:50:43,924 [18688] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-02 10:50:43,958 [23460] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-02 10:50:43,959 [23460] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-02 10:50:43,959 [23460] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-02 10:50:43,964 [23460] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-02 10:50:43,966 [23460] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-02 10:50:43,967 [23460] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-02 11:07:39,086 [23460] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 11:07:39,099 [23460] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 11:07:39,099 [23460] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 11:07:39,117 [23460] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 11:07:39,117 [23460] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 11:07:40,091 [23460] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 11:07:40,091 [23460] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 11:07:40,093 [23460] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 11:07:40,093 [23460] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 11:07:40,093 [23460] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 11:07:57,392 [23460] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 11:07:57,393 [23460] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 11:07:57,393 [23460] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 11:07:57,394 [23460] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 11:07:57,394 [23460] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 11:07:57,428 [23460] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\numpy\__init__.py
2023-02-02 11:09:34,609 [23460] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 11:09:34,610 [23460] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 11:09:34,610 [23460] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 11:09:34,610 [23460] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 11:09:34,610 [23460] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 13:10:40,725 [24164] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-02 13:10:40,725 [24164] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-02 13:10:40,725 [24164] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-02 13:10:40,727 [24164] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-02 13:10:40,728 [24164] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-02 13:10:40,728 [24164] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-02 13:12:33,745 [13768] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-02 13:12:33,746 [13768] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-02 13:12:33,746 [13768] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-02 13:12:33,750 [13768] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-02 13:12:33,751 [13768] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-02 13:12:33,753 [13768] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-02 13:22:52,322 [13768] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\2and3\builtins.pyi
2023-02-02 13:22:52,362 [13768] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\sys.pyi
2023-02-02 13:22:55,948 [13768] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 13:22:55,949 [13768] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 13:22:55,949 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 13:22:55,950 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 13:22:55,950 [13768] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 13:22:55,988 [13768] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\callbacks.py
2023-02-02 13:22:56,015 [13768] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\__init__.py
2023-02-02 13:22:56,023 [13768] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\python\__init__.py
2023-02-02 13:22:56,031 [13768] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\python\util\__init__.py
2023-02-02 13:22:56,047 [13768] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\python\util\tf_export.py
2023-02-02 13:22:56,066 [13768] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\functools.py
2023-02-02 13:22:56,072 [13768] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\functools.pyi
2023-02-02 13:23:03,010 [13768] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 13:23:03,011 [13768] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 13:23:03,012 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 13:23:03,012 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 13:23:03,012 [13768] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 13:23:03,021 [13768] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\__init__.py
2023-02-02 13:46:07,482 [13768] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 13:46:07,486 [13768] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 3
2023-02-02 13:46:07,486 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:3]
2023-02-02 13:46:07,487 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-02-02 13:46:07,487 [13768] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 13:46:19,809 [13768] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 13:46:19,810 [13768] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 5
2023-02-02 13:46:19,810 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2023-02-02 13:46:19,811 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 5 (to 4 in part parser)
2023-02-02 13:46:19,811 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:5]
2023-02-02 13:46:19,811 [13768] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 13:46:24,977 [13768] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 13:46:24,978 [13768] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 5; new: 5
2023-02-02 13:46:24,978 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:4] new[1:4]
2023-02-02 13:46:24,979 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 5 (to 4 in part parser)
2023-02-02 13:46:24,979 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[5:5] new[5:5]
2023-02-02 13:46:24,979 [13768] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 13:46:24,996 [13768] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\layers\core\dense.py
2023-02-02 13:46:31,132 [13768] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 13:46:31,133 [13768] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 5; new: 5
2023-02-02 13:46:31,133 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:4] new[1:4]
2023-02-02 13:46:31,134 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 5 (to 4 in part parser)
2023-02-02 13:46:31,135 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[5:5] new[5:5]
2023-02-02 13:46:31,135 [13768] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 13:47:36,070 [13768] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 13:47:36,071 [13768] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 5; new: 11
2023-02-02 13:47:36,071 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:3] new[1:3]
2023-02-02 13:47:36,075 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 11 (to 10 in part parser)
2023-02-02 13:47:36,075 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[4:5] new[4:11]
2023-02-02 13:47:36,075 [13768] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 13:47:36,088 [13768] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\sequential.py
2023-02-02 13:47:36,102 [13768] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\__init__.py
2023-02-02 13:47:36,106 [13768] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\__init__.py
2023-02-02 13:47:36,133 [13768] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\functional.py
2023-02-02 13:47:36,175 [13768] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\training.py
2023-02-02 13:47:36,249 [13768] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\base_layer.py
2023-02-02 13:47:36,296 [13768] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\utils\__init__.py
2023-02-02 13:47:36,307 [13768] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\utils\version_utils.py
2023-02-02 13:47:36,316 [13768] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\utils\traceback_utils.py
2023-02-02 13:47:36,348 [13768] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\typing.py
2023-02-02 13:47:36,366 [13768] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\typing.pyi
2023-02-02 13:47:56,123 [13768] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\types.py
2023-02-02 13:47:56,131 [13768] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\types.pyi
2023-02-02 13:47:56,309 [13768] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\abc.py
2023-02-02 13:47:56,321 [13768] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\abc.pyi
2023-02-02 13:47:56,660 [13768] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\inspect.py
2023-02-02 13:47:56,667 [13768] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\inspect.pyi
2023-02-02 13:47:56,757 [13768] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\collections\__init__.py
2023-02-02 13:47:56,767 [13768] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\collections\__init__.pyi
2023-02-02 13:48:01,653 [13768] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\numpy\__init__.py
2023-02-02 13:48:01,687 [13768] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\numpy\__init__.pyi
2023-02-02 13:48:20,221 [13768] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 13:48:20,222 [13768] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 11; new: 13
2023-02-02 13:48:20,223 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:10] new[1:10]
2023-02-02 13:48:20,223 [13768] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:10] new[1:9]
2023-02-02 13:48:20,224 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 10 to 13 (to 12 in part parser)
2023-02-02 13:48:20,224 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[11:11] new[11:13]
2023-02-02 13:48:20,224 [13768] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 13:48:22,927 [13768] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 13:48:22,927 [13768] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 13; new: 13
2023-02-02 13:48:22,929 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:12] new[1:12]
2023-02-02 13:48:22,929 [13768] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:12] new[1:9]
2023-02-02 13:48:22,930 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 10 to 13 (to 12 in part parser)
2023-02-02 13:48:22,930 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[13:13] new[13:13]
2023-02-02 13:48:22,930 [13768] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 13:48:22,941 [13768] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\api\_v2\keras\__init__.py
2023-02-02 13:48:24,165 [13768] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 13:48:24,166 [13768] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 13; new: 13
2023-02-02 13:48:24,167 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:12] new[1:12]
2023-02-02 13:48:24,167 [13768] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:12] new[1:9]
2023-02-02 13:48:24,168 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 10 to 13 (to 12 in part parser)
2023-02-02 13:48:24,168 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[13:13] new[13:13]
2023-02-02 13:48:24,168 [13768] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 13:48:25,097 [13768] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 13:48:25,098 [13768] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 13; new: 13
2023-02-02 13:48:25,098 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:12] new[1:12]
2023-02-02 13:48:25,099 [13768] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:12] new[1:9]
2023-02-02 13:48:25,099 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 10 to 13 (to 12 in part parser)
2023-02-02 13:48:25,101 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[13:13] new[13:13]
2023-02-02 13:48:25,101 [13768] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 13:48:30,090 [13768] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 13:48:30,091 [13768] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 13; new: 13
2023-02-02 13:48:30,091 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:12] new[1:12]
2023-02-02 13:48:30,091 [13768] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:12] new[1:9]
2023-02-02 13:48:30,092 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 10 to 13 (to 12 in part parser)
2023-02-02 13:48:30,092 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[13:13] new[13:13]
2023-02-02 13:48:30,092 [13768] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 13:48:40,794 [13768] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 13:48:40,794 [13768] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 13; new: 14
2023-02-02 13:48:40,795 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:12] new[1:12]
2023-02-02 13:48:40,795 [13768] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:12] new[1:9]
2023-02-02 13:48:40,796 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 10 to 14 (to 13 in part parser)
2023-02-02 13:48:40,796 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[13:13] new[13:14]
2023-02-02 13:48:40,797 [13768] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 13:48:42,402 [13768] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 13:48:42,403 [13768] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 14; new: 14
2023-02-02 13:48:42,403 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:13] new[1:13]
2023-02-02 13:48:42,404 [13768] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:13] new[1:9]
2023-02-02 13:48:42,405 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 10 to 14 (to 13 in part parser)
2023-02-02 13:48:42,405 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[14:14] new[14:14]
2023-02-02 13:48:42,406 [13768] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 13:48:44,536 [13768] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 13:48:44,537 [13768] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 14; new: 14
2023-02-02 13:48:44,537 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:13] new[1:13]
2023-02-02 13:48:44,537 [13768] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:13] new[1:9]
2023-02-02 13:48:44,538 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 10 to 14 (to 13 in part parser)
2023-02-02 13:48:44,538 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[14:14] new[14:14]
2023-02-02 13:48:44,538 [13768] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 13:51:08,947 [13768] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 13:51:08,948 [13768] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 14; new: 1
2023-02-02 13:51:08,948 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:14] new[1:1]
2023-02-02 13:51:08,948 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 13:51:08,948 [13768] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 13:51:10,259 [13768] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 13:51:10,260 [13768] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 13:51:10,260 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 13:51:10,261 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 13:51:10,261 [13768] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 13:51:11,575 [13768] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 13:51:11,575 [13768] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 13:51:11,576 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 13:51:11,576 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 13:51:11,576 [13768] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 13:51:21,200 [13768] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 13:51:21,201 [13768] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 13:51:21,201 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 13:51:21,201 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 13:51:21,202 [13768] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 13:57:06,124 [13768] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 13:57:06,124 [13768] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 13:57:06,124 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 13:57:06,125 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 13:57:06,125 [13768] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 13:57:07,618 [13768] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 13:57:07,620 [13768] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 13:57:07,621 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 13:57:07,622 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 13:57:07,623 [13768] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 13:57:09,159 [13768] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 13:57:09,160 [13768] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 13:57:09,160 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 13:57:09,160 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 13:57:09,161 [13768] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 13:57:09,449 [13768] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 13:57:09,450 [13768] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 13:57:09,450 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 13:57:09,452 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 13:57:09,452 [13768] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 13:57:43,050 [13768] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 13:57:43,052 [13768] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 3
2023-02-02 13:57:43,054 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:3]
2023-02-02 13:57:43,055 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-02-02 13:57:43,058 [13768] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 13:57:43,808 [13768] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 13:57:43,808 [13768] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 3
2023-02-02 13:57:43,808 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2023-02-02 13:57:43,809 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-02-02 13:57:43,809 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:3]
2023-02-02 13:57:43,809 [13768] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 13:57:44,579 [13768] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 13:57:44,581 [13768] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 3
2023-02-02 13:57:44,581 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2023-02-02 13:57:44,581 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-02-02 13:57:44,581 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:3]
2023-02-02 13:57:44,582 [13768] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 13:59:36,612 [13768] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 13:59:36,613 [13768] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 16
2023-02-02 13:59:36,613 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 13:59:36,615 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 16 (to 15 in part parser)
2023-02-02 13:59:36,615 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[2:2] new[2:2]
2023-02-02 13:59:36,615 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:16]
2023-02-02 13:59:36,615 [13768] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 13:59:36,662 [13768] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pyforest\_importable.py
2023-02-02 14:00:49,354 [13768] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 14:00:49,355 [13768] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 16; new: 12
2023-02-02 14:00:49,355 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:6] new[1:6]
2023-02-02 14:00:49,355 [13768] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:15] new[1:5]
2023-02-02 14:00:49,356 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 6 to 7 (to 7 in part parser)
2023-02-02 14:00:49,356 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[delete] old[7:13] new[7:6]
2023-02-02 14:00:49,356 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[14:15] new[7:8]
2023-02-02 14:00:49,358 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 8 to 12 (to 11 in part parser)
2023-02-02 14:00:49,358 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[16:16] new[9:12]
2023-02-02 14:00:49,358 [13768] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 14:01:11,987 [13768] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 14:01:11,987 [13768] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 12; new: 12
2023-02-02 14:01:11,987 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:11] new[1:11]
2023-02-02 14:01:11,988 [13768] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:11] new[1:5]
2023-02-02 14:01:11,988 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 6 to 7 (to 7 in part parser)
2023-02-02 14:01:11,990 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 8 to 12 (to 11 in part parser)
2023-02-02 14:01:11,990 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[12:12] new[12:12]
2023-02-02 14:01:11,990 [13768] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 14:01:12,843 [13768] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 14:01:12,844 [13768] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 12; new: 12
2023-02-02 14:01:12,844 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:11] new[1:11]
2023-02-02 14:01:12,845 [13768] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:11] new[1:5]
2023-02-02 14:01:12,845 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 6 to 7 (to 7 in part parser)
2023-02-02 14:01:12,848 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 8 to 12 (to 11 in part parser)
2023-02-02 14:01:12,848 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[12:12] new[12:12]
2023-02-02 14:01:12,848 [13768] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 14:03:45,365 [13768] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 14:03:45,365 [13768] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 12; new: 2
2023-02-02 14:03:45,365 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:12] new[1:2]
2023-02-02 14:03:45,366 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2023-02-02 14:03:45,366 [13768] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 14:03:48,642 [13768] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 14:03:48,642 [13768] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 3
2023-02-02 14:03:48,643 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2023-02-02 14:03:48,643 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-02-02 14:03:48,644 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:2] new[2:3]
2023-02-02 14:03:48,644 [13768] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 14:04:20,073 [13768] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 14:04:20,073 [13768] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 14
2023-02-02 14:04:20,073 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:3] new[1:14]
2023-02-02 14:04:20,077 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 14 (to 13 in part parser)
2023-02-02 14:04:20,077 [13768] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 14:06:25,412 [13768] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 14:06:25,413 [13768] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 14; new: 4
2023-02-02 14:06:25,413 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 14:06:25,414 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 4 (to 3 in part parser)
2023-02-02 14:06:25,414 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[2:2] new[2:2]
2023-02-02 14:06:25,414 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:14] new[3:4]
2023-02-02 14:06:25,415 [13768] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 14:06:26,710 [13768] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 14:06:26,711 [13768] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 4; new: 4
2023-02-02 14:06:26,712 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:3] new[1:3]
2023-02-02 14:06:26,713 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 4 (to 3 in part parser)
2023-02-02 14:06:26,713 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[4:4] new[4:4]
2023-02-02 14:06:26,713 [13768] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 14:06:38,647 [13768] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 14:06:38,648 [13768] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 4; new: 7
2023-02-02 14:06:38,648 [13768] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:4] new[1:7]
2023-02-02 14:06:38,649 [13768] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 7 (to 6 in part parser)
2023-02-02 14:06:38,650 [13768] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 14:13:42,473 [20932] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-02 14:13:42,473 [20932] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-02 14:13:42,474 [20932] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-02 14:13:42,475 [20932] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-02 14:13:42,476 [20932] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-02 14:13:42,477 [20932] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-02 14:13:45,150 [20932] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\sequential.py
2023-02-02 14:13:45,221 [20932] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\2and3\builtins.pyi
2023-02-02 14:13:45,227 [20932] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\__init__.py
2023-02-02 14:13:45,232 [20932] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\__init__.py
2023-02-02 14:13:45,253 [20932] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\functional.py
2023-02-02 14:13:45,295 [20932] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\training.py
2023-02-02 14:13:45,321 [20932] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\__init__.py
2023-02-02 14:13:45,372 [20932] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\python\__init__.py
2023-02-02 14:13:45,379 [20932] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\python\util\__init__.py
2023-02-02 14:13:45,626 [20932] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\python\util\tf_export.py
2023-02-02 14:13:45,645 [20932] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\functools.py
2023-02-02 14:13:45,652 [20932] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\functools.pyi
2023-02-02 14:13:45,707 [20932] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\base_layer.py
2023-02-02 14:13:45,728 [20932] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\utils\__init__.py
2023-02-02 14:13:45,737 [20932] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\utils\version_utils.py
2023-02-02 14:17:21,573 [20932] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 14:17:21,573 [20932] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 14:17:21,573 [20932] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 14:17:21,575 [20932] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 14:17:21,575 [20932] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 14:22:34,317 [25996] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-02 14:22:34,318 [25996] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-02 14:22:34,318 [25996] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-02 14:22:34,319 [25996] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-02 14:22:34,320 [25996] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-02 14:22:34,320 [25996] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-02 16:31:42,541 [28472] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-02 16:31:42,543 [28472] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-02 16:31:42,543 [28472] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-02 16:31:42,545 [28472] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-02 16:31:42,546 [28472] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-02 16:31:42,547 [28472] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-02 16:31:43,359 [28472] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-02 16:31:43,360 [28472] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-02 16:31:43,360 [28472] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-02 16:31:43,361 [28472] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-02 16:31:43,363 [28472] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-02 16:31:43,364 [28472] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-02 17:25:54,218 [25996] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\2and3\builtins.pyi
2023-02-02 17:25:54,337 [25996] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\sys.pyi
2023-02-02 18:31:58,115 [25996] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-02 18:31:58,116 [25996] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-02 18:31:58,116 [25996] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-02 18:31:58,155 [25996] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-02 18:31:58,156 [25996] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-02 18:31:58,157 [25996] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-02 18:32:00,441 [28472] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-02 18:32:00,446 [28472] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-02 18:32:00,447 [28472] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-02 18:32:00,586 [28472] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-02 18:32:00,596 [28472] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-02 18:32:00,599 [28472] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-02 18:38:38,494 [28472] DEBUG    tensorflow:32: [JupyterRequire] Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2023-02-02 18:38:39,224 [28472] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 7 to 5
2023-02-02 18:38:39,224 [28472] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 5 to 7
2023-02-02 18:38:39,226 [28472] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 7 to 5
2023-02-02 18:38:39,226 [28472] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 5 to 7
2023-02-02 18:38:42,401 [28472] INFO     numexpr.utils:145: [JupyterRequire] Note: NumExpr detected 12 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
2023-02-02 18:38:42,401 [28472] INFO     numexpr.utils:157: [JupyterRequire] NumExpr defaulting to 8 threads.
2023-02-02 18:53:38,073 [28472] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pyforest\_importable.py
2023-02-02 18:53:38,155 [28472] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\2and3\builtins.pyi
2023-02-02 18:53:40,654 [28472] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 18:53:40,655 [28472] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 18:53:40,655 [28472] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 18:53:40,656 [28472] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 18:53:40,656 [28472] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 18:53:40,705 [28472] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\typing.py
2023-02-02 18:53:40,721 [28472] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\typing.pyi
2023-02-02 18:53:40,734 [28472] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\api\_v2\keras\__init__.py
2023-02-02 18:53:41,636 [28472] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 18:53:41,636 [28472] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 18:53:41,636 [28472] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 18:53:41,638 [28472] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 18:53:41,638 [28472] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 18:54:53,889 [28472] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 18:54:53,889 [28472] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 18:54:53,889 [28472] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 18:54:53,891 [28472] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 18:54:53,892 [28472] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 18:54:55,136 [28472] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 18:54:55,137 [28472] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 18:54:55,137 [28472] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 18:54:55,137 [28472] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 18:54:55,137 [28472] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 19:02:55,493 [28472] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 19:02:55,495 [28472] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 19:02:55,495 [28472] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 19:02:55,495 [28472] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 19:02:55,496 [28472] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 19:02:57,160 [28472] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 19:02:57,161 [28472] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 19:02:57,161 [28472] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 19:02:57,162 [28472] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 19:02:57,162 [28472] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 19:02:58,356 [28472] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 19:02:58,357 [28472] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 19:02:58,357 [28472] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 19:02:58,358 [28472] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 19:02:58,358 [28472] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 19:03:00,828 [28472] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 19:03:00,831 [28472] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 19:03:00,832 [28472] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 19:03:00,834 [28472] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 19:03:00,835 [28472] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 19:17:50,050 [28472] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-02 19:17:50,050 [28472] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-02 19:17:50,050 [28472] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-02 19:17:50,057 [28472] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-02 19:17:50,062 [28472] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-02 19:17:50,062 [28472] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-02 19:17:50,189 [25996] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-02 19:17:50,189 [25996] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-02 19:17:50,189 [25996] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-02 19:17:50,202 [25996] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-02 19:17:50,202 [25996] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-02 19:17:50,202 [25996] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-02 19:21:47,401 [25996] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-02 19:21:47,401 [25996] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-02 19:21:47,401 [25996] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-02 19:21:47,409 [25996] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-02 19:21:47,409 [25996] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-02 19:21:47,417 [25996] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-02 19:21:47,442 [28472] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-02 19:21:47,442 [28472] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-02 19:21:47,442 [28472] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-02 19:21:47,450 [28472] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-02 19:21:47,450 [28472] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-02 19:21:47,450 [28472] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-02 20:08:23,645 [28472] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-02 20:08:23,653 [28472] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-02 20:08:23,653 [28472] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-02 20:08:23,661 [28472] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-02 20:08:23,661 [28472] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-02 20:08:23,661 [28472] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-02 20:08:23,725 [25996] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-02 20:08:23,725 [25996] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-02 20:08:23,725 [25996] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-02 20:08:23,741 [25996] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-02 20:08:23,741 [25996] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-02 20:08:23,741 [25996] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-02 20:20:59,002 [28472] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 20:20:59,007 [28472] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 20:20:59,007 [28472] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 20:20:59,024 [28472] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 20:20:59,032 [28472] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 20:21:00,474 [28472] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 20:21:00,475 [28472] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 20:21:00,475 [28472] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 20:21:00,475 [28472] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 20:21:00,477 [28472] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 20:21:21,091 [28472] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 20:21:21,091 [28472] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 20:21:21,093 [28472] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 20:21:21,106 [28472] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 20:21:21,106 [28472] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 20:21:21,168 [28472] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\api\_v2\keras\optimizers\__init__.py
2023-02-02 20:24:44,405 [28472] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 20:24:44,407 [28472] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 20:24:44,407 [28472] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 20:24:44,408 [28472] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 20:24:44,408 [28472] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 20:24:46,400 [28472] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 20:24:46,402 [28472] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 20:24:46,403 [28472] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 20:24:46,403 [28472] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 20:24:46,403 [28472] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 20:24:49,010 [28472] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 20:24:49,012 [28472] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 20:24:49,013 [28472] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 20:24:49,014 [28472] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 20:24:49,014 [28472] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 20:24:56,857 [28472] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 20:24:56,857 [28472] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 20:24:56,857 [28472] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 20:24:56,857 [28472] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 20:24:56,857 [28472] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 20:24:56,915 [28472] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\api\_v2\keras\models\__init__.py
2023-02-02 20:25:15,535 [28472] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 20:25:15,537 [28472] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 20:25:15,537 [28472] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 20:25:15,537 [28472] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 20:25:15,537 [28472] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 20:25:18,349 [28472] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 20:25:18,349 [28472] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 20:25:18,349 [28472] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 20:25:18,349 [28472] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 20:25:18,357 [28472] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 20:25:19,232 [28472] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 20:25:19,233 [28472] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 20:25:19,235 [28472] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 20:25:19,236 [28472] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 20:25:19,237 [28472] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 20:25:19,320 [28472] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\sequential.py
2023-02-02 20:25:19,423 [28472] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\sys.pyi
2023-02-02 20:25:20,466 [28472] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 20:25:20,466 [28472] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 20:25:20,466 [28472] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 20:25:20,466 [28472] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 20:25:20,472 [28472] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 20:25:22,501 [28472] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 20:25:22,501 [28472] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 20:25:22,501 [28472] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 20:25:22,501 [28472] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 20:25:22,501 [28472] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 20:26:23,664 [28472] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 20:26:23,667 [28472] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 20:26:23,667 [28472] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 20:26:23,669 [28472] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 20:26:23,669 [28472] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 20:26:25,042 [28472] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 20:26:25,047 [28472] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 20:26:25,048 [28472] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 20:26:25,048 [28472] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 20:26:25,048 [28472] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 20:26:26,932 [28472] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 20:26:26,933 [28472] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 20:26:26,933 [28472] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 20:26:26,934 [28472] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 20:26:26,934 [28472] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 20:26:28,739 [28472] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 20:26:28,742 [28472] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 20:26:28,742 [28472] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 20:26:28,742 [28472] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 20:26:28,742 [28472] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 20:26:30,198 [28472] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 20:26:30,200 [28472] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 20:26:30,201 [28472] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 20:26:30,202 [28472] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 20:26:30,202 [28472] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 20:26:30,265 [28472] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\__init__.py
2023-02-02 20:26:30,283 [28472] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\__init__.py
2023-02-02 20:26:30,350 [28472] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\functional.py
2023-02-02 20:26:30,457 [28472] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\training.py
2023-02-02 20:26:30,512 [28472] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\__init__.py
2023-02-02 20:26:30,532 [28472] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\python\__init__.py
2023-02-02 20:26:30,553 [28472] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\python\util\__init__.py
2023-02-02 20:26:30,670 [28472] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\python\util\tf_export.py
2023-02-02 20:26:30,719 [28472] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\functools.py
2023-02-02 20:26:30,740 [28472] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\functools.pyi
2023-02-02 20:26:30,836 [28472] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\engine\base_layer.py
2023-02-02 20:26:30,905 [28472] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\utils\__init__.py
2023-02-02 20:26:30,929 [28472] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\utils\version_utils.py
2023-02-02 20:26:30,951 [28472] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\utils\traceback_utils.py
2023-02-02 20:26:33,527 [28472] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 20:26:33,529 [28472] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 20:26:33,529 [28472] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 20:26:33,530 [28472] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 20:26:33,530 [28472] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 20:26:34,535 [28472] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 20:26:34,535 [28472] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 20:26:34,542 [28472] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 20:26:34,544 [28472] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 20:26:34,544 [28472] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 20:26:35,297 [28472] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-02 20:26:35,299 [28472] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-02 20:26:35,299 [28472] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-02 20:26:35,304 [28472] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-02 20:26:35,304 [28472] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-02 20:46:22,410 [28472] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-02 20:46:22,410 [28472] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-02 20:46:22,410 [28472] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-02 20:46:22,410 [25996] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-02 20:46:22,410 [25996] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-02 20:46:22,410 [25996] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-02 20:46:22,418 [28472] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-02 20:46:22,418 [28472] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-02 20:46:22,418 [28472] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-02 20:46:22,426 [25996] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-02 20:46:22,432 [25996] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-02 20:46:22,432 [25996] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-02 20:51:33,311 [28472] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-02 20:51:33,314 [28472] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-02 20:51:33,315 [28472] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-02 20:51:33,319 [28472] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-02 20:51:33,327 [28472] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-02 20:51:33,327 [28472] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-02 20:51:33,375 [25996] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-02 20:51:33,375 [25996] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-02 20:51:33,375 [25996] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-02 20:51:33,384 [25996] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-02 20:51:33,384 [25996] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-02 20:51:33,384 [25996] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-03 07:50:23,977 [25996] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-03 07:50:23,977 [25996] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-03 07:50:23,984 [25996] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-03 07:50:24,000 [25996] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-03 07:50:24,000 [25996] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-03 07:50:24,008 [25996] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-03 07:50:24,040 [28472] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-03 07:50:24,040 [28472] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-03 07:50:24,040 [28472] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-03 07:50:24,056 [28472] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-03 07:50:24,064 [28472] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-03 07:50:24,064 [28472] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-03 08:12:02,288 [28472] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-03 08:12:02,288 [28472] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-03 08:12:02,297 [28472] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-03 08:12:02,337 [28472] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-03 08:12:02,349 [28472] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-03 08:12:02,353 [28472] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-03 08:12:03,993 [25996] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-03 08:12:03,993 [25996] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-03 08:12:03,993 [25996] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-03 08:12:04,009 [25996] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-03 08:12:04,016 [25996] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-03 08:12:04,016 [25996] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-03 08:37:44,564 [28472] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-03 08:37:44,564 [28472] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-03 08:37:44,564 [28472] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-03 08:37:44,580 [28472] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-03 08:37:44,588 [28472] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-03 08:37:44,588 [28472] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-03 08:37:44,660 [25996] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-03 08:37:44,660 [25996] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-03 08:37:44,668 [25996] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-03 08:37:44,684 [25996] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-03 08:37:44,684 [25996] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-03 08:37:44,692 [25996] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-03 09:10:58,493 [28472] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-03 09:10:58,493 [28472] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-03 09:10:58,493 [28472] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-03 09:10:58,525 [28472] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-03 09:10:58,541 [28472] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-03 09:10:58,556 [28472] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-03 09:11:00,929 [25996] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-03 09:11:00,937 [25996] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-03 09:11:00,937 [25996] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-03 09:11:00,969 [25996] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-03 09:11:00,969 [25996] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-03 09:11:00,969 [25996] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-03 10:05:46,280 [28472] DEBUG    matplotlib:224: [JupyterRequire] matplotlib data path: C:\Users\sunny\anaconda3\lib\site-packages\matplotlib\mpl-data
2023-02-03 10:05:46,308 [28472] DEBUG    matplotlib:224: [JupyterRequire] CONFIGDIR=C:\Users\sunny\.matplotlib
2023-02-03 10:05:46,311 [28472] DEBUG    matplotlib:1394: [JupyterRequire] matplotlib version 3.4.3
2023-02-03 10:05:46,311 [28472] DEBUG    matplotlib:1395: [JupyterRequire] interactive is False
2023-02-03 10:05:46,311 [28472] DEBUG    matplotlib:1396: [JupyterRequire] platform is win32
2023-02-03 10:05:46,311 [28472] DEBUG    matplotlib:1397: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', '_io', 'marshal', 'nt', 'winreg', '_frozen_importlib_external', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', 'encodings.cp1252', '_signal', 'encodings.latin_1', '_abc', 'abc', 'io', '__main__', '_stat', 'stat', '_collections_abc', 'genericpath', 'ntpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', '_distutils_hack', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', '_heapq', 'heapq', 'itertools', 'keyword', '_operator', 'operator', 'reprlib', '_collections', 'collections', 'collections.abc', '_functools', 'functools', 'contextlib', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', 'typing.io', 'typing.re', 'typing', 'importlib.abc', 'importlib.util', 'google', 'google.cloud', 'google.logging', 'mpl_toolkits', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'msvcrt', '_winapi', 'subprocess', 'jupyter_client._version', 'posixpath', 'fnmatch', 'glob', '_socket', 'math', 'select', 'selectors', 'socket', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_bisect', 'bisect', '_random', '_sha512', 'random', 'tempfile', 'getpass', 'platform', 'zmq.libzmq', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_24', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'copy', '_struct', 'struct', '_compat_pickle', '_pickle', 'pickle', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'atexit', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', '_ast', 'ast', '_opcode', 'opcode', 'dis', 'token', 'tokenize', 'linecache', 'inspect', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.traitlets', 'traitlets.utils.decorators', 'traitlets._version', 'traitlets', 'traceback', '_string', 'string', 'logging', 'pprint', 'gettext', 'argparse', 'traitlets.config.loader', 'textwrap', 'traitlets.utils.text', 'traitlets.config.configurable', 'traitlets.config.application', 'traitlets.config', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'urllib', 'urllib.parse', 'pathlib', 'jupyter_core.paths', 'jupyter_client.utils', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_ssl', 'binascii', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.threads', '_overlapped', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.selector_events', 'asyncio.windows_utils', 'asyncio.windows_events', 'asyncio', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', '_queue', 'queue', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', '_uuid', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', '_datetime', 'datetime', 'numbers', 'logging.handlers', 'html.entities', 'html', 'array', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', '_ctypes', 'ctypes._endian', 'ctypes', 'ctypes.wintypes', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', '__future__', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'sysconfig', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'locale', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_win32', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'IPython.lib.security', 'IPython.lib', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.deduplicate', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout.scrollable_pane', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'prompt_toolkit.patch_stdout', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'parso._compatibility', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.file_io', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.common', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.lib.clipboard', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'nturl2path', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'dataclasses', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'ipython_genutils._version', 'ipython_genutils', 'ipython_genutils.encoding', 'ipython_genutils.py3compat', 'ipython_genutils.path', 'imp', 'hmac', 'dateutil._version', 'dateutil', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.control', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'setuptools._distutils', 'distutils.debug', 'distutils.errors', 'distutils.fancy_getopt', 'distutils.dep_util', 'distutils._log', 'distutils.spawn', 'distutils.util', 'distutils.dist', 'distutils.dir_util', 'distutils.file_util', 'zipfile', 'distutils.archive_util', 'distutils.cmd', 'configparser', 'distutils.config', 'distutils.extension', 'distutils.core', '_distutils_hack.override', 'setuptools._deprecation_warning', 'xml.parsers', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'plistlib', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'importlib._common', 'importlib.resources', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources._vendor.more_itertools.more', 'pkg_resources._vendor.more_itertools', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.functools', 'pkg_resources.extern.jaraco.context', 'pkg_resources.extern.jaraco.text', 'pkg_resources._vendor.platformdirs.api', 'pkg_resources._vendor.platformdirs.version', 'pkg_resources._vendor.platformdirs.windows', 'pkg_resources._vendor.platformdirs', 'pkg_resources.extern.platformdirs', 'pkg_resources._vendor.packaging.__about__', 'pkg_resources._vendor.packaging', 'pkg_resources.extern.packaging', 'pkg_resources.extern.packaging._structures', 'pkg_resources.extern.packaging.version', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources.extern.packaging.tags', 'pkg_resources.extern.packaging.utils', 'pkg_resources.extern.packaging.specifiers', 'pkg_resources._vendor.pyparsing.util', 'pkg_resources._vendor.pyparsing.unicode', 'pkg_resources._vendor.pyparsing.exceptions', 'pkg_resources._vendor.pyparsing.actions', 'pkg_resources._vendor.pyparsing.results', 'pkg_resources._vendor.pyparsing.core', 'pkg_resources._vendor.pyparsing.helpers', 'pkg_resources._vendor.pyparsing.testing', 'pkg_resources._vendor.pyparsing.common', 'pkg_resources._vendor.pyparsing', 'pkg_resources.extern.pyparsing', 'pkg_resources.extern.packaging.markers', 'pkg_resources.extern.packaging.requirements', 'encodings.cp437', 'pkg_resources', 'setuptools.version', 'distutils.filelist', 'setuptools.monkey', 'setuptools.extension', 'distutils.log', 'distutils.command', 'setuptools.extern', 'setuptools._vendor', 'setuptools._vendor.packaging.__about__', 'setuptools._vendor.packaging', 'setuptools.extern.packaging', 'setuptools._vendor.ordered_set', 'setuptools.extern.ordered_set', 'setuptools._vendor.more_itertools.recipes', 'setuptools._vendor.more_itertools.more', 'setuptools._vendor.more_itertools', 'setuptools.extern.more_itertools', '_csv', 'csv', 'setuptools._vendor.zipp', 'setuptools._vendor.importlib_metadata._functools', 'setuptools._vendor.importlib_metadata._text', 'setuptools._vendor.importlib_metadata._adapters', 'setuptools._vendor.importlib_metadata._compat', 'setuptools._vendor.importlib_metadata._meta', 'setuptools._vendor.importlib_metadata._collections', 'setuptools._vendor.importlib_metadata._itertools', 'setuptools._vendor.importlib_metadata', 'setuptools.extern.importlib_metadata', 'zipp', 'importlib_metadata._functools', 'importlib_metadata._text', 'importlib_metadata._adapters', 'importlib_metadata._compat', 'importlib_metadata._meta', 'importlib_metadata._collections', 'importlib_metadata._itertools', 'importlib_metadata', 'setuptools._importlib', 'distutils.command.bdist', 'setuptools.command', 'setuptools.windows_support', 'setuptools._vendor.pyparsing.util', 'setuptools._vendor.pyparsing.unicode', 'setuptools._vendor.pyparsing.exceptions', 'setuptools._vendor.pyparsing.actions', 'setuptools._vendor.pyparsing.results', 'setuptools._vendor.pyparsing.core', 'setuptools._vendor.pyparsing.helpers', 'setuptools._vendor.pyparsing.testing', 'setuptools._vendor.pyparsing.common', 'setuptools._vendor.pyparsing', 'setuptools.extern.pyparsing', 'setuptools._vendor.packaging._manylinux', 'setuptools._vendor.packaging._musllinux', 'setuptools.extern.packaging.tags', 'setuptools.extern.packaging._structures', 'setuptools.extern.packaging.version', 'setuptools.extern.packaging.utils', 'setuptools.extern.packaging.specifiers', 'setuptools.extern.packaging.markers', 'setuptools.extern.packaging.requirements', 'setuptools._path', 'setuptools.config.expand', 'setuptools.config.setupcfg', 'setuptools.config', 'setuptools.errors', 'email._header_value_parser', 'email.headerregistry', 'setuptools.config._apply_pyprojecttoml', 'setuptools.config.pyprojecttoml', 'setuptools.discovery', 'setuptools._vendor.jaraco', 'setuptools.extern.jaraco', 'setuptools.extern.jaraco.functools', 'setuptools.extern.jaraco.context', 'setuptools.extern.jaraco.text', 'setuptools._reqs', 'setuptools._itertools', 'setuptools._entry_points', 'setuptools.dist', 'setuptools.py34compat', 'setuptools._imp', 'setuptools.depends', 'setuptools.logging', 'setuptools.msvc', 'unittest.util', 'unittest.result', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.signals', 'unittest.runner', 'unittest.main', 'unittest', 'unittest.mock', 'distutils.ccompiler', 'distutils._msvccompiler', 'setuptools', 'distutils', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.compiler', 'debugpy._version', 'debugpy.common', 'debugpy.common.json', 'debugpy.common.fmt', 'debugpy.common.compat', 'debugpy', 'debugpy._vendored._util', 'debugpy._vendored', '_pydevd_bundle', 'encodings.ascii', 'stringprep', 'encodings.idna', '_pydevd_bundle.pydevd_vm_type', '_pydev_imps', 'xmlrpc', 'gzip', 'xmlrpc.client', 'socketserver', 'http.server', 'xmlrpc.server', '_pydev_imps._pydev_saved_modules', '_pydevd_bundle.pydevd_constants', '_pydev_bundle', '_pydev_runfiles', '_pydevd_frame_eval', 'pydev_ipython', 'pydevd_concurrency_analyser', 'pydevd_plugins', '_pydev_bundle.pydev_log', '_pydev_bundle._pydev_filesystem_encoding', '_pydevd_bundle.pydevd_comm_constants', 'pydevd_file_utils', '_pydev_imps._pydev_execfile', '_pydevd_bundle.pydevd_exec2', '_pydev_bundle.pydev_imports', '_pydev_bundle.pydev_is_thread_alive', '_pydev_bundle.pydev_override', 'pydevd_plugins.extensions', '_pydevd_bundle.pydevd_extension_utils', '_pydevd_bundle.pydevd_frame_utils', '_pydevd_bundle.pydevd_filtering', '_pydevd_bundle.pydevd_io', '_pydevd_bundle.pydevd_utils', '_pydev_bundle._pydev_tipper_common', '_pydev_bundle._pydev_imports_tipper', '_pydev_bundle._pydev_calltip_util', '_pydevd_bundle.pydevd_safe_repr', '_pydevd_bundle.pydevd_resolver', '_pydevd_bundle.pydevd_extension_api', '_pydevd_bundle.pydevd_xml', '_pydevd_bundle.pydevd_dont_trace', '_pydevd_frame_eval.vendored', '_pydevd_frame_eval.vendored.bytecode.flags', '_pydevd_frame_eval.vendored.bytecode.instr', '_pydevd_frame_eval.vendored.bytecode.bytecode', '_pydevd_frame_eval.vendored.bytecode.concrete', '_pydevd_frame_eval.vendored.bytecode.cfg', '_pydevd_frame_eval.vendored.bytecode', '_pydevd_bundle.pydevd_bytecode_utils', '_pydevd_bundle.pydevd_cython', '_pydevd_bundle.pydevd_cython_wrapper', '_pydevd_bundle.pydevd_additional_thread_info', '_pydevd_bundle.pydevd_thread_lifecycle', '_pydevd_bundle.pydevd_save_locals', '_pydevd_bundle.pydevd_defaults', '_pydev_bundle.pydev_monkey', 'pydevd_tracing', '_pydevd_bundle.pydevd_daemon_thread', '_pydevd_bundle.pydevd_timeout', '_pydevd_bundle.pydevd_vars', '_pydev_bundle.pydev_console_utils', '_pydevd_bundle.pydevd_import_class', '_pydevd_bundle.pydevd_breakpoints', '_pydevd_bundle.pydevd_custom_frames', '_pydevd_bundle.pydevd_dont_trace_files', '_pydevd_bundle.pydevd_net_command', '_pydev_bundle.pydev_umd', 'pydevconsole', '_pydev_bundle._pydev_completer', '_pydevd_bundle.pydevd_net_command_factory_xml', '_pydevd_bundle.pydevd_frame', '_pydevd_bundle.pydevd_additional_thread_info_regular', '_pydevd_bundle.pydevd_trace_dispatch', '_pydevd_frame_eval.pydevd_frame_eval_main', '_pydevd_bundle.pydevd_source_mapping', 'pydevd_concurrency_analyser.pydevd_thread_wrappers', 'pydevd_concurrency_analyser.pydevd_concurrency_logger', '_pydevd_bundle._debug_adapter', '_pydevd_bundle._debug_adapter.pydevd_schema_log', '_pydevd_bundle._debug_adapter.pydevd_base_schema', '_pydevd_bundle._debug_adapter.pydevd_schema', '_pydevd_bundle.pydevd_reload', '_pydev_bundle.fsnotify', '_pydevd_bundle.pydevd_console', '_pydevd_bundle.pydevd_comm', '_pydevd_bundle.pydevd_net_command_factory_json', '_pydevd_bundle.pydevd_collect_bytecode_info', '_pydevd_bundle.pydevd_api', '_pydevd_bundle.pydevd_json_debug_options', '_pydevd_bundle.pydevd_process_net_command_json', '_pydevd_bundle.pydevd_traceproperty', '_pydevd_bundle.pydevd_process_net_command', '_pydevd_bundle.pydevd_suspended_frames', '_pydevd_bundle.pydevd_trace_api', 'pydevd_plugins.django_debug', 'pydevd_plugins.jinja2_debug', '_pydevd_bundle.pydevd_plugin_utils', 'pydevd_plugins.extensions.types', 'pydevd_plugins.extensions.types.pydevd_helpers', 'pydevd_plugins.extensions.types.pydevd_plugin_numpy_types', 'pydevd_plugins.extensions.types.pydevd_plugins_django_form_str', 'pydevd', 'debugpy._vendored.force_pydevd', 'debugpy.server', 'debugpy.adapter', 'debugpy.common.timestamp', 'debugpy.common.util', 'debugpy.common.log', 'debugpy.common.sockets', 'debugpy.server.api', 'ipykernel.debugger', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'IPython.core.completerlib', 'storemagic', 'pyforest._importable', 'pyforest.user_specific_imports', 'pyforest._imports', 'pyforest.utils', 'pyforest', 'logging.config', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.types', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'tensorflow.python.platform', 'tensorflow.python.platform.build_info', 'tensorflow.python.platform.self_check', 'tensorflow.python.pywrap_dlopen_global_flags', 'tensorflow.python._pywrap_tensorflow_internal', 'tensorflow.python.pywrap_tensorflow', 'tensorflow.python.eager', 'absl', 'absl.flags._helpers', 'absl.flags._argument_parser', 'absl.flags._exceptions', 'absl.flags._flag', 'absl.flags._validators_classes', 'absl.flags._flagvalues', 'absl.flags._validators', 'absl.flags._defines', 'absl.flags', 'absl.logging.converter', 'absl.logging', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'mkl._mklinit', 'mkl._py_mkl_service', 'mkl', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._add_newdocs_scalars', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'tensorflow.core', 'tensorflow.core.framework', 'google.protobuf', 'google.protobuf.internal', 'google.protobuf.internal._api_implementation', 'google.protobuf.internal.api_implementation', 'google.protobuf.pyext', 'google.protobuf.internal.enum_type_wrapper', 'google.protobuf.message', 'google.protobuf.pyext._message', 'google.protobuf.descriptor', 'google.protobuf.descriptor_database', 'google.protobuf.text_encoding', 'google.protobuf.descriptor_pool', 'google.protobuf.pyext.cpp_message', 'google.protobuf.message_factory', 'google.protobuf.symbol_database', 'google.protobuf.reflection', 'google.protobuf.internal.well_known_types', 'tensorflow.core.framework.tensor_shape_pb2', 'tensorflow.core.framework.types_pb2', 'tensorflow.core.framework.resource_handle_pb2', 'tensorflow.core.framework.tensor_pb2', 'tensorflow.core.framework.attr_value_pb2', 'tensorflow.core.framework.full_type_pb2', 'tensorflow.core.framework.node_def_pb2', 'tensorflow.core.framework.op_def_pb2', 'tensorflow.core.framework.function_pb2', 'tensorflow.core.protobuf', 'tensorflow.core.framework.cost_graph_pb2', 'tensorflow.core.framework.versions_pb2', 'tensorflow.core.framework.graph_pb2', 'tensorflow.core.framework.allocation_description_pb2', 'tensorflow.core.framework.tensor_description_pb2', 'tensorflow.core.framework.step_stats_pb2', 'tensorflow.core.protobuf.cluster_pb2', 'tensorflow.core.protobuf.coordination_config_pb2', 'tensorflow.core.protobuf.debug_pb2', 'tensorflow.core.protobuf.verifier_config_pb2', 'tensorflow.core.protobuf.rewriter_config_pb2', 'tensorflow.core.protobuf.config_pb2', 'tensorflow.python._pywrap_tfe', 'tensorflow.python.pywrap_tfe', 'tensorflow.python.platform._pywrap_tf2', 'tensorflow.python.util', 'tensorflow.python.util.tf_decorator', 'tensorflow.python.util.tf_inspect', 'tensorflow.python.util.tf_export', 'tensorflow.python.tf2', 'tensorflow.python.client', 'tensorflow.python.client._pywrap_tf_session', 'tensorflow.python.util._tf_stack', 'tensorflow.python.util.tf_stack', 'tensorflow.python.client.pywrap_tf_session', 'tensorflow.python.eager.executor', 'tensorflow.tsl', 'tensorflow.tsl.protobuf', 'tensorflow.tsl.protobuf.histogram_pb2', 'tensorflow.core.framework.summary_pb2', 'tensorflow.python.framework', 'tensorflow.core.framework.api_def_pb2', 'tensorflow.python.util.compat', 'tensorflow.python.util.tf_contextlib', 'tensorflow.python.framework.c_api_util', 'tensorflow.python.eager.monitoring', 'tensorflow.python.framework.device_spec', 'tensorflow.python.framework.device', 'tensorflow.python.framework.tfrt_utils', 'tensorflow.python.util.is_in_graph_mode', 'tensorflow.python.platform.tf_logging', 'tensorflow.python.util.decorator_utils', 'tensorflow.tools', 'tensorflow.tools.docs', 'tensorflow.tools.docs.doc_controls', 'tensorflow.python.util.deprecation', 'tensorflow.python.eager.context', 'tensorflow.python.data.experimental.ops', 'tensorflow.core.protobuf.data_service_pb2', 'tensorflow.python.data.util', 'wrapt._wrappers', 'wrapt.wrappers', 'wrapt.decorators', 'wrapt.importer', 'wrapt', 'tensorflow.python.util._pywrap_utils', 'tensorflow.python.util._pywrap_nest', 'tensorflow.python.util.nest', 'tensorflow.python.framework.composite_tensor', 'encodings.raw_unicode_escape', 'encodings.unicode_escape', 'google.protobuf.internal.containers', 'google.protobuf.internal.wire_format', 'google.protobuf.internal.encoder', 'google.protobuf.internal.decoder', 'google.protobuf.internal.type_checkers', 'google.protobuf.text_format', 'tensorflow.core.lib', 'tensorflow.core.lib.core', 'tensorflow.tsl.protobuf.error_codes_pb2', 'tensorflow.core.lib.core.error_codes_pb2', 'tensorflow.python._pywrap_py_exception_registry', 'tensorflow.python.framework.errors_impl', 'tensorflow.python.framework.errors', 'tensorflow.python.eager.core', 'tensorflow.python.framework._dtypes', 'tensorflow.python.types', 'tensorflow.python.types.doc_typealias', 'tensorflow.python.lib', 'tensorflow.python.lib.core', 'tensorflow.python.lib.core._pywrap_bfloat16', 'typing_extensions', 'tensorflow.python.types.trace', 'tensorflow.core.function', 'google.protobuf.any_pb2', 'tensorflow.core.function.trace_type.serialization_pb2', 'tensorflow.core.function.trace_type.serialization', 'tensorflow.core.function.trace_type.default_types_pb2', 'tensorflow.core.function.trace_type.default_types', 'tensorflow.core.function.trace_type.util', 'tensorflow.core.function.trace_type.trace_type_builder', 'tensorflow.core.function.trace_type', 'tensorflow.python.framework.dtypes', 'absl.command_name', 'absl.app', 'tensorflow.python.util.lazy_loader', 'tensorflow.python.eager.tape', 'tensorflow.python.framework.cpp_shape_inference_pb2', 'tensorflow.python.framework.composite_tensor_gradient', 'tensorflow.python.framework.tensor_conversion_registry', 'tensorflow.python.framework.tensor_shape', 'tensorflow.core.protobuf.struct_pb2', 'tensorflow.python.framework.type_spec', 'tensorflow.python.types.internal', 'tensorflow.python.framework.indexed_slices', 'tensorflow.python.framework.registry', 'tensorflow.python.framework.traceable_stack', 'tensorflow.python.framework.versions', 'tensorflow.python.ops', 'tensorflow.python.ops.control_flow_util', 'tensorflow.python.profiler', 'tensorflow.python.profiler.internal', 'tensorflow.python.profiler.internal._pywrap_traceme', 'tensorflow.python.profiler.trace', 'tensorflow.python.types.core', 'tensorflow.python.framework._pywrap_python_api_dispatcher', 'tensorflow.python.util.traceback_utils', 'tensorflow.python.util.type_annotations', 'tensorflow.python.util.dispatch', 'tensorflow.python.util.function_utils', 'tensorflow.python.util.lock_util', 'tensorflow.python.util.memory', 'tensorflow.python.util.object_identity', 'tensorflow.python.framework.ops', 'tensorflow.python.eager.execute', 'tensorflow.python.framework.op_callbacks', 'tensorflow.python.framework.tensor_util', 'tensorflow.python.framework.constant_op', 'tensorflow.python.framework.common_shapes', 'tensorflow.python.framework.tensor_spec', 'tensorflow.python.framework._op_def_registry', 'tensorflow.python.framework.op_def_registry', 'tensorflow.core.config', 'tensorflow.python.flags_pybind', 'tensorflow.core.config.flags', 'tensorflow.python.framework._op_def_library_pybind', 'tensorflow.python.framework.op_def_library_pybind', 'tensorflow.python.framework.op_def_library', 'tensorflow.python.ops.gen_sparse_ops', 'tensorflow.python.framework.sparse_tensor', 'tensorflow.python.data.util.nest', 'tensorflow.core.framework.variable_pb2', 'tensorflow.python.compat', 'tensorflow.python.compat.compat', 'tensorflow.python.framework.auto_control_deps_utils', 'packaging.__about__', 'packaging', 'packaging._structures', 'packaging.version', 'google.protobuf.wrappers_pb2', 'tensorflow.core.protobuf.trackable_object_graph_pb2', 'tensorflow.core.protobuf.saved_object_graph_pb2', 'tensorflow.core.protobuf.saver_pb2', 'tensorflow.core.protobuf.meta_graph_pb2', 'tensorflow.core.protobuf.graph_debug_info_pb2', 'tensorflow.python.framework.error_interpolation', 'tensorflow.python.lib.io', 'tensorflow.python.lib.io._pywrap_file_io', 'tensorflow.python.lib.io.file_io', 'tensorflow.python.framework.graph_io', 'tensorflow.python.framework.graph_to_function_def', 'tensorflow.python.ops.gen_array_ops', 'tensorflow.python.ops.gen_math_ops', 'tensorflow.python.ops.array_ops', 'tensorflow.python.ops.gen_data_flow_ops', 'tensorflow.python.ops.session_ops', 'tensorflow.python.training', 'tensorflow.python.training.experimental', 'tensorflow.python.training.experimental.mixed_precision_global_state', 'tensorflow.python.client.session', 'tensorflow.python.ops.gen_linalg_ops', 'tensorflow.python.framework._proto_comparators', 'tensorflow.python.framework.graph_util_impl', 'tensorflow.python.framework.graph_util', 'tensorflow.python.ops.gen_bitwise_ops', 'tensorflow.python.ops.gen_nn_ops', 'tensorflow.python.ops.math_ops', 'tensorflow.python.ops.linalg_ops_impl', 'tensorflow.python.util._pywrap_determinism', 'tensorflow.python.util._pywrap_tensor_float_32_execution', 'tensorflow.python.framework.config', 'tensorflow.python.framework.random_seed', 'tensorflow.core.protobuf.control_flow_pb2', 'tensorflow.python.ops.gen_control_flow_ops', 'tensorflow.python.ops.gen_functional_ops', 'tensorflow.python.ops.gen_logging_ops', 'tensorflow.python.ops.gen_list_ops', 'tensorflow.python.ops.handle_data_util', 'tensorflow.python.ops.list_ops', 'tensorflow.python.util.tf_should_use', 'tensorflow.python.ops.tensor_array_ops', 'tensorflow.python.util.variable_utils', 'tensorflow.python.ops.control_flow_ops', 'tensorflow.python.ops.gen_random_ops', 'tensorflow.python.ops.bitwise_ops', 'tensorflow.python.ops.gen_random_index_shuffle_ops', 'tensorflow.python.ops.gen_stateless_random_ops', 'tensorflow.python.ops.gen_stateless_random_ops_v2', 'tensorflow.python.ops.stateless_random_ops', 'tensorflow.python.ops.random_ops', 'tensorflow.python.ops.init_ops', 'tensorflow.python.ops.gen_state_ops', 'tensorflow.python.ops.gen_resource_variable_ops', 'tensorflow.python.ops.state_ops', 'tensorflow.python.trackable', 'tensorflow.python.trackable.constants', 'tensorflow.python.training.saving', 'tensorflow.python.training.saving.saveable_object', 'tensorflow.python.trackable.base', 'tensorflow.python.ops.variables', 'tensorflow.python.ops.variable_scope', 'tensorflow.python.framework.function', 'tensorflow.python.framework.importer', 'tensorflow.python.framework.meta_graph', 'tensorflow.python.ops.resource_variable_ops', 'tensorflow.python.ops.ragged', 'tensorflow.python.ops.check_ops', 'tensorflow.python.ops.gen_ragged_conversion_ops', 'tensorflow.python.ops.ragged.ragged_config', 'tensorflow.python.ops.gen_ragged_math_ops', 'tensorflow.python.ops.ragged.ragged_util', 'tensorflow.python.ops.ragged.segment_id_ops', 'tensorflow.python.ops.ragged.row_partition', 'tensorflow.python.ops.ragged.ragged_tensor_value', 'tensorflow.python.ops.ragged.ragged_tensor', 'tensorflow.python.data.util.structure', 'tensorflow.python.ops.gen_experimental_dataset_ops', 'tensorflow.python.data.experimental.ops.compression_ops', 'tensorflow.python.data.experimental.service._pywrap_server_lib', 'tensorflow.python.data.experimental.service._pywrap_utils', 'tensorflow.python.data.ops', 'multiprocessing.process', 'multiprocessing.reduction', 'multiprocessing.context', '__mp_main__', 'multiprocessing', 'tensorflow.core.framework.dataset_metadata_pb2', 'tensorflow.core.framework.model_pb2', 'tensorflow.core.framework.dataset_options_pb2', 'tensorflow.python.ops.gen_dataset_ops', 'tensorflow.python.data.ops.optional_ops', 'tensorflow.python.data.util.options', 'tensorflow.python.data.ops.options', 'tensorflow.python.eager.polymorphic_function', 'tensorflow.python.saved_model', 'tensorflow.python.saved_model.registration.registration', 'tensorflow.python.saved_model.registration', 'tensorflow.python.trackable.asset', 'tensorflow.python.distribute', 'tensorflow.python.distribute.parallel_device', 'tensorflow.python._pywrap_parallel_device', 'tensorflow.python.distribute.device_util', 'tensorflow.python.tpu', 'tensorflow.python.tpu.ops', 'tensorflow.python.ops.gen_tpu_ops', 'tensorflow.python.tpu.tpu_function', 'tensorflow.python.tpu.ops.tpu_ops', 'tensorflow.python.distribute.parallel_device.parallel_device', 'tensorflow.python.eager.graph_only_ops', 'tensorflow.python.eager.polymorphic_function.composite_tensor_utils', 'tensorflow.python.framework.auto_control_deps', 'tensorflow.python.saved_model.save_context', 'tensorflow.python.framework.func_graph', 'tensorflow.python.ops.op_selector', 'tensorflow.python.eager.lift_to_graph', 'tensorflow.core.function.polymorphism', 'tensorflow.core.function.polymorphism.function_type', 'tensorflow.python.eager.polymorphic_function.function_spec', 'tensorflow.python.eager.backprop_util', 'tensorflow.python.ops.unconnected_gradients', 'tensorflow.python.eager.imperative_grad', 'tensorflow.python.ops.default_gradient', 'tensorflow.python.eager.backprop', 'tensorflow.python.eager.forwardprop_util', 'tensorflow.python.ops.functional_ops', 'tensorflow.python.ops.control_flow_v2_func_graphs', 'tensorflow.python.ops.control_flow_state', 'tensorflow.python.ops.gradients_util', 'tensorflow.python.eager.polymorphic_function.monomorphic_function', 'tensorflow.core.function.polymorphism.type_dispatch', 'tensorflow.core.function.polymorphism.function_cache', 'tensorflow.python.eager.polymorphic_function.function_context', 'tensorflow.python.eager.polymorphic_function.tracing_compiler', 'tensorflow.python.eager.polymorphic_function.polymorphic_function', 'tensorflow.python.eager.def_function', 'tensorflow.python.trackable.resource', 'tensorflow.python.eager.polymorphic_function.saved_model_utils', 'tensorflow.python.eager.polymorphic_function.quarantine', 'tensorflow.python.eager.function', 'tensorflow.python.saved_model.revived_types', 'tensorflow.python.trackable.layer_utils', 'tensorflow.python.trackable.data_structures', 'tensorflow.python.trackable.converter', 'tensorflow.python.checkpoint.trackable_view', 'tensorflow.python.util._pywrap_checkpoint_reader', 'tensorflow.python.training.py_checkpoint_reader', 'tensorflow.python.checkpoint.checkpoint_view', 'tensorflow.python.checkpoint', 'tensorflow.python.training.training_util', 'tensorflow.python.training.checkpoint_state_pb2', 'tensorflow.python.checkpoint.checkpoint_management', 'tensorflow.python.ops.gen_io_ops', 'tensorflow.python.lib.io._pywrap_record_io', 'tensorflow.python.lib.io.tf_record', 'tensorflow.python.lib.io.python_io', 'tensorflow.python.ops.gen_parsing_ops', 'tensorflow.python.ops.io_ops', 'tensorflow.python.ops.gen_string_ops', 'tensorflow.python.ops.string_ops', 'tensorflow.python.platform.gfile', 'tensorflow.python.saved_model.pywrap_saved_model.constants', 'tensorflow.python.saved_model.pywrap_saved_model.metrics', 'tensorflow.python.saved_model.pywrap_saved_model.fingerprinting', 'tensorflow.python.saved_model.pywrap_saved_model', 'tensorflow.python.checkpoint.saveable_compat', 'tensorflow.python.trackable.python_state', 'tensorflow.python.trackable.trackable_utils', 'tensorflow.python.training.saving.saveable_object_util', 'tensorflow.python.training.saver', 'tensorflow.python.data.ops.iterator_ops', 'tensorflow.python.lib.core._pywrap_py_func', 'tensorflow.python.ops.gen_script_ops', 'tensorflow.python.ops.script_ops', 'tensorflow.python.data.ops.structured_function', 'tensorflow.python.data.util.random_seed', 'tensorflow.python.data.util.traverse', 'tensorflow.python.framework.smart_cond', 'tensorflow.python.ops.logging_ops', 'tensorflow.python.data.ops.dataset_ops', 'tensorflow.python.data.experimental.ops.data_service_ops', 'tensorflow.core.protobuf.service_config_pb2', 'tensorflow.python.data.experimental.service.server_lib', 'tensorflow.python.data.experimental.service', 'tensorflow.python.data.util.convert', 'tensorflow.python.data.experimental.ops.batching', 'tensorflow.python.data.experimental.ops.cardinality', 'tensorflow.python.data.ops.counter_op', 'tensorflow.python.data.experimental.ops.counter', 'tensorflow.python.data.experimental.ops.distribute', 'tensorflow.python.data.experimental.ops.enumerate_ops', 'tensorflow.python.data.ops.ignore_errors_op', 'tensorflow.python.data.experimental.ops.error_ops', 'tensorflow.python.data.experimental.ops.from_list', 'tensorflow.python.data.experimental.ops.get_single_element', 'tensorflow.python.data.experimental.ops.grouping', 'tensorflow.python.data.ops.from_tensor_slices_op', 'tensorflow.python.data.ops.readers', 'tensorflow.python.data.experimental.ops.interleave_ops', 'tensorflow.python.data.experimental.ops.io', 'tensorflow.core.util', 'tensorflow.core.util.event_pb2', 'tensorflow.python.client.timeline', 'tensorflow.python.training.session_run_hook', 'tensorflow.python.summary', 'tensorflow.python.summary.summary_iterator', 'tensorflow.python.summary.writer', 'tensorflow.python.summary.plugin_asset', 'tensorflow.python.client._pywrap_events_writer', 'tensorflow.python.summary.writer.event_file_writer', 'tensorflow.python.profiler.internal._pywrap_profiler', 'tensorflow.python.eager.profiler', 'tensorflow.python.ops.gen_summary_ops', 'tensorflow.python.ops.summary_op_util', 'tensorflow.python.ops.summary_ops_v2', 'tensorflow.python.summary.writer.event_file_writer_v2', 'tensorflow.python.summary.writer.writer', 'tensorflow.python.summary.writer.writer_cache', 'tensorflow.python.training.summary_io', 'tensorflow.python.training.basic_session_run_hooks', 'tensorflow.python.data.experimental.ops.iterator_ops', 'tensorflow.python.ops.gen_lookup_ops', 'tensorflow.python.ops.lookup_ops', 'tensorflow.python.data.experimental.ops.lookup_ops', 'opt_einsum.parser', 'opt_einsum.helpers', 'opt_einsum.blas', 'opt_einsum.paths', 'opt_einsum.path_random', 'opt_einsum.sharing', 'opt_einsum.backends.cupy', 'opt_einsum.backends.object_arrays', 'opt_einsum.backends.jax', 'opt_einsum.backends.tensorflow', 'opt_einsum.backends.theano', 'opt_einsum.backends.torch', 'opt_einsum.backends.dispatch', 'opt_einsum.backends', 'opt_einsum.contract', 'opt_einsum._version', 'opt_einsum', 'tensorflow.compiler', 'tensorflow.compiler.tf2xla', 'tensorflow.compiler.tf2xla.ops', 'tensorflow.compiler.tf2xla.ops.gen_xla_ops', 'tensorflow.python.ops.gen_special_math_ops', 'tensorflow.python.ops.special_math_ops', 'tensorflow.python.ops.sparse_ops', 'tensorflow.python.autograph.utils.context_managers', 'tensorflow.python.autograph.utils.misc', 'tensorflow.python.autograph.utils.py_func', 'tensorflow.python.autograph.utils.tensor_list', 'tensorflow.python.autograph.utils', 'tensorflow.python.autograph.utils.tensors', 'tensorflow.python.platform.device_context', 'tensorflow.python.ops.nn_ops', 'tensorflow.python.ops.sort_ops', 'tensorflow.python.autograph.operators.py_builtins', 'tensorflow.python.autograph.operators.variables', 'tensorflow.python.autograph.utils.ag_logging', 'tensorflow.python.data.experimental.ops.take_while_ops', 'tensorflow.python.types.distribute', 'tensorflow.python.autograph.operators.control_flow', 'tensorflow.python.autograph.operators.conditional_expressions', 'tensorflow.python.autograph.operators.data_structures', 'tensorflow.python.autograph.operators.exceptions', 'tensorflow.python.autograph.operators.logical', 'tensorflow.python.autograph.operators.slices', 'tensorflow.python.autograph.operators', 'tensorflow.python.autograph.core', 'tensorflow.python.autograph.pyct', 'gast.astn', 'gast.ast3', 'gast.gast', 'gast', 'tensorflow.python.autograph.pyct.anno', 'astunparse.unparser', 'astunparse.printer', 'astunparse', 'tensorflow.python.autograph.pyct.errors', 'tensorflow.python.autograph.pyct.inspect_utils', 'tensorflow.python.autograph.pyct.parser', 'tensorflow.python.autograph.pyct.qual_names', 'tensorflow.python.autograph.pyct.ast_util', 'tensorflow.python.autograph.pyct.templates', 'termcolor', 'tensorflow.python.autograph.pyct.pretty_printer', 'tensorflow.python.autograph.pyct.transformer', 'tensorflow.python.autograph.core.converter', 'tensorflow.python.autograph.impl', 'tensorflow.python.autograph.converters', 'tensorflow.python.autograph.converters.asserts', 'tensorflow.python.autograph.pyct.static_analysis', 'tensorflow.python.autograph.pyct.static_analysis.annos', 'tensorflow.python.autograph.pyct.static_analysis.activity', 'tensorflow.python.autograph.converters.break_statements', 'tensorflow.python.autograph.converters.call_trees', 'tensorflow.python.autograph.converters.conditional_expressions', 'tensorflow.python.autograph.converters.continue_statements', 'tensorflow.python.autograph.lang', 'tensorflow.python.autograph.lang.directives', 'tensorflow.python.autograph.pyct.cfg', 'tensorflow.python.autograph.pyct.origin_info', 'tensorflow.python.autograph.pyct.static_analysis.liveness', 'tensorflow.python.autograph.pyct.static_analysis.reaching_definitions', 'tensorflow.python.autograph.pyct.static_analysis.reaching_fndefs', 'tensorflow.python.autograph.converters.control_flow', 'tensorflow.python.autograph.converters.directives', 'tensorflow.python.autograph.converters.functions', 'tensorflow.python.autograph.converters.lists', 'tensorflow.python.autograph.converters.logical_expressions', 'tensorflow.python.autograph.converters.return_statements', 'tensorflow.python.autograph.converters.slices', 'tensorflow.python.autograph.converters.variables', 'tensorflow.python.autograph.core.ag_ctx', 'tensorflow.python.autograph.core.function_wrappers', 'tensorflow.python.autograph.core.unsupported_features_checker', 'tensorflow.python.autograph.core.config_lib', 'tensorflow.python.autograph.core.config', 'tensorflow.python.autograph.pyct.cache', 'tensorflow.python.autograph.impl.conversion', 'tensorflow.python.autograph.lang.special_functions', 'tensorflow.python.autograph.pyct.error_utils', 'tensorflow.python.autograph.pyct.loader', 'tensorflow.python.autograph.pyct.naming', 'tensorflow.python.autograph.pyct.transpiler', 'tensorflow.python.autograph.impl.api', 'tensorflow.python.util.all_util', 'tensorflow.python.autograph', 'tensorflow.python.ops.map_fn', 'tensorflow.python.ops.ragged.ragged_functional_ops', 'tensorflow.python.ops.ragged.ragged_math_ops', 'tensorflow.python.ops.parsing_config', 'tensorflow.python.ops.parsing_ops', 'tensorflow.python.data.experimental.ops.parsing_ops', 'tensorflow.python.data.experimental.ops.prefetching_ops', 'tensorflow.python.data.experimental.ops.random_ops', 'tensorflow.python.data.experimental.ops.readers', 'tensorflow.python.data.experimental.ops.resampling', 'tensorflow.python.data.experimental.ops.scan_ops', 'tensorflow.python.data.experimental.ops.shuffle_ops', 'tensorflow.python.data.experimental.ops.snapshot', 'tensorflow.python.data.experimental.ops.unique', 'tensorflow.python.data.experimental.ops.writers', 'tensorflow.python.data.experimental', 'tensorflow.python.data', 'tensorflow.python.feature_column', 'tensorflow.python.feature_column.utils', 'tensorflow.python.layers', 'tensorflow.python.keras.distribute', 'tensorflow.python.distribute.distribution_strategy_context', 'tensorflow.python.keras.backend_config', 'tensorflow.python.checkpoint.checkpoint_options', 'tensorflow.python.checkpoint.functional_saver', 'tensorflow.python.distribute.collective_util', 'tensorflow.python.distribute.numpy_dataset', 'tensorflow.python.distribute.reduce_util', 'tensorflow.python.distribute.packed_distributed_variable', 'tensorflow.python.saved_model.save_options', 'tensorflow.python.distribute.values_util', 'tensorflow.python.distribute.values', 'tensorflow.python.ops.custom_gradient', 'tensorflow.python.ops.losses', 'tensorflow.python.ops.confusion_matrix', 'tensorflow.python.ops.gen_ctc_ops', 'tensorflow.python.ops.inplace_ops', 'tensorflow.python.ops.linalg_ops', 'tensorflow.python.ops.nn_grad', 'tensorflow.python.ops.ctc_ops', 'tensorflow.python.ops.clip_ops', 'tensorflow.python.ops.data_flow_ops', 'tensorflow.python.ops.data_flow_grad', 'tensorflow.python.ops.embedding_ops', 'tensorflow.python.ops.gen_candidate_sampling_ops', 'tensorflow.python.ops.candidate_sampling_ops', 'tensorflow.python.ops.losses.util', 'tensorflow.python.ops.nn_impl', 'tensorflow.python.ops.nn', 'tensorflow.python.ops.gen_set_ops', 'tensorflow.python.ops.sets_impl', 'tensorflow.python.ops.sets', 'tensorflow.python.ops.weights_broadcast_ops', 'tensorflow.python.ops.losses.losses_impl', 'tensorflow.python.distribute.distribute_lib', 'tensorflow.python.compiler', 'tensorflow.python.compiler.xla.jit', 'tensorflow.compiler.jit', 'tensorflow.compiler.jit.ops', 'tensorflow.compiler.jit.ops.xla_ops', 'tensorflow.compiler.jit.ops.xla_ops_grad', 'tensorflow.python.distribute.summary_op_util', 'tensorflow.python.compiler.xla.xla', 'tensorflow.python.compiler.xla', 'tensorflow.python.compiler.xla.experimental', 'tensorflow.compiler.tf2xla.python', 'tensorflow.compiler.xla', 'tensorflow.compiler.xla.xla_data_pb2', 'tensorflow.python.ops.gen_manip_ops', 'tensorflow.python.ops.manip_ops', 'tensorflow.python.ops.numpy_ops.np_export', 'tensorflow.python.ops.numpy_ops.np_dtypes', 'tensorflow.python.ops.numpy_ops.np_arrays', 'tensorflow.python.ops.numpy_ops.np_utils', 'tensorflow.python.ops.numpy_ops.np_array_ops', 'tensorflow.python.ops.numpy_ops.np_random', 'tensorflow.python.ops.numpy_ops.np_math_ops', 'tensorflow.python.ops.numpy_ops.np_config', 'tensorflow.python.ops.numpy_ops', 'tensorflow.compiler.tf2xla.python.xla', 'tensorflow.python.compiler.xla.experimental.xla_sharding', 'tensorflow.core.protobuf.tpu', 'tensorflow.core.protobuf.tpu.dynamic_padding_pb2', 'tensorflow.compiler.xla.service', 'tensorflow.compiler.xla.service.hlo_pb2', 'tensorflow.core.protobuf.tpu.optimization_parameters_pb2', 'tensorflow.core.protobuf.tpu.tpu_embedding_configuration_pb2', 'tensorflow.core.protobuf.tpu.topology_pb2', 'tensorflow.python.tpu.topology', 'tensorflow.python.tpu.device_assignment', 'tensorflow.python.tpu.tpu_name_util', 'tensorflow.python.tpu.tpu_sharding', 'tensorflow.python.tpu.tpu_feed', 'tensorflow.python.tpu.tpu', 'tensorflow.python.distribute.tpu_util', 'tensorflow.python.ops.gen_tpu_partition_ops', 'tensorflow.python.distribute.tpu_replicated_variable', 'tensorflow.python.distribute.tpu_values', 'tensorflow.python.distribute.distribute_utils', 'tensorflow.python.ops.gen_image_ops', 'tensorflow.python.ops.gen_spectral_ops', 'tensorflow.python.platform.flags', 'tensorflow.python.ops.parallel_for.pfor', 'tensorflow.python.ops.parallel_for.control_flow_ops', 'tensorflow.python.ops.array_grad', 'tensorflow.python.ops.control_flow_grad', 'tensorflow.python.ops.image_grad', 'tensorflow.python.ops.linalg', 'tensorflow.python.ops.linalg.linalg_impl', 'tensorflow.python.ops.linalg_grad', 'tensorflow.python.ops.manip_grad', 'tensorflow.python.ops.math_grad', 'tensorflow.python.ops.optional_grad', 'tensorflow.python.ops.random_grad', 'tensorflow.python.ops.gradients_impl', 'tensorflow.python.ops.parallel_for.gradients', 'tensorflow.python.ops.parallel_for', 'tensorflow.python.eager.forwardprop', 'tensorflow.python.ops.gradients', 'tensorflow.python.training.slot_creator', 'tensorflow.python.training.optimizer', 'tensorflow.python.checkpoint.util', 'tensorflow.python.checkpoint.save_util_v1', 'tensorflow.python.checkpoint.graph_view', 'tensorflow.python.checkpoint.restore', 'tensorflow.python.checkpoint.save_util', 'tensorflow.python.saved_model.constants', 'tensorflow.python.framework.immutable_dict', 'tensorflow.python.framework.extension_type_field', 'tensorflow.core.protobuf.composite_tensor_variant_pb2', 'tensorflow.python.ops.gen_composite_tensor_ops', 'tensorflow.python.ops.composite_tensor_ops', 'tensorflow.python.framework.extension_type', 'tensorflow.python.saved_model.nested_structure_coder', 'tensorflow.python.saved_model.utils_impl', 'tensorflow.python.trackable.autotrackable', 'tensorflow.python.checkpoint.checkpoint', 'tensorflow.python.distribute.distribute_coordinator_context', 'tensorflow.python.ops.resources', 'google.protobuf.json_format', 'tensorflow.python.summary.summary', 'tensorflow.python.training.coordinator', 'tensorflow.core.protobuf.error_codes_pb2', 'tensorflow.core.protobuf.queue_runner_pb2', 'tensorflow.python.training.queue_runner_impl', 'tensorflow.python.training.queue_runner', 'tensorflow.python.training.session_manager', 'tensorflow.python.training.monitored_session', 'tensorflow.core.protobuf.device_filters_pb2', 'tensorflow.core.protobuf.tensorflow_server_pb2', 'tensorflow.python.training.server_lib', 'tensorflow.python.keras.distribute.distribute_coordinator_utils', 'tensorflow.python.keras.engine', 'tensorflow.python.keras.utils', 'tensorflow.python.keras.utils.object_identity', 'tensorflow.python.ops.gen_ragged_array_ops', 'tensorflow.python.ops.ragged.dynamic_ragged_shape', 'tensorflow.python.ops.ragged.ragged_array_ops', 'tensorflow.python.ops.ragged.ragged_gather_ops', 'tensorflow.python.ops.ragged.ragged_getitem', 'tensorflow.python.ops.ragged.ragged_operators', 'tensorflow.python.keras.engine.keras_tensor', 'tensorflow.python.keras.utils.control_flow_util', 'tensorflow.python.keras.utils.tf_contextlib', 'tensorflow.python.keras.utils.tf_inspect', 'tensorflow.python.ops.image_ops_impl', 'tensorflow.python.ops.image_ops', 'tensorflow.python.ops.tensor_array_grad', 'tensorflow.python.training.moving_averages', 'tensorflow.python.keras.backend', 'tensorflow.python.keras.distribute.distributed_training_utils', 'tensorflow.python.keras.utils.generic_utils', 'tensorflow.python.keras.constraints', 'tensorflow.python.keras.initializers.initializers_v1', 'tensorflow.python.keras.initializers.initializers_v2', 'tensorflow.python.keras.initializers', 'tensorflow.python.keras.regularizers', 'tensorflow.python.distribute.coordinator', 'multiprocessing.dummy.connection', 'multiprocessing.dummy', 'multiprocessing.util', '_multiprocessing', 'multiprocessing.connection', 'multiprocessing.pool', 'tensorflow.core.framework.device_attributes_pb2', 'tensorflow.python.client._pywrap_device_lib', 'tensorflow.python.client.device_lib', 'tensorflow.python.ops.gen_collective_ops', 'tensorflow.python.ops.collective_ops', 'tensorflow.python.ops.gen_nccl_ops', 'tensorflow.python.ops.nccl_ops', 'tensorflow.python.distribute.cross_device_utils', 'tensorflow.python.distribute.coordinator.coordinator_context', 'tensorflow.python.distribute.ps_values', 'tensorflow.core.framework.kernel_def_pb2', 'tensorflow.python.framework.kernels', 'tensorflow.python.distribute.cross_device_ops', 'tensorflow.python.ops.structured', 'tensorflow.python.ops.ragged.ragged_factory_ops', 'tensorflow.python.ops.structured.structured_tensor', 'tensorflow.python.framework.type_utils', 'tensorflow.python.data.ops.multi_device_iterator_ops', 'tensorflow.python.distribute.input_ops', 'tensorflow.python.distribute.input_lib', 'tensorflow.python.distribute.v1', 'tensorflow.python.distribute.v1.input_lib', 'tensorflow.python.distribute.input_util', 'tensorflow.python.distribute.shared_variable_creator', 'tensorflow.python.distribute.mirrored_run', 'tensorflow.python.distribute.multi_worker_util', 'tensorflow.python.distribute.cluster_resolver.cluster_resolver', 'tensorflow.python.distribute.cluster_resolver.gce_cluster_resolver', 'tensorflow.python.distribute.cluster_resolver.kubernetes_cluster_resolver', 'tensorflow.python.distribute.cluster_resolver.slurm_cluster_resolver', 'tensorflow.python.distribute.cluster_resolver.tfconfig_cluster_resolver', 'tensorflow.python.distribute.cluster_resolver.tpu', 'tensorflow.python.tpu.tpu_system_metadata', 'tensorflow.python.tpu.client', 'tensorflow.python.tpu.client.client', 'tensorflow.python.distribute.cluster_resolver.tpu.tpu_cluster_resolver', 'tensorflow.python.distribute.cluster_resolver.tpu_cluster_resolver', 'tensorflow.python.distribute.cluster_resolver', 'tensorflow.python.training.device_setter', 'tensorflow.python.distribute.parameter_server_strategy', 'tensorflow.python.ops.partitioned_variables', 'tensorflow.python.distribute.sharded_variable', 'tensorflow.python.platform.remote_utils', 'tensorflow.python.eager.remote', 'tensorflow.python.util.keras_deps', 'tensorflow.python.distribute.parameter_server_strategy_v2', 'tensorflow.python.distribute.coordinator.metric_utils', 'tensorflow.python.distribute.coordinator.values', 'tensorflow.python.distribute.coordinator.watchdog', 'tensorflow.python.eager.cancellation', 'tensorflow.python.distribute.coordinator.cluster_coordinator', 'tensorflow.python.keras.utils.tf_utils', 'tensorflow.python.keras.engine.base_layer_utils', 'tensorflow.python.keras.engine.input_spec', 'tensorflow.python.keras.saving', 'tensorflow.python.keras.saving.saved_model', 'tensorflow.python.keras.saving.saved_model.json_utils', 'tensorflow.python.keras.engine.node', 'tensorflow.python.keras.mixed_precision', 'tensorflow.python.keras.mixed_precision.autocast_variable', 'tensorflow.python.distribute.mirrored_strategy', 'tensorflow.python.tpu.tpu_strategy_util', 'tensorflow.python.distribute.collective_all_reduce_strategy', 'tensorflow.python.distribute.one_device_strategy', 'tensorflow.python.tpu.tpu_hardware_feature', 'tensorflow.python.platform.analytics', 'tensorflow.python.tpu.tensor_tracer_flags', 'tensorflow.python.tpu.tensor_tracer_pb2', 'tensorflow.python.tpu.tensor_tracer_report', 'tensorflow.python.tpu.tensor_tracer', 'tensorflow.python.tpu.training_loop', 'tensorflow.python.distribute.tpu_strategy', 'tensorflow.python.keras.optimizer_v1', 'tensorflow.python.keras.optimizer_v2', 'tensorflow.python.distribute.central_storage_strategy', 'tensorflow.python.keras.optimizer_v2.learning_rate_schedule', 'tensorflow.python.keras.optimizer_v2.utils', 'tensorflow.python.keras.utils.layer_utils', 'tensorflow.python.keras.optimizer_v2.optimizer_v2', 'tensorflow.python.ops.gen_training_ops', 'tensorflow.python.training.gen_training_ops', 'tensorflow.python.keras.optimizer_v2.adadelta', 'tensorflow.python.keras.optimizer_v2.adagrad', 'tensorflow.python.keras.optimizer_v2.adam', 'tensorflow.python.keras.optimizer_v2.adamax', 'tensorflow.python.keras.optimizer_v2.ftrl', 'tensorflow.python.keras.optimizer_v2.gradient_descent', 'tensorflow.python.keras.optimizer_v2.nadam', 'tensorflow.python.keras.optimizer_v2.rmsprop', 'tensorflow.python.keras.optimizers', 'tensorflow.python.training.experimental.loss_scale', 'tensorflow.python.keras.mixed_precision.loss_scale', 'tensorflow.python.trackable.base_delegate', 'tensorflow.python.training.experimental.loss_scale_optimizer', 'tensorflow.python.training.experimental.mixed_precision', 'tensorflow.python.keras.mixed_precision.loss_scale_optimizer', 'tensorflow.python.keras.mixed_precision.device_compatibility_check', 'tensorflow.python.keras.mixed_precision.policy', 'tensorflow.python.keras.saving.saved_model.utils', 'tensorflow.python.keras.saving.saved_model.base_serialization', 'tensorflow.python.keras.saving.saved_model.constants', 'tensorflow.python.keras.utils.losses_utils', 'tensorflow.python.ops.ragged.ragged_map_ops', 'tensorflow.python.keras.losses', 'tensorflow.python.keras.utils.version_utils', 'tensorflow.python.keras.utils.io_utils', 'tensorflow.python.keras.saving.saving_utils', 'tensorflow.python.keras.protobuf', 'tensorflow.python.keras.protobuf.versions_pb2', 'tensorflow.python.keras.protobuf.saved_metadata_pb2', 'tensorflow.python.keras.saving.saved_model.serialized_attributes', 'tensorflow.python.keras.utils.metrics_utils', 'tensorflow.python.framework.function_def_to_graph', 'tensorflow.python.saved_model.function_deserialization', 'tensorflow.python.saved_model.load_options', 'tensorflow.python.eager.wrap_function', 'tensorflow.core.protobuf.saved_model_pb2', 'tensorflow.python.saved_model.signature_constants', 'tensorflow.python.saved_model.signature_def_utils_impl', 'tensorflow.python.saved_model.signature_def_utils', 'tensorflow.python.saved_model.loader_impl', 'tensorflow.python.saved_model.function_serialization', 'tensorflow.python.saved_model.signature_serialization', 'tensorflow.python.saved_model.load_v1_in_v2', 'tensorflow.python.saved_model.load', 'tensorflow.python.keras.saving.saved_model.load', 'tensorflow.python.keras.saving.saved_model.save_impl', 'tensorflow.python.keras.saving.saved_model.layer_serialization', 'tensorflow.python.module', 'tensorflow.python.module.module', 'tensorflow.python.keras.engine.base_layer', 'tensorflow.python.keras.engine.input_layer', 'tensorflow.python.keras.engine.training_utils', 'tarfile', 'six.moves.urllib', 'six.moves.urllib.request', 'tensorflow.python.keras.utils.data_utils', 'tensorflow.python.keras.utils.dataset_creator', 'tensorflow.python.keras.engine.data_adapter', 'tensorflow.python.keras.engine.base_preprocessing_layer', 'tensorflow.python.keras.layers.advanced_activations', 'tensorflow.python.keras.utils.conv_utils', 'tensorflow.python.keras.layers.pooling', 'tensorflow.python.keras.layers.convolutional', 'tensorflow.python.ops.gen_cudnn_rnn_ops', 'tensorflow.python.ops.cudnn_rnn_grad', 'tensorflow.python.ops.gen_rnn_ops', 'tensorflow.python.ops.rnn_grad', 'tensorflow.python.ops.sparse_grad', 'tensorflow.python.ops.state_grad', 'tensorflow.python.ops.gen_batch_ops', 'tensorflow.python.ops.batch_ops', 'tensorflow.python.ops.critical_section_ops', 'tensorflow.python.ops.histogram_ops', 'tensorflow.python.ops.numerics', 'tensorflow.python.ops.gen_decode_proto_ops', 'tensorflow.python.ops.gen_encode_proto_ops', 'tensorflow.python.ops.proto_ops', 'tensorflow.python.ops.ragged.ragged_tensor_shape', 'tensorflow.python.ops.ragged.ragged_dispatch', 'tensorflow.python.ops.template', 'tensorflow.compiler.tf2tensorrt', 'tensorflow.compiler.tf2tensorrt._pywrap_py_utils', 'tensorflow.python.compiler.tensorrt.utils', 'tensorflow.python.grappler', 'tensorflow.python.grappler._pywrap_tf_optimizer', 'tensorflow.core.grappler', 'tensorflow.core.grappler.costs', 'tensorflow.core.protobuf.device_properties_pb2', 'tensorflow.core.grappler.costs.op_performance_data_pb2', 'tensorflow.python.grappler._pywrap_tf_cluster', 'tensorflow.python.grappler.cluster', 'tensorflow.python.grappler.tf_optimizer', 'tensorflow.python.framework.convert_to_constants', 'tensorflow.python.saved_model.builder_impl', 'tensorflow.python.saved_model.builder', 'tensorflow.python.saved_model.loader', 'tensorflow.python.saved_model.tag_constants', 'tensorflow.python.saved_model.tracing_utils', 'tensorflow.python.saved_model.save', 'tensorflow.compiler.tf2tensorrt.ops', 'tensorflow.compiler.tf2tensorrt.ops.gen_trt_ops', 'tensorflow.python.compiler.tensorrt.trt_convert', 'tensorflow.python.compiler.tensorrt', 'tensorflow.python.ops.standard_ops', 'tensorflow.python.keras.layers.core', 'tensorflow.python.keras.layers.dense_attention', 'tensorflow.python.keras.layers.embeddings', 'tensorflow.python.keras.layers.merge', 'tensorflow.python.keras.layers.recurrent', 'tensorflow.python.platform.sysconfig', 'tensorflow.python.keras.layers.recurrent_v2', 'tensorflow.python.keras.layers.convolutional_recurrent', 'tensorflow.python.keras.layers.cudnn_recurrent', 'tensorflow.python.keras.layers.legacy_rnn', 'tensorflow.python.keras.layers.legacy_rnn.rnn_cell_wrapper_impl', 'tensorflow.python.keras.layers.rnn_cell_wrapper_v2', 'tensorflow.python.keras.layers.serialization', 'tensorflow.python.keras.layers', 'tensorflow.python.keras.activations', 'tensorflow.python.keras.saving.saved_model.metric_serialization', 'tensorflow.python.keras.metrics', 'tensorflow.python.keras.distribute.distributed_file_utils', 'tensorflow.python.saved_model.model_utils.export_output', 'tensorflow.python.saved_model.utils', 'tensorflow.python.saved_model.model_utils.mode_keys', 'tensorflow.python.saved_model.model_utils.export_utils', 'tensorflow.python.saved_model.model_utils', 'tensorflow.python.keras.utils.mode_keys', 'tensorflow.python.keras.distribute.worker_training_state', 'tensorflow.python.profiler.profiler_v2', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3.exceptions', 'urllib3._version', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.wait', 'urllib3.util.connection', '_cffi_backend', '_brotli.lib', '_brotli', 'brotli._brotli', 'brotli.brotli', 'brotli', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.retry', 'urllib3.util.url', 'urllib3.util.ssltransport', 'urllib3.util.ssl_', 'urllib3.util.timeout', 'urllib3.util', 'urllib3.util.proxy', 'urllib3._collections', 'urllib3.connection', 'urllib3.fields', 'urllib3.filepost', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.request', 'urllib3.response', 'urllib3.util.queue', 'urllib3.connectionpool', 'urllib3.poolmanager', 'urllib3', 'chardet.enums', 'chardet.charsetprober', 'chardet.charsetgroupprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.escprober', 'chardet.latin1prober', 'chardet.mbcssm', 'chardet.utf8prober', 'chardet.mbcharsetprober', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.chardistribution', 'chardet.jpcntx', 'chardet.sjisprober', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.mbcsgroupprober', 'chardet.hebrewprober', 'chardet.sbcharsetprober', 'chardet.langbulgarianmodel', 'chardet.langgreekmodel', 'chardet.langhebrewmodel', 'chardet.langrussianmodel', 'chardet.langthaimodel', 'chardet.langturkishmodel', 'chardet.sbcsgroupprober', 'chardet.universaldetector', 'chardet.version', 'chardet', 'http.cookiejar', 'http.cookies', 'requests.compat', 'requests.exceptions', 'charset_normalizer.constant', '_multibytecodec', 'charset_normalizer.utils', 'charset_normalizer.md', 'charset_normalizer.models', 'charset_normalizer.assets', 'charset_normalizer.cd', 'charset_normalizer.api', 'charset_normalizer.legacy', 'charset_normalizer.version', 'charset_normalizer', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3._version', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssltransport', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util', 'requests.packages.urllib3.util.proxy', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.request', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.poolmanager', 'requests.packages.urllib3', 'idna.package_data', 'idna.idnadata', 'idna.intranges', 'idna.core', 'idna', 'requests.packages.idna.package_data', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.idna.core', 'requests.packages.idna', 'requests.packages.chardet', 'requests.packages', 'certifi.core', 'certifi', 'requests.certs', 'requests.__version__', 'requests._internal_utils', 'requests.cookies', 'requests.structures', 'requests.utils', 'requests.auth', 'requests.hooks', 'requests.status_codes', 'requests.models', 'socks', 'urllib3.contrib.socks', 'requests.adapters', 'requests.sessions', 'requests.api', 'requests', 'tensorflow.python.keras.callbacks', 'tensorflow.python.keras.engine.compile_utils', 'tensorflow.python.keras.saving.model_config', 'h5py._errors', '_cython_0_29_23', 'h5py.defs', 'h5py._objects', 'h5py.h5py_warnings', 'h5py.h5', 'h5py.version', 'h5py.h5r', 'h5py.utils', 'h5py.h5s', 'h5py.h5ac', 'h5py.h5p', 'h5py.h5t', 'h5py._conv', 'h5py.h5z', 'h5py._proxy', 'h5py.h5a', 'h5py.h5d', 'h5py.h5ds', 'h5py.h5g', 'h5py.h5i', 'h5py.h5f', 'h5py.h5fd', 'h5py.h5pl', 'h5py._hl', 'h5py._hl.compat', 'h5py._hl.filters', 'h5py._hl.base', 'h5py.h5o', 'h5py.h5l', 'h5py._selector', 'h5py._hl.selections', 'h5py._hl.selections2', 'h5py._hl.datatype', 'h5py._hl.vds', 'h5py._hl.dataset', 'h5py._hl.group', 'h5py._hl.files', 'h5py._hl.attrs', 'h5py', 'tensorflow.python.keras.saving.hdf5_format', 'tensorflow.python.keras.saving.saved_model.load_context', 'tensorflow.python.keras.saving.saved_model.save', 'tensorflow.python.keras.saving.save', 'tensorflow.python.keras.saving.saved_model.model_serialization', 'tensorflow.python.keras.engine.training', 'tensorflow.python.keras.saving.saved_model.network_serialization', 'tensorflow.python.keras.engine.functional', 'tensorflow.python.keras.engine.sequential', 'tensorflow.python.keras.engine.training_utils_v1', 'tensorflow.python.keras.distribute.distributed_training_utils_v1', 'scipy._lib._testutils', 'scipy._lib', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback_c', 'scipy._lib._ccallback', 'scipy', 'scipy._lib._util', 'scipy.sparse.sputils', 'scipy.sparse.base', 'scipy.sparse._sparsetools', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.compressed', 'scipy.sparse.csr', 'scipy.sparse.csc', 'scipy.sparse._csparsetools', 'scipy.sparse.lil', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.sparse.csgraph', 'scipy.sparse', 'tensorflow.python.keras.engine.training_arrays_v1', 'tensorflow.python.keras.engine.partial_batch_padding_handler', 'tensorflow.python.keras.engine.training_distributed_v1', 'tensorflow.python.keras.engine.training_eager_v1', 'tensorflow.python.keras.engine.training_generator_v1', 'tensorflow.python.keras.engine.training_v1', 'tensorflow.python.keras.models', 'tensorflow.python.keras', 'tensorflow.python.keras.legacy_tf_layers', 'tensorflow.python.keras.legacy_tf_layers.variable_scope_shim', 'tensorflow.python.keras.legacy_tf_layers.base', 'tensorflow.python.layers.base', 'tensorflow.python.training.checkpoint_utils', 'tensorflow.python.feature_column.feature_column', 'tensorflow.python.feature_column.feature_column_v2', 'tensorflow.python.feature_column.sequence_feature_column', 'tensorflow.python.feature_column.serialization', 'tensorflow.python.feature_column.feature_column_lib', 'tensorflow.python.ops.gen_count_ops', 'tensorflow.python.ops.bincount_ops', 'tensorflow.python.ops.control_flow_util_v2', 'tensorflow.python.ops.cond_v2', 'tensorflow.python.ops.gradient_checker_v2', 'tensorflow.python.ops.metrics_impl', 'tensorflow.python.ops.metrics', 'tensorflow.python.ops.gen_stateful_random_ops', 'tensorflow.python.ops.stateful_random_ops', 'tensorflow.python.ops.while_v2_indexed_slices_rewriter', 'tensorflow.python.ops.while_v2', 'tensorflow.python.ops.distributions', 'tensorflow.python.ops.distributions.kullback_leibler', 'tensorflow.python.ops.distributions.util', 'tensorflow.python.ops.distributions.distribution', 'tensorflow.python.ops.distributions.bernoulli', 'tensorflow.python.ops.distributions.beta', 'tensorflow.python.ops.distributions.categorical', 'tensorflow.python.ops.distributions.dirichlet', 'tensorflow.python.ops.distributions.dirichlet_multinomial', 'tensorflow.python.ops.distributions.gamma', 'tensorflow.python.ops.distributions.exponential', 'tensorflow.python.ops.distributions.special_math', 'tensorflow.python.ops.distributions.laplace', 'tensorflow.python.ops.distributions.multinomial', 'tensorflow.python.ops.distributions.normal', 'tensorflow.python.ops.distributions.student_t', 'tensorflow.python.ops.distributions.uniform', 'tensorflow.python.ops.distributions.distributions', 'tensorflow.python.ops.linalg.linear_operator_algebra', 'tensorflow.python.ops.linalg.linear_operator_util', 'tensorflow.python.ops.linalg.slicing', 'tensorflow.python.ops.linalg.linear_operator', 'tensorflow.python.ops.linalg.linear_operator_adjoint', 'tensorflow.python.ops.linalg.linear_operator_block_diag', 'tensorflow.python.ops.signal', 'tensorflow.python.ops.signal.fft_ops', 'tensorflow.python.ops.linalg.linear_operator_circulant', 'tensorflow.python.ops.linalg.linear_operator_diag', 'tensorflow.python.ops.linalg.linear_operator_householder', 'tensorflow.python.ops.linalg.linear_operator_identity', 'tensorflow.python.ops.linalg.linear_operator_kronecker', 'tensorflow.python.ops.linalg.adjoint_registrations', 'tensorflow.python.ops.linalg.linear_operator_lower_triangular', 'tensorflow.python.ops.linalg.cholesky_registrations', 'tensorflow.python.ops.linalg.linear_operator_full_matrix', 'tensorflow.python.ops.linalg.linear_operator_addition', 'tensorflow.python.ops.linalg.linear_operator_block_lower_triangular', 'tensorflow.python.ops.linalg.linear_operator_inversion', 'tensorflow.python.ops.linalg.inverse_registrations', 'tensorflow.python.ops.linalg.linear_operator_composition', 'tensorflow.python.ops.linalg.linear_operator_zeros', 'tensorflow.python.ops.linalg.registrations_util', 'tensorflow.python.ops.linalg.matmul_registrations', 'tensorflow.python.ops.linalg.solve_registrations', 'tensorflow.python.ops.linalg.linear_operator_low_rank_update', 'tensorflow.python.ops.linalg.linear_operator_permutation', 'tensorflow.python.ops.linalg.linear_operator_toeplitz', 'tensorflow.python.ops.linalg.linear_operator_tridiag', 'tensorflow.python.ops.linalg.linalg', 'tensorflow.python.ops.linalg.sparse', 'tensorflow.python.ops.linalg.sparse.conjugate_gradient', 'tensorflow.python.ops.linalg.sparse.gen_sparse_csr_matrix_ops', 'tensorflow.python.ops.linalg.sparse.sparse_csr_matrix_ops', 'tensorflow.python.ops.linalg.sparse.sparse_csr_matrix_grad', 'tensorflow.python.ops.linalg.sparse.sparse', 'tensorflow.python.ops.losses.losses', 'tensorflow.python.ops.ragged.ragged_batch_gather_ops', 'tensorflow.python.ops.ragged.ragged_concat_ops', 'tensorflow.python.ops.ragged.ragged_where_op', 'tensorflow.python.ops.ragged.ragged_batch_gather_with_default_op', 'tensorflow.python.ops.ragged.ragged_check_ops', 'tensorflow.python.ops.ragged.ragged_conversion_ops', 'tensorflow.python.ops.ragged.ragged_image_ops', 'tensorflow.python.ops.ragged.ragged_squeeze_op', 'tensorflow.python.ops.ragged.ragged_string_ops', 'tensorflow.python.ops.ragged.ragged_ops', 'tensorflow.python.ops.signal.dct_ops', 'fractions', 'tensorflow.python.ops.signal.util_ops', 'tensorflow.python.ops.signal.shape_ops', 'tensorflow.python.ops.signal.mel_ops', 'tensorflow.python.ops.signal.mfcc_ops', 'tensorflow.python.ops.signal.reconstruction_ops', 'tensorflow.python.ops.signal.window_ops', 'tensorflow.python.ops.signal.spectral_ops', 'tensorflow.python.ops.signal.signal', 'tensorflow.python.ops.structured.structured_array_ops', 'tensorflow.python.ops.structured.structured_ops', 'tensorflow.core.profiler', 'tensorflow.core.profiler.tfprof_log_pb2', 'tensorflow.core.profiler.tfprof_output_pb2', 'tensorflow.core.profiler.tfprof_options_pb2', 'tensorflow.python.profiler.internal.flops_registry', 'tensorflow.python.profiler.tfprof_logger', 'tensorflow.python.profiler.option_builder', 'tensorflow.python.util._pywrap_tfprof', 'tensorflow.python.profiler.model_analyzer', 'tensorflow.python.profiler.profiler', 'tensorflow.python.profiler.profiler_client', 'tensorflow.python.saved_model.main_op_impl', 'tensorflow.python.saved_model.main_op', 'tensorflow.python.saved_model.method_name_updater', 'tensorflow.python.saved_model.simple_save', 'tensorflow.python.saved_model.saved_model', 'tensorflow.python.tpu.bfloat16', 'tensorflow.python.tpu.feature_column', 'tensorflow.python.tpu.feature_column_v2', 'tensorflow.python.tpu.tpu_embedding', 'tensorflow.python.ops.init_ops_v2', 'tensorflow.python.tpu.tpu_embedding_v2_utils', 'tensorflow.python.tpu.tpu_embedding_base', 'tensorflow.python.tpu.tpu_embedding_for_serving', 'tensorflow.python.tpu.tpu_embedding_v1', 'tensorflow.python.tpu.tpu_embedding_v2', 'tensorflow.python.tpu.tpu_optimizer', 'tensorflow.python.tpu.api', 'tensorflow.python.user_ops', 'tensorflow.python.user_ops.ops', 'tensorflow.python.user_ops.ops.gen_user_ops', 'tensorflow.python.user_ops.user_ops', 'tensorflow.python.ops.gen_audio_ops', 'tensorflow.python.ops.gen_boosted_trees_ops', 'tensorflow.python.ops.gen_sendrecv_ops', 'tensorflow.python.ops.gen_uniform_quant_ops', 'tensorflow.python.ops.gen_sdca_ops', 'tensorflow.python.ops.sdca_ops', 'tensorflow.python.training.training_ops', 'tensorflow.python.training.adadelta', 'tensorflow.python.training.adagrad', 'tensorflow.python.training.adagrad_da', 'tensorflow.python.training.proximal_adagrad', 'tensorflow.python.training.adam', 'tensorflow.python.training.ftrl', 'tensorflow.python.training.momentum', 'tensorflow.python.training.rmsprop', 'tensorflow.python.training.gradient_descent', 'tensorflow.python.training.proximal_gradient_descent', 'tensorflow.python.training.sync_replicas_optimizer', 'tensorflow.python.layers.utils', 'tensorflow.python.training.input', 'tensorflow.python.training.basic_loops', 'tensorflow.python.training.supervisor', 'tensorflow.python.ops.gen_checkpoint_ops', 'tensorflow.python.training.checkpoint_ops', 'tensorflow.python.training.warm_starting_util', 'tensorflow.core.example', 'tensorflow.core.example.feature_pb2', 'tensorflow.core.example.example_pb2', 'tensorflow.python.keras.optimizer_v2.legacy_learning_rate_decay', 'tensorflow.python.training.learning_rate_decay', 'tensorflow.python.training.training', 'tensorflow.python._pywrap_quantize_training', 'tensorflow.python.training.quantize_training', 'tensorflow.python.platform.app', 'tensorflow.python.platform.resource_loader', 'absl.testing', 'absl.testing._pretty_print_reporter', 'xml.sax.handler', 'xml.sax._exceptions', 'xml.sax.xmlreader', 'xml.sax', 'xml.sax.saxutils', 'absl.testing.xml_reporter', 'absl.testing.absltest', 'absl.testing.parameterized', 'tensorflow.python._pywrap_sanitizers', 'tensorflow.python.pywrap_sanitizers', 'tensorflow.python.framework._test_metrics_util', 'tensorflow.python.framework.gpu_util', 'tensorflow.python.platform._pywrap_stacktrace_handler', 'tensorflow.core.util.test_log_pb2', 'tensorflow.python.platform.benchmark', 'tensorflow.python.platform.googletest', 'tensorflow.python.util._pywrap_util_port', 'tensorflow.python.util.protobuf', 'tensorflow.python.util.protobuf.compare', 'tensorflow.python.framework.test_util', 'tensorflow.python.ops.gradient_checker', 'tensorflow.python.platform.test', 'tensorflow.python.ops.control_flow_v2_toggles', 'tensorflow.python.compat.v2_compat', 'tensorflow.python.keras.layers.legacy_rnn.rnn_cell_impl', 'tensorflow.python.ops.rnn_cell_impl', 'tensorflow.python.ops.rnn', 'tensorflow.python.ops.rnn_cell', 'tensorflow.python.debug.lib', 'tensorflow.python.debug.lib.debug_graphs', 'tensorflow.python.debug.lib.debug_data', 'tensorflow.python.debug.lib.debug_gradients', 'tensorflow.python.debug.lib.debug_utils', 'tensorflow.python.debug.wrappers', 'tensorflow.python.debug.wrappers.framework', 'tensorflow.python.debug.wrappers.dumping_wrapper', 'tensorflow.python.debug.lib.common', 'tensorflow.python.debug.wrappers.grpc_wrapper', 'tensorflow.python.debug.cli', 'tensorflow.python.debug.cli.debugger_cli_common', 'tensorflow.python.debug.cli.cli_config', 'tensorflow.python.debug.cli.command_parser', 'tensorflow.python.debug.cli.tensor_format', 'tensorflow.python.debug.cli.cli_shared', 'tensorflow.python.debug.cli.evaluator', 'tensorflow.python.debug.cli.ui_factory', 'tensorflow.python.debug.lib.profiling', 'tensorflow.python.debug.lib.source_utils', 'tensorflow.python.debug.cli.analyzer_cli', 'tensorflow.python.debug.cli.profile_analyzer_cli', 'tensorflow.python.debug.wrappers.local_cli_wrapper', 'tensorflow.python.debug.wrappers.hooks', 'tensorflow.python.debug', 'tensorflow.core.protobuf.debug_event_pb2', 'tensorflow.python.debug.lib.op_callbacks_common', 'tensorflow.python.ops.gen_debug_ops', 'tensorflow.python.debug.lib.check_numerics_callback', 'tensorflow.python.client._pywrap_debug_events_writer', 'tensorflow.python.debug.lib.debug_events_writer', 'tensorflow.python.debug.lib.dumping_callback', 'tensorflow.python.dlpack', 'tensorflow.python.dlpack.dlpack', 'tensorflow.python.compiler.mlir', 'tensorflow.python._pywrap_mlir', 'tensorflow.python.pywrap_mlir', 'tensorflow.python.compiler.mlir.mlir', 'tensorflow.python', 'tensorflow.python.tools', 'tensorflow.python.tools.module_util', 'tensorflow._api', 'tensorflow._api.v2', 'tensorflow._api.v2.__internal__.autograph', 'tensorflow._api.v2.__internal__.decorator', 'tensorflow._api.v2.__internal__.dispatch', 'tensorflow.python.eager.test', 'tensorflow.python.distribute.multi_process_lib', 'tblib.cpython', 'tblib', 'tblib.pickling_support', 'tensorflow.python.distribute.multi_process_runner', 'tensorflow.python.distribute.distribute_coordinator', 'tensorflow.python.distribute.multi_worker_test_base', 'tensorflow.python.framework.test_combinations', 'tensorflow.python.framework.combinations', 'tensorflow.python.distribute.combinations', 'tensorflow.python.distribute.test_util', 'tensorflow.python.distribute.strategy_combinations', 'tensorflow._api.v2.__internal__.distribute.combinations', 'tensorflow.python.distribute.merge_call_interim', 'tensorflow._api.v2.__internal__.distribute.interim', 'tensorflow._api.v2.__internal__.distribute.multi_process_runner', 'tensorflow._api.v2.__internal__.distribute', 'tensorflow._api.v2.__internal__.eager_context', 'tensorflow._api.v2.__internal__.feature_column', 'tensorflow._api.v2.__internal__.function', 'tensorflow._api.v2.__internal__.graph_util', 'tensorflow._api.v2.__internal__.mixed_precision', 'tensorflow._api.v2.__internal__.monitoring', 'tensorflow._api.v2.__internal__.nest', 'tensorflow._api.v2.__internal__.ops', 'tensorflow._api.v2.__internal__.saved_model.load', 'tensorflow._api.v2.__internal__.saved_model', 'tensorflow._api.v2.__internal__.smart_cond', 'tensorflow._api.v2.__internal__.test.combinations', 'tensorflow._api.v2.__internal__.test', 'tensorflow._api.v2.__internal__.tf2', 'tensorflow._api.v2.__internal__.tracking', 'tensorflow._api.v2.__internal__.train', 'tensorflow._api.v2.__internal__.types', 'tensorflow._api.v2.__internal__', 'tensorflow._api.v2.__operators__', 'tensorflow._api.v2.audio', 'tensorflow._api.v2.autodiff', 'tensorflow._api.v2.autograph.experimental', 'tensorflow._api.v2.autograph', 'tensorflow._api.v2.bitwise', 'tensorflow._api.v2.compat.v1.app', 'tensorflow._api.v2.compat.v1.audio', 'tensorflow._api.v2.compat.v1.autograph.experimental', 'tensorflow._api.v2.compat.v1.autograph', 'tensorflow._api.v2.compat.v1.bitwise', 'tensorflow._api.v2.compat.v1.compat.v1.compat', 'tensorflow._api.v2.compat.v1.config.experimental', 'tensorflow._api.v2.compat.v1.config.optimizer', 'tensorflow._api.v2.compat.v1.config.threading', 'tensorflow._api.v2.compat.v1.config', 'tensorflow._api.v2.compat.v1.data.experimental.service', 'tensorflow._api.v2.compat.v1.data.experimental', 'tensorflow._api.v2.compat.v1.data', 'tensorflow._api.v2.compat.v1.debugging.experimental', 'tensorflow._api.v2.compat.v1.debugging', 'tensorflow._api.v2.compat.v1.distribute.cluster_resolver', 'tensorflow._api.v2.compat.v1.distribute.experimental', 'tensorflow._api.v2.compat.v1.distribute', 'tensorflow._api.v2.compat.v1.distributions', 'tensorflow._api.v2.compat.v1.dtypes', 'tensorflow._api.v2.compat.v1.errors', 'tensorflow.python.framework._pywrap_python_op_gen', 'tensorflow.python.framework.load_library', 'tensorflow._api.v2.compat.v1.experimental', 'tensorflow._api.v2.compat.v1.feature_column', 'tensorflow._api.v2.compat.v1.gfile', 'tensorflow._api.v2.compat.v1.graph_util', 'tensorflow._api.v2.compat.v1.image', 'tensorflow._api.v2.compat.v1.initializers', 'tensorflow._api.v2.compat.v1.io.gfile', 'tensorflow._api.v2.compat.v1.io', 'tensorflow._api.v2.compat.v1.layers.experimental', 'tensorflow._api.v2.compat.v1.layers', 'tensorflow._api.v2.compat.v1.linalg.experimental', 'tensorflow._api.v2.compat.v1.linalg', 'tensorflow.lite', 'tensorflow.lite.python', 'tensorflow.lite.toco', 'tensorflow.lite.toco.types_pb2', 'tensorflow.lite.toco.toco_flags_pb2', 'tensorflow.lite.python.lite_constants', 'tensorflow._api.v2.compat.v1.lite.constants', 'tensorflow.lite.python.authoring', 'flatbuffers.compat', 'flatbuffers.packer', 'flatbuffers.number_types', 'flatbuffers.encode', 'flatbuffers.builder', 'flatbuffers.table', 'flatbuffers._version', 'flatbuffers.util', 'flatbuffers', 'tensorflow.lite.python.conversion_metadata_schema_py_generated', 'tensorflow.lite.python.schema_py_generated', 'tensorflow.lite.python.schema_util', 'tensorflow.lite.python.tflite_keras_util', 'tensorflow.lite.python.op_hint', 'tensorflow.lite.tools', 'tensorflow.lite.tools.flatbuffer_utils', 'tensorflow.lite.python.util', 'tensorflow.python._pywrap_toco_api', 'tensorflow.lite.python.wrap_toco', 'tensorflow.lite.python.metrics', 'tensorflow.lite.python.metrics.converter_error_data_pb2', 'tensorflow.lite.python.metrics.metrics_interface', 'tensorflow.lite.python.metrics.metrics', 'tensorflow.lite.python.convert_phase', 'tensorflow.lite.python.metrics.wrapper', 'tensorflow.lite.python.metrics._pywrap_tensorflow_lite_metrics_wrapper', 'tensorflow.lite.python.metrics.wrapper.metrics_wrapper', 'tensorflow.lite.toco.model_flags_pb2', 'tensorflow.lite.python.convert', 'tensorflow.lite.experimental', 'tensorflow.lite.experimental.microfrontend', 'tensorflow.lite.experimental.microfrontend.python', 'tensorflow.lite.experimental.microfrontend.python.ops', 'tensorflow.lite.experimental.microfrontend.ops', 'tensorflow.lite.experimental.microfrontend.ops.gen_audio_microfrontend_op', 'aa8f2297d25b4dc6fd3d98411eb3ba53823c4f42', 'tensorflow.lite.experimental.microfrontend.python.ops.audio_microfrontend_op', 'tensorflow.lite.python.convert_saved_model', 'tensorflow.lite.python.interpreter_wrapper', 'tensorflow.lite.python.interpreter_wrapper._pywrap_tensorflow_interpreter_wrapper', 'tensorflow.lite.python.interpreter', 'tensorflow.lite.python.optimize', 'tensorflow.lite.python.optimize.calibrator', 'tensorflow.lite.tools.optimize', 'tensorflow.lite.tools.optimize.debugging', 'tensorflow.lite.tools.optimize.debugging.python', 'tensorflow.lite.tools.optimize.debugging.python.debugger', 'tensorflow.lite.python.lite', 'tensorflow.lite.python.authoring.authoring', 'tensorflow._api.v2.compat.v1.lite.experimental.authoring', 'tensorflow.lite.python.analyzer_wrapper', 'tensorflow.lite.python.analyzer_wrapper._pywrap_analyzer_wrapper', 'tensorflow.lite.python.analyzer', 'tensorflow._api.v2.compat.v1.lite.experimental', 'tensorflow._api.v2.compat.v1.lite', 'tensorflow._api.v2.compat.v1.logging', 'tensorflow._api.v2.compat.v1.lookup.experimental', 'tensorflow._api.v2.compat.v1.lookup', 'tensorflow._api.v2.compat.v1.losses', 'tensorflow._api.v2.compat.v1.manip', 'tensorflow._api.v2.compat.v1.math.special', 'tensorflow._api.v2.compat.v1.math', 'tensorflow._api.v2.compat.v1.metrics', 'tensorflow._api.v2.compat.v1.mixed_precision.experimental', 'tensorflow._api.v2.compat.v1.mixed_precision', 'tensorflow._api.v2.compat.v1.mlir.experimental', 'tensorflow._api.v2.compat.v1.mlir', 'tensorflow._api.v2.compat.v1.nest', 'tensorflow._api.v2.compat.v1.nn.experimental', 'tensorflow._api.v2.compat.v1.nn.rnn_cell', 'tensorflow._api.v2.compat.v1.nn', 'tensorflow._api.v2.compat.v1.profiler', 'tensorflow._api.v2.compat.v1.python_io', 'tensorflow._api.v2.compat.v1.quantization', 'tensorflow._api.v2.compat.v1.queue', 'tensorflow._api.v2.compat.v1.ragged', 'tensorflow._api.v2.compat.v1.random.experimental', 'tensorflow._api.v2.compat.v1.random', 'tensorflow._api.v2.compat.v1.raw_ops', 'tensorflow._api.v2.compat.v1.resource_loader', 'tensorflow._api.v2.compat.v1.saved_model.builder', 'tensorflow._api.v2.compat.v1.saved_model.constants', 'tensorflow._api.v2.compat.v1.saved_model.experimental', 'tensorflow._api.v2.compat.v1.saved_model.loader', 'tensorflow._api.v2.compat.v1.saved_model.main_op', 'tensorflow._api.v2.compat.v1.saved_model.signature_constants', 'tensorflow._api.v2.compat.v1.saved_model.signature_def_utils', 'tensorflow._api.v2.compat.v1.saved_model.tag_constants', 'tensorflow._api.v2.compat.v1.saved_model.utils', 'tensorflow._api.v2.compat.v1.saved_model', 'tensorflow._api.v2.compat.v1.sets', 'tensorflow._api.v2.compat.v1.signal', 'tensorflow._api.v2.compat.v1.sparse', 'tensorflow._api.v2.compat.v1.spectral', 'tensorflow._api.v2.compat.v1.strings', 'tensorflow._api.v2.compat.v1.summary', 'tensorflow._api.v2.compat.v1.sysconfig', 'tensorflow._api.v2.compat.v1.test', 'tensorflow._api.v2.compat.v1.tpu.experimental.embedding', 'tensorflow._api.v2.compat.v1.tpu.experimental', 'tensorflow._api.v2.compat.v1.tpu', 'tensorflow._api.v2.compat.v1.train.experimental', 'tensorflow._api.v2.compat.v1.train.queue_runner', 'tensorflow._api.v2.compat.v1.train', 'tensorflow._api.v2.compat.v1.types.experimental', 'tensorflow._api.v2.compat.v1.types', 'tensorflow._api.v2.compat.v1.user_ops', 'tensorflow._api.v2.compat.v1.version', 'tensorflow._api.v2.compat.v1.xla.experimental', 'tensorflow._api.v2.compat.v1.xla', 'tensorflow._api.v2.compat.v1.compat.v1', 'tensorflow._api.v2.compat.v1.compat.v2.compat', 'tensorflow._api.v2.compat.v2.__internal__.autograph', 'tensorflow._api.v2.compat.v2.__internal__.decorator', 'tensorflow._api.v2.compat.v2.__internal__.dispatch', 'tensorflow._api.v2.compat.v2.__internal__.distribute.combinations', 'tensorflow._api.v2.compat.v2.__internal__.distribute.interim', 'tensorflow._api.v2.compat.v2.__internal__.distribute.multi_process_runner', 'tensorflow._api.v2.compat.v2.__internal__.distribute', 'tensorflow._api.v2.compat.v2.__internal__.eager_context', 'tensorflow._api.v2.compat.v2.__internal__.feature_column', 'tensorflow._api.v2.compat.v2.__internal__.function', 'tensorflow._api.v2.compat.v2.__internal__.graph_util', 'tensorflow._api.v2.compat.v2.__internal__.mixed_precision', 'tensorflow._api.v2.compat.v2.__internal__.monitoring', 'tensorflow._api.v2.compat.v2.__internal__.nest', 'tensorflow._api.v2.compat.v2.__internal__.ops', 'tensorflow._api.v2.compat.v2.__internal__.saved_model.load', 'tensorflow._api.v2.compat.v2.__internal__.saved_model', 'tensorflow._api.v2.compat.v2.__internal__.smart_cond', 'tensorflow._api.v2.compat.v2.__internal__.test.combinations', 'tensorflow._api.v2.compat.v2.__internal__.test', 'tensorflow._api.v2.compat.v2.__internal__.tf2', 'tensorflow._api.v2.compat.v2.__internal__.tracking', 'tensorflow._api.v2.compat.v2.__internal__.train', 'tensorflow._api.v2.compat.v2.__internal__.types', 'tensorflow._api.v2.compat.v2.__internal__', 'tensorflow._api.v2.compat.v2.__operators__', 'tensorflow._api.v2.compat.v2.audio', 'tensorflow._api.v2.compat.v2.autodiff', 'tensorflow._api.v2.compat.v2.autograph.experimental', 'tensorflow._api.v2.compat.v2.autograph', 'tensorflow._api.v2.compat.v2.bitwise', 'tensorflow._api.v2.compat.v2.compat.v1.compat', 'tensorflow._api.v2.compat.v2.compat.v1', 'tensorflow._api.v2.compat.v2.compat.v2.compat', 'tensorflow._api.v2.compat.v2.config.experimental', 'tensorflow._api.v2.compat.v2.config.optimizer', 'tensorflow._api.v2.compat.v2.config.threading', 'tensorflow._api.v2.compat.v2.config', 'tensorflow._api.v2.compat.v2.data.experimental.service', 'tensorflow._api.v2.compat.v2.data.experimental', 'tensorflow._api.v2.compat.v2.data', 'tensorflow._api.v2.compat.v2.debugging.experimental', 'tensorflow._api.v2.compat.v2.debugging', 'tensorflow._api.v2.compat.v2.distribute.cluster_resolver', 'tensorflow._api.v2.compat.v2.distribute.coordinator', 'tensorflow._api.v2.compat.v2.distribute.experimental.coordinator', 'tensorflow._api.v2.compat.v2.distribute.experimental.partitioners', 'tensorflow.python.distribute.failure_handling', 'tensorflow.core.distributed_runtime', 'tensorflow.core.distributed_runtime.preemption', 'tensorflow.core.distributed_runtime.preemption.gen_check_preemption_op', 'tensorflow.python.distribute.failure_handling.gce_util', 'tensorflow.python.distribute.failure_handling.failure_handling', 'tensorflow.python.distribute.experimental', 'tensorflow.python.distribute.experimental.rpc', 'tensorflow.distribute', 'tensorflow.distribute.experimental', 'tensorflow.distribute.experimental.rpc', 'tensorflow.distribute.experimental.rpc.kernels', 'tensorflow.distribute.experimental.rpc.kernels.gen_rpc_ops', 'tensorflow.distribute.experimental.rpc.proto', 'tensorflow.distribute.experimental.rpc.proto.tf_rpc_service_pb2', 'tensorflow.python.distribute.experimental.rpc.rpc_ops', 'tensorflow._api.v2.compat.v2.distribute.experimental.rpc', 'tensorflow._api.v2.compat.v2.distribute.experimental', 'tensorflow._api.v2.compat.v2.distribute', 'tensorflow._api.v2.compat.v2.dtypes', 'tensorflow._api.v2.compat.v2.errors', 'tensorflow._api.v2.compat.v2.experimental.dlpack', 'tensorflow.dtensor', 'tensorflow.dtensor.python', 'tensorflow.dtensor.python.config', 'tensorflow.dtensor.python.gen_dtensor_ops', 'tensorflow.dtensor.proto', 'tensorflow.dtensor.proto.layout_pb2', 'tensorflow.python._pywrap_dtensor_device', 'tensorflow.dtensor.python.layout', 'tensorflow.dtensor.python.dtensor_device', 'tensorflow.dtensor.python.api', 'tensorflow.dtensor.python.heartbeat', 'tensorflow.dtensor.python.tpu_util', 'tensorflow.dtensor.python.accelerator_util', 'tensorflow.dtensor.python.d_variable', 'tensorflow.dtensor.python.mesh_util', 'tensorflow.dtensor.python.save_restore', 'tensorflow.dtensor.python.d_checkpoint', 'tensorflow.dtensor.python.input_util', 'tensorflow._api.v2.compat.v2.experimental.dtensor', 'tensorflow._api.v2.compat.v2.experimental.numpy.random', 'tensorflow._api.v2.compat.v2.experimental.numpy', 'tensorflow._api.v2.compat.v2.experimental.tensorrt', 'tensorflow._api.v2.compat.v2.experimental', 'tensorflow._api.v2.compat.v2.feature_column', 'tensorflow._api.v2.compat.v2.graph_util', 'tensorflow._api.v2.compat.v2.image', 'tensorflow._api.v2.compat.v2.io.gfile', 'tensorflow._api.v2.compat.v2.io', 'tensorflow._api.v2.compat.v2.linalg.experimental', 'tensorflow._api.v2.compat.v2.linalg', 'tensorflow._api.v2.compat.v2.lite.experimental.authoring', 'tensorflow._api.v2.compat.v2.lite.experimental', 'tensorflow._api.v2.compat.v2.lite', 'tensorflow._api.v2.compat.v2.lookup.experimental', 'tensorflow._api.v2.compat.v2.lookup', 'tensorflow._api.v2.compat.v2.math.special', 'tensorflow._api.v2.compat.v2.math', 'tensorflow._api.v2.compat.v2.mlir.experimental', 'tensorflow._api.v2.compat.v2.mlir', 'tensorflow._api.v2.compat.v2.nest', 'tensorflow._api.v2.compat.v2.nn.experimental', 'tensorflow._api.v2.compat.v2.nn', 'tensorflow._api.v2.compat.v2.profiler.experimental.client', 'tensorflow._api.v2.compat.v2.profiler.experimental.server', 'tensorflow._api.v2.compat.v2.profiler.experimental', 'tensorflow._api.v2.compat.v2.profiler', 'tensorflow._api.v2.compat.v2.quantization', 'tensorflow._api.v2.compat.v2.queue', 'tensorflow._api.v2.compat.v2.ragged', 'tensorflow._api.v2.compat.v2.random.experimental', 'tensorflow._api.v2.compat.v2.random', 'tensorflow._api.v2.compat.v2.raw_ops', 'tensorflow._api.v2.compat.v2.saved_model.experimental', 'tensorflow._api.v2.compat.v2.saved_model', 'tensorflow._api.v2.compat.v2.sets', 'tensorflow._api.v2.compat.v2.signal', 'tensorflow._api.v2.compat.v2.sparse', 'tensorflow._api.v2.compat.v2.strings', 'tensorflow._api.v2.compat.v2.summary.experimental', 'tensorflow._api.v2.compat.v2.summary', 'tensorflow._api.v2.compat.v2.sysconfig', 'tensorflow._api.v2.compat.v2.test', 'tensorflow._api.v2.compat.v2.tpu.experimental.embedding', 'tensorflow._api.v2.compat.v2.tpu.experimental', 'tensorflow._api.v2.compat.v2.tpu', 'tensorflow._api.v2.compat.v2.train.experimental', 'tensorflow._api.v2.compat.v2.train', 'tensorflow._api.v2.compat.v2.types.experimental.distributed', 'tensorflow._api.v2.compat.v2.types.experimental', 'tensorflow._api.v2.compat.v2.types', 'tensorflow._api.v2.compat.v2.version', 'tensorflow._api.v2.compat.v2.xla.experimental', 'tensorflow._api.v2.compat.v2.xla', 'tensorboard.lazy', 'tensorboard.version', 'tensorboard', 'tensorboard.plugins', 'tensorboard.plugins.audio', 'tensorboard.util', 'tensorboard.util.op_evaluator', 'tensorboard.util.encoder', 'tensorboard.compat', 'tensorboard.compat.proto', 'tensorboard.compat.proto.histogram_pb2', 'tensorboard.compat.proto.tensor_shape_pb2', 'tensorboard.compat.proto.types_pb2', 'tensorboard.compat.proto.resource_handle_pb2', 'tensorboard.compat.proto.tensor_pb2', 'tensorboard.compat.proto.summary_pb2', 'tensorboard.plugins.audio.plugin_data_pb2', 'tensorboard.plugins.audio.metadata', 'tensorboard.util.lazy_tensor_creator', 'tensorboard.plugins.audio.summary_v2', 'tensorboard.plugins.audio.summary', 'tensorboard.plugins.custom_scalar', 'tensorboard.plugins.custom_scalar.layout_pb2', 'tensorboard.plugins.custom_scalar.metadata', 'tensorboard.plugins.custom_scalar.summary', 'tensorboard.plugins.histogram', 'tensorboard.plugins.histogram.plugin_data_pb2', 'tensorboard.plugins.histogram.metadata', 'tensorboard.compat.proto.cost_graph_pb2', 'tensorboard.compat.proto.attr_value_pb2', 'tensorboard.compat.proto.full_type_pb2', 'tensorboard.compat.proto.node_def_pb2', 'tensorboard.compat.proto.op_def_pb2', 'tensorboard.compat.proto.function_pb2', 'tensorboard.compat.proto.versions_pb2', 'tensorboard.compat.proto.graph_pb2', 'tensorboard.compat.proto.allocation_description_pb2', 'tensorboard.compat.proto.tensor_description_pb2', 'tensorboard.compat.proto.step_stats_pb2', 'tensorboard.compat.proto.cluster_pb2', 'tensorboard.compat.proto.coordination_config_pb2', 'tensorboard.compat.proto.debug_pb2', 'tensorboard.compat.proto.verifier_config_pb2', 'tensorboard.compat.proto.rewriter_config_pb2', 'tensorboard.compat.proto.config_pb2', 'tensorboard.compat.proto.event_pb2', 'tensorboard.compat.proto.variable_pb2', 'tensorboard.compat.proto.struct_pb2', 'tensorboard.compat.proto.trackable_object_graph_pb2', 'tensorboard.compat.proto.saved_object_graph_pb2', 'tensorboard.compat.proto.saver_pb2', 'tensorboard.compat.proto.meta_graph_pb2', 'tensorboard.compat.tensorflow_stub.error_codes', 'tensorboard.compat.tensorflow_stub.errors', 'importlib.metadata', 'fsspec._version', 'fsspec.caching', 'fsspec.callbacks', 'fsspec.utils', 'fsspec.config', 'fsspec.dircache', 'fsspec.transaction', 'fsspec.spec', 'fsspec.compression', 'fsspec.registry', 'fsspec.core', 'fsspec.exceptions', 'fsspec.mapping', 'fsspec', 'tensorboard.compat.tensorflow_stub.compat.v1', 'tensorboard.compat.tensorflow_stub.compat', 'tensorboard.compat.tensorflow_stub.io.gfile', 'tensorboard.compat.tensorflow_stub.io', 'tensorboard.compat.tensorflow_stub.pywrap_tensorflow', 'tensorboard.compat.tensorflow_stub.dtypes', 'tensorboard.compat.tensorflow_stub.flags', 'tensorboard.compat.tensorflow_stub.app', 'tensorboard.compat.tensorflow_stub.tensor_shape', 'tensorboard.compat.tensorflow_stub', 'tensorboard.util.tensor_util', 'tensorboard.plugins.histogram.summary_v2', 'tensorboard.plugins.histogram.summary', 'tensorboard.plugins.image', 'tensorboard.plugins.image.plugin_data_pb2', 'tensorboard.plugins.image.metadata', 'tensorboard.plugins.image.summary_v2', 'tensorboard.plugins.image.summary', 'tensorboard.plugins.pr_curve', 'tensorboard.plugins.pr_curve.plugin_data_pb2', 'tensorboard.plugins.pr_curve.metadata', 'tensorboard.plugins.pr_curve.summary', 'tensorboard.plugins.scalar', 'tensorboard.plugins.scalar.plugin_data_pb2', 'tensorboard.plugins.scalar.metadata', 'tensorboard.plugins.scalar.summary_v2', 'tensorboard.plugins.scalar.summary', 'tensorboard.plugins.text', 'tensorboard.plugins.text.plugin_data_pb2', 'tensorboard.plugins.text.metadata', 'tensorboard.plugins.text.summary_v2', 'tensorboard.plugins.text.summary', 'tensorboard.summary.v1', 'tensorboard.summary.v2', 'tensorboard.summary.writer', 'tensorboard.summary.writer.record_writer', 'tensorboard.summary.writer.event_file_writer', 'tensorboard.summary._output', 'tensorboard.summary._writer', 'tensorboard.summary', 'tensorboard.summary._tf', 'tensorboard.summary._tf.summary', 'tensorflow._api.v2.compat.v2.compat.v2', 'tensorflow._api.v2.compat.v2.compat', 'tensorflow._api.v2.compat.v2', 'tensorflow._api.v2.compat.v1.compat.v2', 'tensorflow._api.v2.compat.v1.compat', 'tensorflow._api.v2.compat.v1', 'tensorflow._api.v2.compat', 'tensorflow._api.v2.config.experimental', 'tensorflow._api.v2.config.optimizer', 'tensorflow._api.v2.config.threading', 'tensorflow._api.v2.config', 'tensorflow._api.v2.data.experimental.service', 'tensorflow._api.v2.data.experimental', 'tensorflow._api.v2.data', 'tensorflow._api.v2.debugging.experimental', 'tensorflow._api.v2.debugging', 'tensorflow._api.v2.distribute.cluster_resolver', 'tensorflow._api.v2.distribute.coordinator', 'tensorflow._api.v2.distribute.experimental.coordinator', 'tensorflow._api.v2.distribute.experimental.partitioners', 'tensorflow._api.v2.distribute.experimental.rpc', 'tensorflow._api.v2.distribute.experimental', 'tensorflow._api.v2.distribute', 'tensorflow._api.v2.dtypes', 'tensorflow._api.v2.errors', 'tensorflow._api.v2.experimental.dlpack', 'tensorflow._api.v2.experimental.dtensor', 'tensorflow._api.v2.experimental.numpy.random', 'tensorflow._api.v2.experimental.numpy', 'tensorflow._api.v2.experimental.tensorrt', 'tensorflow._api.v2.experimental', 'tensorflow._api.v2.feature_column', 'tensorflow._api.v2.graph_util', 'tensorflow._api.v2.image', 'tensorflow._api.v2.io.gfile', 'tensorflow._api.v2.io', 'tensorflow._api.v2.linalg.experimental', 'tensorflow._api.v2.linalg', 'tensorflow._api.v2.lite.experimental.authoring', 'tensorflow._api.v2.lite.experimental', 'tensorflow._api.v2.lite', 'tensorflow._api.v2.lookup.experimental', 'tensorflow._api.v2.lookup', 'tensorflow._api.v2.math.special', 'tensorflow._api.v2.math', 'tensorflow._api.v2.mlir.experimental', 'tensorflow._api.v2.mlir', 'tensorflow._api.v2.nest', 'tensorflow._api.v2.nn.experimental', 'tensorflow._api.v2.nn', 'tensorflow._api.v2.profiler.experimental.client', 'tensorflow._api.v2.profiler.experimental.server', 'tensorflow._api.v2.profiler.experimental', 'tensorflow._api.v2.profiler', 'tensorflow._api.v2.quantization', 'tensorflow._api.v2.queue', 'tensorflow._api.v2.ragged', 'tensorflow._api.v2.random.experimental', 'tensorflow._api.v2.random', 'tensorflow._api.v2.raw_ops', 'tensorflow._api.v2.saved_model.experimental', 'tensorflow._api.v2.saved_model', 'tensorflow._api.v2.sets', 'tensorflow._api.v2.signal', 'tensorflow._api.v2.sparse', 'tensorflow._api.v2.strings', 'tensorflow._api.v2.summary.experimental', 'tensorflow._api.v2.summary', 'tensorflow._api.v2.sysconfig', 'tensorflow._api.v2.test', 'tensorflow._api.v2.tpu.experimental.embedding', 'tensorflow._api.v2.tpu.experimental', 'tensorflow._api.v2.tpu', 'tensorflow._api.v2.train.experimental', 'tensorflow._api.v2.train', 'tensorflow._api.v2.types.experimental.distributed', 'tensorflow._api.v2.types.experimental', 'tensorflow._api.v2.types', 'tensorflow._api.v2.version', 'tensorflow._api.v2.xla.experimental', 'tensorflow._api.v2.xla', 'keras.distribute', 'keras.engine', 'tensorflow.compat.v1.app', 'tensorflow.compat.v1.audio', 'tensorflow.compat.v1.autograph.experimental', 'tensorflow.compat.v1.autograph', 'tensorflow.compat.v1.bitwise', 'tensorflow.compat.v1.compat.v1.compat', 'tensorflow.compat.v1.compat.v1', 'tensorflow.compat.v1.compat.v2.compat', 'tensorflow.compat.v1.compat.v2', 'tensorflow.compat.v1.compat', 'tensorflow.compat.v1.config.experimental', 'tensorflow.compat.v1.config.optimizer', 'tensorflow.compat.v1.config.threading', 'tensorflow.compat.v1.config', 'tensorflow.compat.v1.data.experimental.service', 'tensorflow.compat.v1.data.experimental', 'tensorflow.compat.v1.data', 'tensorflow.compat.v1.debugging.experimental', 'tensorflow.compat.v1.debugging', 'tensorflow.compat.v1.distribute.cluster_resolver', 'tensorflow.compat.v1.distribute.experimental', 'tensorflow.compat.v1.distribute', 'tensorflow.compat.v1.distributions', 'tensorflow.compat.v1.dtypes', 'tensorflow.compat.v1.errors', 'tensorflow.compat.v1.experimental', 'tensorflow.compat.v1.feature_column', 'tensorflow.compat.v1.gfile', 'tensorflow.compat.v1.graph_util', 'tensorflow.compat.v1.image', 'tensorflow.compat.v1.initializers', 'tensorflow.compat.v1.io.gfile', 'tensorflow.compat.v1.io', 'tensorflow.compat.v1.layers.experimental', 'tensorflow.compat.v1.layers', 'tensorflow.compat.v1.linalg.experimental', 'tensorflow.compat.v1.linalg', 'tensorflow.compat.v1.lite.constants', 'tensorflow.compat.v1.lite.experimental.authoring', 'tensorflow.compat.v1.lite.experimental', 'tensorflow.compat.v1.lite', 'tensorflow.compat.v1.logging', 'tensorflow.compat.v1.lookup.experimental', 'tensorflow.compat.v1.lookup', 'tensorflow.compat.v1.losses', 'tensorflow.compat.v1.manip', 'tensorflow.compat.v1.math.special', 'tensorflow.compat.v1.math', 'tensorflow.compat.v1.metrics', 'tensorflow.compat.v1.mixed_precision.experimental', 'tensorflow.compat.v1.mixed_precision', 'tensorflow.compat.v1.mlir.experimental', 'tensorflow.compat.v1.mlir', 'tensorflow.compat.v1.nest', 'tensorflow.compat.v1.nn.experimental', 'tensorflow.compat.v1.nn.rnn_cell', 'tensorflow.compat.v1.nn', 'tensorflow.compat.v1.profiler', 'tensorflow.compat.v1.python_io', 'tensorflow.compat.v1.quantization', 'tensorflow.compat.v1.queue', 'tensorflow.compat.v1.ragged', 'tensorflow.compat.v1.random.experimental', 'tensorflow.compat.v1.random', 'tensorflow.compat.v1.raw_ops', 'tensorflow.compat.v1.resource_loader', 'tensorflow.compat.v1.saved_model.builder', 'tensorflow.compat.v1.saved_model.constants', 'tensorflow.compat.v1.saved_model.experimental', 'tensorflow.compat.v1.saved_model.loader', 'tensorflow.compat.v1.saved_model.main_op', 'tensorflow.compat.v1.saved_model.signature_constants', 'tensorflow.compat.v1.saved_model.signature_def_utils', 'tensorflow.compat.v1.saved_model.tag_constants', 'tensorflow.compat.v1.saved_model.utils', 'tensorflow.compat.v1.saved_model', 'tensorflow.compat.v1.sets', 'tensorflow.compat.v1.signal', 'tensorflow.compat.v1.sparse', 'tensorflow.compat.v1.spectral', 'tensorflow.compat.v1.strings', 'tensorflow.compat.v1.summary', 'tensorflow.compat.v1.sysconfig', 'tensorflow.compat.v1.test', 'tensorflow.compat.v1.tpu.experimental.embedding', 'tensorflow.compat.v1.tpu.experimental', 'tensorflow.compat.v1.tpu', 'tensorflow.compat.v1.train.experimental', 'tensorflow.compat.v1.train.queue_runner', 'tensorflow.compat.v1.train', 'tensorflow.compat.v1.types.experimental', 'tensorflow.compat.v1.types', 'tensorflow.compat.v1.user_ops', 'tensorflow.compat.v1.version', 'tensorflow.compat.v1.xla.experimental', 'tensorflow.compat.v1.xla', 'tensorflow.compat.v1', 'tensorflow.compat.v2.__internal__.autograph', 'tensorflow.compat.v2.__internal__.decorator', 'tensorflow.compat.v2.__internal__.dispatch', 'tensorflow.compat.v2.__internal__.distribute.combinations', 'tensorflow.compat.v2.__internal__.distribute.interim', 'tensorflow.compat.v2.__internal__.distribute.multi_process_runner', 'tensorflow.compat.v2.__internal__.distribute', 'tensorflow.compat.v2.__internal__.eager_context', 'tensorflow.compat.v2.__internal__.feature_column', 'tensorflow.compat.v2.__internal__.function', 'tensorflow.compat.v2.__internal__.graph_util', 'tensorflow.compat.v2.__internal__.mixed_precision', 'tensorflow.compat.v2.__internal__.monitoring', 'tensorflow.compat.v2.__internal__.nest', 'tensorflow.compat.v2.__internal__.ops', 'tensorflow.compat.v2.__internal__.saved_model.load', 'tensorflow.compat.v2.__internal__.saved_model', 'tensorflow.compat.v2.__internal__.smart_cond', 'tensorflow.compat.v2.__internal__.test.combinations', 'tensorflow.compat.v2.__internal__.test', 'tensorflow.compat.v2.__internal__.tf2', 'tensorflow.compat.v2.__internal__.tracking', 'tensorflow.compat.v2.__internal__.train', 'tensorflow.compat.v2.__internal__.types', 'tensorflow.compat.v2.__internal__', 'tensorflow.compat.v2.__operators__', 'tensorflow.compat.v2.audio', 'tensorflow.compat.v2.autodiff', 'tensorflow.compat.v2.autograph.experimental', 'tensorflow.compat.v2.autograph', 'tensorflow.compat.v2.bitwise', 'tensorflow.compat.v2.compat.v1.compat', 'tensorflow.compat.v2.compat.v1', 'tensorflow.compat.v2.compat.v2.compat', 'tensorflow.compat.v2.compat.v2', 'tensorflow.compat.v2.compat', 'tensorflow.compat.v2.config.experimental', 'tensorflow.compat.v2.config.optimizer', 'tensorflow.compat.v2.config.threading', 'tensorflow.compat.v2.config', 'tensorflow.compat.v2.data.experimental.service', 'tensorflow.compat.v2.data.experimental', 'tensorflow.compat.v2.data', 'tensorflow.compat.v2.debugging.experimental', 'tensorflow.compat.v2.debugging', 'tensorflow.compat.v2.distribute.cluster_resolver', 'tensorflow.compat.v2.distribute.coordinator', 'tensorflow.compat.v2.distribute.experimental.coordinator', 'tensorflow.compat.v2.distribute.experimental.partitioners', 'tensorflow.compat.v2.distribute.experimental.rpc', 'tensorflow.compat.v2.distribute.experimental', 'tensorflow.compat.v2.distribute', 'tensorflow.compat.v2.dtypes', 'tensorflow.compat.v2.errors', 'tensorflow.compat.v2.experimental.dlpack', 'tensorflow.compat.v2.experimental.dtensor', 'tensorflow.compat.v2.experimental.numpy.random', 'tensorflow.compat.v2.experimental.numpy', 'tensorflow.compat.v2.experimental.tensorrt', 'tensorflow.compat.v2.experimental', 'tensorflow.compat.v2.feature_column', 'tensorflow.compat.v2.graph_util', 'tensorflow.compat.v2.image', 'tensorflow.compat.v2.io.gfile', 'tensorflow.compat.v2.io', 'tensorflow.compat.v2.linalg.experimental', 'tensorflow.compat.v2.linalg', 'tensorflow.compat.v2.lite.experimental.authoring', 'tensorflow.compat.v2.lite.experimental', 'tensorflow.compat.v2.lite', 'tensorflow.compat.v2.lookup.experimental', 'tensorflow.compat.v2.lookup', 'tensorflow.compat.v2.math.special', 'tensorflow.compat.v2.math', 'tensorflow.compat.v2.mlir.experimental', 'tensorflow.compat.v2.mlir', 'tensorflow.compat.v2.nest', 'tensorflow.compat.v2.nn.experimental', 'tensorflow.compat.v2.nn', 'tensorflow.compat.v2.profiler.experimental.client', 'tensorflow.compat.v2.profiler.experimental.server', 'tensorflow.compat.v2.profiler.experimental', 'tensorflow.compat.v2.profiler', 'tensorflow.compat.v2.quantization', 'tensorflow.compat.v2.queue', 'tensorflow.compat.v2.ragged', 'tensorflow.compat.v2.random.experimental', 'tensorflow.compat.v2.random', 'tensorflow.compat.v2.raw_ops', 'tensorflow.compat.v2.saved_model.experimental', 'tensorflow.compat.v2.saved_model', 'tensorflow.compat.v2.sets', 'tensorflow.compat.v2.signal', 'tensorflow.compat.v2.sparse', 'tensorflow.compat.v2.strings', 'tensorflow.compat.v2.summary.experimental', 'tensorflow.compat.v2.summary', 'tensorflow.compat.v2.sysconfig', 'tensorflow.compat.v2.test', 'tensorflow.compat.v2.tpu.experimental.embedding', 'tensorflow.compat.v2.tpu.experimental', 'tensorflow.compat.v2.tpu', 'tensorflow.compat.v2.train.experimental', 'tensorflow.compat.v2.train', 'tensorflow.compat.v2.types.experimental.distributed', 'tensorflow.compat.v2.types.experimental', 'tensorflow.compat.v2.types', 'tensorflow.compat.v2.version', 'tensorflow.compat.v2.xla.experimental', 'tensorflow.compat.v2.xla', 'tensorflow.compat.v2', 'tensorflow.compat', 'keras.backend_config', 'keras.distribute.distribute_coordinator_utils', 'keras.saving', 'keras.saving.legacy', 'keras.utils.tf_contextlib', 'keras.utils.tf_inspect', 'keras.saving.legacy.serialization', 'keras.saving.object_registration', 'keras.utils.dataset_utils', 'keras.utils.audio_dataset', 'six.moves.urllib.parse', 'keras.utils.keras_logging', 'keras.utils.io_utils', 'keras.saving.experimental', 'keras.saving.experimental.serialization_lib', 'keras.utils.generic_utils', 'keras.utils.data_utils', 'PIL._version', 'PIL', 'defusedxml.common', 'defusedxml', 'xml.etree', 'xml.etree.ElementPath', '_elementtree', 'xml.etree.ElementTree', 'defusedxml.ElementTree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'keras.utils.image_utils', 'keras.utils.image_dataset', 'keras.initializers.initializers_v1', 'keras.dtensor', 'keras.dtensor.utils', 'keras.initializers.initializers_v2', 'keras.initializers', 'keras.utils.layer_utils', 'keras.utils.np_utils', 'keras.optimizers.legacy', 'keras.optimizers.optimizer_v2', 'keras.utils.control_flow_util', 'keras.utils.object_identity', 'keras.utils.tf_utils', 'keras.engine.base_layer_utils', 'keras.optimizers.optimizer_v2.utils', 'keras.optimizers.schedules', 'keras.optimizers.schedules.learning_rate_schedule', 'keras.optimizers.optimizer_v2.optimizer_v2', 'keras.optimizers.optimizer_v2.adadelta', 'keras.optimizers.legacy.adadelta', 'keras.optimizers.optimizer_v2.adagrad', 'keras.optimizers.legacy.adagrad', 'keras.optimizers.optimizer_v2.adam', 'keras.optimizers.legacy.adam', 'keras.optimizers.optimizer_v2.adamax', 'keras.optimizers.legacy.adamax', 'keras.optimizers.optimizer_v2.ftrl', 'keras.optimizers.legacy.ftrl', 'keras.optimizers.optimizer_v2.nadam', 'keras.optimizers.legacy.nadam', 'keras.optimizers.legacy.optimizer', 'keras.optimizers.optimizer_v2.rmsprop', 'keras.optimizers.legacy.rmsprop', 'keras.optimizers.optimizer_v2.gradient_descent', 'keras.optimizers.legacy.sgd', 'keras.optimizers.optimizer_experimental', 'keras.optimizers.optimizer_experimental.optimizer', 'keras.optimizers.optimizer_experimental.adadelta', 'keras.optimizers.optimizer_experimental.adafactor', 'keras.optimizers.optimizer_experimental.adagrad', 'keras.optimizers.optimizer_experimental.adam', 'keras.optimizers.optimizer_experimental.adamax', 'keras.optimizers.optimizer_experimental.adamw', 'keras.optimizers.optimizer_experimental.ftrl', 'keras.optimizers.optimizer_experimental.nadam', 'keras.optimizers.optimizer_experimental.rmsprop', 'keras.optimizers.optimizer_experimental.sgd', 'keras.optimizers.optimizer_v1', 'keras.optimizers', 'keras.utils.sidecar_evaluator', 'keras.utils.text_dataset', 'keras.utils.timeseries_dataset', 'pyparsing.util', 'pyparsing.unicode', 'pyparsing.exceptions', 'pyparsing.actions', 'pyparsing.results', 'pyparsing.core', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'pyparsing', 'dot_parser', 'pydot', 'keras.utils.vis_utils', 'keras.utils', 'keras.engine.keras_tensor', 'keras.backend', 'keras.dtensor.lazy_variable', 'keras.constraints', 'keras.regularizers', 'keras.engine.input_spec', 'keras.saving.legacy.saved_model', 'keras.saving.legacy.saved_model.json_utils', 'keras.engine.node', 'keras.mixed_precision.loss_scale_optimizer', 'keras.mixed_precision.device_compatibility_check', 'keras.mixed_precision.policy', 'keras.mixed_precision', 'keras.distribute.distributed_training_utils', 'keras.mixed_precision.autocast_variable', 'keras.saving.legacy.saved_model.utils', 'keras.saving.legacy.saved_model.base_serialization', 'keras.saving.legacy.saved_model.constants', 'keras.saving.experimental.saving_lib', 'keras.utils.losses_utils', 'keras.losses', 'keras.utils.version_utils', 'keras.saving.legacy.saving_utils', 'keras.protobuf', 'keras.protobuf.versions_pb2', 'keras.protobuf.saved_metadata_pb2', 'keras.saving.legacy.saved_model.order_preserving_set', 'keras.saving.legacy.saved_model.serialized_attributes', 'keras.utils.metrics_utils', 'keras.saving.legacy.saved_model.load', 'keras.saving.legacy.saved_model.save_impl', 'keras.saving.legacy.saved_model.layer_serialization', 'keras.utils.traceback_utils', 'keras.engine.base_layer', 'keras.dtensor.layout_map', 'keras.engine.input_layer', 'keras.engine.functional_utils', 'keras.distribute.distributed_file_utils', 'keras.utils.mode_keys', 'keras.distribute.worker_training_state', 'keras.callbacks', 'keras.saving.legacy.saved_model.metric_serialization', 'keras.metrics.base_metric', 'keras.engine.training_utils', 'keras.utils.dataset_creator', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'mmap', 'pandas._typing', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.tzconversion', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.tslibs', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.hashtable', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._libs', 'pandas.util._decorators', 'pandas.core', 'pandas.core.util', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas._libs.hashing', 'pandas.core.dtypes', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.util.hashing', 'pandas.util', 'pandas.util.version', 'pandas.compat.numpy', 'pyarrow._generated_version', '_cython_0_29_28', 'cloudpickle.compat', 'cloudpickle.cloudpickle', 'cloudpickle.cloudpickle_fast', 'cloudpickle', 'pyarrow.util', 'pyarrow.lib', 'pyarrow._hdfsio', 'pyarrow.filesystem', 'pyarrow.hdfs', 'pyarrow.ipc', 'pyarrow.serialization', 'pyarrow.types', 'pyarrow', 'pandas.compat.pyarrow', 'pandas.compat', 'pandas.core.config_init', 'pandas.core.dtypes.missing', 'pandas.util._exceptions', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.array_algos', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.array_algos.take', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.roperator', 'pandas._libs.ops', 'pandas.core.computation', 'numexpr.__config__', 'numexpr.interpreter', 'numexpr.expressions', 'numexpr.utils', 'numexpr.necompiler', 'numexpr.version', 'numexpr', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.core.sorting', 'pandas.core.arrays.base', 'bottleneck.reduce', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.move', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.slow', 'bottleneck.benchmark', 'bottleneck.benchmark.autotimeit', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'bottleneck._pytesttester', 'bottleneck._version', 'bottleneck', 'pandas.core.nanops', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', 'pandas._libs.arrays', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.core.arrays.numeric', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.tseries.offsets', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.floating', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.dtypes.concat', 'pandas.core.array_algos.putmask', 'pandas.core.indexes.frozen', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pyarrow._compute', 'pyarrow._compute_docstrings', 'pyarrow.vendored', 'pyarrow.vendored.docscrape', 'pyarrow.compute', 'pandas.core.arrays.string_arrow', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.flags', 'pandas._libs.reduction', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.times', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas.core.aggregation', 'pandas.core.apply', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas.core.reshape', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.quantile', 'pandas.core.array_algos.replace', 'pandas.core.internals.blocks', 'pandas.core.internals.api', 'pandas.core.internals.base', 'pandas.core.internals.array_manager', 'pandas.core.internals.ops', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.core.internals', 'pandas.core.reshape.concat', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.describe', 'pandas.core.internals.construction', 'pandas.core.shared_docs', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.doc', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.online', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.generic', 'pandas.core.reshape.util', 'pandas.core.reshape.melt', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas.core.series', 'pandas.io.formats.info', 'pandas.core.frame', 'pandas.core.groupby.base', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.engines', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers.base_parser', 'pandas.io.parsers.c_parser_wrapper', 'pandas.io.parsers.python_parser', 'pandas.io.parsers.readers', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.formats.excel', 'pandas.io.excel._odswriter', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.xml', 'pandas.io.api', 'pandas.util._tester', 'pandas._testing._random', 'pandas._testing.contexts', 'pandas._testing._io', 'pandas._testing._warnings', 'cmath', 'pandas._libs.testing', 'pandas._testing.asserters', 'pandas._testing.compat', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'keras.engine.data_adapter', 'keras.engine.base_preprocessing_layer', 'keras.layers.activation.elu', 'keras.layers.activation.leaky_relu', 'keras.layers.activation.prelu', 'keras.layers.activation.relu', 'keras.layers.activation.softmax', 'keras.layers.activation.thresholded_relu', 'keras.layers.activation', 'keras.layers.attention.base_dense_attention', 'keras.layers.attention.additive_attention', 'keras.layers.attention.attention', 'keras.layers.core.activation', 'keras.layers.core.dense', 'keras.layers.core.einsum_dense', 'keras.layers.core.embedding', 'keras.layers.core.lambda_layer', 'keras.layers.core.masking', 'keras.layers.core.tf_op_layer', 'keras.layers.regularization.activity_regularization', 'keras.layers.regularization.alpha_dropout', 'keras.layers.regularization.dropout', 'keras.layers.regularization.gaussian_dropout', 'keras.layers.regularization.gaussian_noise', 'keras.layers.regularization.spatial_dropout1d', 'keras.layers.regularization.spatial_dropout2d', 'keras.layers.regularization.spatial_dropout3d', 'keras.layers.regularization', 'keras.utils.conv_utils', 'keras.layers.reshaping.cropping1d', 'keras.layers.reshaping.cropping2d', 'keras.layers.reshaping.cropping3d', 'keras.layers.reshaping.flatten', 'keras.layers.reshaping.permute', 'keras.layers.reshaping.repeat_vector', 'keras.layers.reshaping.reshape', 'keras.layers.reshaping.up_sampling1d', 'keras.layers.reshaping.up_sampling2d', 'keras.layers.reshaping.up_sampling3d', 'keras.layers.reshaping.zero_padding1d', 'keras.layers.reshaping.zero_padding2d', 'keras.layers.reshaping.zero_padding3d', 'keras.layers.reshaping', 'keras.layers.core', 'keras.layers.attention.multi_head_attention', 'keras.layers.attention', 'keras.layers.convolutional.base_conv', 'keras.layers.convolutional.conv1d', 'keras.layers.convolutional.conv1d_transpose', 'keras.layers.convolutional.conv2d', 'keras.layers.convolutional.conv2d_transpose', 'keras.layers.convolutional.conv3d', 'keras.layers.convolutional.conv3d_transpose', 'keras.layers.convolutional.base_depthwise_conv', 'keras.layers.convolutional.depthwise_conv1d', 'keras.layers.convolutional.depthwise_conv2d', 'keras.layers.convolutional.base_separable_conv', 'keras.layers.convolutional.separable_conv1d', 'keras.layers.convolutional.separable_conv2d', 'keras.layers.pooling.base_pooling1d', 'keras.layers.pooling.average_pooling1d', 'keras.layers.pooling.base_pooling2d', 'keras.layers.pooling.average_pooling2d', 'keras.layers.pooling.base_pooling3d', 'keras.layers.pooling.average_pooling3d', 'keras.layers.pooling.base_global_pooling1d', 'keras.layers.pooling.global_average_pooling1d', 'keras.layers.pooling.base_global_pooling2d', 'keras.layers.pooling.global_average_pooling2d', 'keras.layers.pooling.base_global_pooling3d', 'keras.layers.pooling.global_average_pooling3d', 'keras.layers.pooling.global_max_pooling1d', 'keras.layers.pooling.global_max_pooling2d', 'keras.layers.pooling.global_max_pooling3d', 'keras.layers.pooling.max_pooling1d', 'keras.layers.pooling.max_pooling2d', 'keras.layers.pooling.max_pooling3d', 'keras.layers.pooling', 'keras.layers.convolutional', 'keras.layers.locally_connected.locally_connected_utils', 'keras.layers.locally_connected.locally_connected1d', 'keras.layers.locally_connected.locally_connected2d', 'keras.layers.locally_connected', 'keras.layers.merging.base_merge', 'keras.layers.merging.add', 'keras.layers.merging.average', 'keras.layers.merging.concatenate', 'keras.layers.merging.dot', 'keras.layers.merging.maximum', 'keras.layers.merging.minimum', 'keras.layers.merging.multiply', 'keras.layers.merging.subtract', 'keras.layers.merging', 'keras.layers.normalization', 'keras.layers.normalization.batch_normalization', 'keras.layers.normalization.group_normalization', 'keras.layers.normalization.layer_normalization', 'keras.layers.normalization.unit_normalization', 'keras.layers.preprocessing', 'keras.layers.preprocessing.preprocessing_utils', 'keras.layers.preprocessing.category_encoding', 'keras.layers.preprocessing.discretization', 'keras.layers.preprocessing.hashed_crossing', 'keras.layers.preprocessing.hashing', 'keras.layers.preprocessing.image_preprocessing', 'keras.layers.preprocessing.index_lookup', 'keras.layers.preprocessing.integer_lookup', 'keras.layers.preprocessing.normalization', 'keras.layers.preprocessing.string_lookup', 'keras.layers.preprocessing.text_vectorization', 'keras.layers.normalization.batch_normalization_v1', 'keras.layers.kernelized', 'keras.layers.rnn.rnn_utils', 'keras.layers.rnn.abstract_rnn_cell', 'keras.layers.rnn.dropout_rnn_cell_mixin', 'keras.layers.rnn.stacked_rnn_cells', 'keras.layers.rnn.base_rnn', 'keras.layers.rnn.simple_rnn', 'keras.layers.rnn.gru_lstm_utils', 'keras.layers.rnn.gru', 'keras.layers.rnn.gru_v1', 'keras.layers.rnn.lstm', 'keras.layers.rnn.lstm_v1', 'keras.layers.rnn.base_wrapper', 'keras.layers.rnn.bidirectional', 'keras.layers.rnn.cell_wrappers', 'keras.layers.rnn.base_conv_rnn', 'keras.layers.rnn.base_conv_lstm', 'keras.layers.rnn.conv_lstm1d', 'keras.layers.rnn.conv_lstm2d', 'keras.layers.rnn.conv_lstm3d', 'keras.layers.rnn.base_cudnn_rnn', 'keras.layers.rnn.cudnn_gru', 'keras.layers.rnn.cudnn_lstm', 'keras.layers.rnn.time_distributed', 'keras.layers.rnn', 'keras.layers.serialization', 'keras.layers', 'keras.activations', 'keras.metrics.metrics', 'keras.metrics', 'keras.engine.compile_utils', 'keras.saving.pickle_utils', 'keras.saving.legacy.model_config', 'keras.saving.legacy.hdf5_format', 'keras.saving.legacy.saved_model.load_context', 'keras.saving.legacy.saved_model.save', 'keras.saving.legacy.save', 'keras.saving.legacy.saved_model.model_serialization', 'keras.engine.training', 'keras.saving.legacy.saved_model.network_serialization', 'keras.engine.functional', 'keras.engine.sequential', 'keras.engine.training_utils_v1', 'keras.distribute.distributed_training_utils_v1', 'keras.engine.training_arrays_v1', 'keras.engine.partial_batch_padding_handler', 'keras.engine.training_distributed_v1', 'keras.engine.training_eager_v1', 'keras.engine.training_generator_v1', 'keras.engine.training_v1', 'keras.models.cloning', 'keras.models.sharpness_aware_minimization', 'keras.models', 'keras', 'tensorflow.python.util.fast_module_type', 'tensorflow.tools.compatibility', 'tensorflow.tools.compatibility.renames_v2', 'tensorflow.tools.compatibility.all_renames_v2', 'tensorflow.python.util.module_wrapper', 'keras.api.keras.__internal__.layers', 'keras.legacy_tf_layers.migration_utils', 'keras.legacy_tf_layers', 'keras.engine.base_layer_v1', 'keras.legacy_tf_layers.variable_scope_shim', 'keras.legacy_tf_layers.base', 'keras.api.keras.__internal__.legacy.layers.experimental', 'keras.legacy_tf_layers.convolutional', 'keras.legacy_tf_layers.core', 'keras.legacy_tf_layers.normalization', 'keras.legacy_tf_layers.pooling', 'keras.api.keras.__internal__.legacy.layers', 'keras.layers.rnn.legacy_cells', 'keras.layers.rnn.legacy_cell_wrappers', 'keras.api.keras.__internal__.legacy.rnn_cell', 'keras.api.keras.__internal__.legacy', 'keras.api.keras.__internal__', 'keras.api.keras.activations', 'keras.applications.imagenet_utils', 'keras.applications.convnext', 'keras.applications.densenet', 'keras.applications.efficientnet', 'keras.applications.efficientnet_v2', 'keras.applications.inception_resnet_v2', 'keras.applications.inception_v3', 'keras.applications.mobilenet', 'keras.applications.mobilenet_v2', 'keras.applications.mobilenet_v3', 'keras.applications.nasnet', 'keras.applications.resnet', 'keras.applications.resnet_rs', 'keras.applications.resnet_v2', 'keras.applications.vgg16', 'keras.applications.vgg19', 'keras.applications.xception', 'keras.applications', 'keras.api.keras.applications.convnext', 'keras.api.keras.applications.densenet', 'keras.api.keras.applications.efficientnet', 'keras.api.keras.applications.efficientnet_v2', 'keras.api.keras.applications.imagenet_utils', 'keras.api.keras.applications.inception_resnet_v2', 'keras.api.keras.applications.inception_v3', 'keras.api.keras.applications.mobilenet', 'keras.api.keras.applications.mobilenet_v2', 'keras.api.keras.applications.mobilenet_v3', 'keras.api.keras.applications.nasnet', 'keras.applications.regnet', 'keras.api.keras.applications.regnet', 'keras.api.keras.applications.resnet', 'keras.api.keras.applications.resnet50', 'keras.api.keras.applications.resnet_rs', 'keras.api.keras.applications.resnet_v2', 'keras.api.keras.applications.vgg16', 'keras.api.keras.applications.vgg19', 'keras.api.keras.applications.xception', 'keras.api.keras.applications', 'keras.api.keras.backend', 'keras.callbacks_v1', 'keras.api.keras.callbacks', 'keras.api.keras.constraints', 'keras.datasets', 'keras.datasets.boston_housing', 'keras.api.keras.datasets.boston_housing', 'keras.datasets.cifar', 'keras.datasets.cifar10', 'keras.api.keras.datasets.cifar10', 'keras.datasets.cifar100', 'keras.api.keras.datasets.cifar100', 'keras.datasets.fashion_mnist', 'keras.api.keras.datasets.fashion_mnist', 'scipy.linalg._fblas', 'scipy.linalg.blas', 'scipy.linalg._flapack', 'scipy.linalg.lapack', 'scipy.linalg.misc', 'scipy.linalg._flinalg', 'scipy.linalg.flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.basic', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm_triu', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg.matfuncs', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._decomp_update', 'scipy.linalg._sketches', 'scipy.linalg._decomp_cossin', 'scipy.linalg', 'scipy.ndimage._ni_support', 'scipy.ndimage._nd_image', 'scipy._lib.doccer', 'scipy.ndimage._ni_docstrings', 'scipy.ndimage.filters', 'scipy.ndimage.fourier', 'scipy.special.sf_error', 'scipy.special._ufuncs_cxx', 'scipy.special._ufuncs', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.special._comb', 'scipy.special._basic', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm_2', 'scipy.special._ellip_harm', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.special', 'scipy.ndimage.interpolation', '_ni_label', 'scipy.ndimage._ni_label', 'scipy.ndimage.morphology', 'scipy.ndimage.measurements', 'scipy.ndimage', 'PIL.ImageFilter', 'PIL.ImageStat', 'PIL.ImageEnhance', 'keras.preprocessing.image', 'keras.preprocessing.sequence', 'keras.preprocessing.text', 'keras.preprocessing', 'keras.datasets.imdb', 'keras.api.keras.datasets.imdb', 'keras.datasets.mnist', 'keras.api.keras.datasets.mnist', 'keras.datasets.reuters', 'keras.api.keras.datasets.reuters', 'keras.api.keras.datasets', 'keras.estimator', 'keras.api.keras.estimator', 'keras.feature_column', 'keras.feature_column.base_feature_layer', 'keras.feature_column.sequence_feature_column', 'keras.premade_models.linear', 'keras.premade_models.wide_deep', 'keras.premade_models', 'keras.api.keras.experimental', 'keras.api.keras.initializers', 'keras.api.keras.layers.experimental.preprocessing', 'keras.api.keras.layers.experimental', 'keras.feature_column.dense_features', 'keras.api.keras.layers', 'keras.api.keras.losses', 'keras.api.keras.metrics', 'keras.api.keras.mixed_precision', 'keras.api.keras.models', 'keras.api.keras.optimizers.legacy', 'keras.api.keras.optimizers.schedules', 'keras.api.keras.optimizers', 'keras.api.keras.preprocessing.image', 'keras.api.keras.preprocessing.sequence', 'keras.api.keras.preprocessing.text', 'keras.api.keras.preprocessing', 'keras.api.keras.regularizers', 'keras.api.keras.utils', 'keras.wrappers', 'keras.wrappers.scikit_learn', 'keras.api.keras.wrappers.scikit_learn', 'keras.api.keras.wrappers', 'keras.api.keras', 'keras.api', 'keras.api._v2.keras.__internal__.backend', 'keras.api._v2.keras.__internal__.layers', 'keras.api._v2.keras.__internal__.losses', 'keras.api._v2.keras.__internal__.models', 'keras.api._v2.keras.__internal__.optimizers', 'keras.testing_infra', 'keras.testing_infra.test_utils', 'keras.api._v2.keras.__internal__.utils', 'keras.api._v2.keras.__internal__', 'keras.api._v2.keras.activations', 'keras.api._v2.keras.applications.convnext', 'keras.api._v2.keras.applications.densenet', 'keras.api._v2.keras.applications.efficientnet', 'keras.api._v2.keras.applications.efficientnet_v2', 'keras.api._v2.keras.applications.imagenet_utils', 'keras.api._v2.keras.applications.inception_resnet_v2', 'keras.api._v2.keras.applications.inception_v3', 'keras.api._v2.keras.applications.mobilenet', 'keras.api._v2.keras.applications.mobilenet_v2', 'keras.api._v2.keras.applications.mobilenet_v3', 'keras.api._v2.keras.applications.nasnet', 'keras.api._v2.keras.applications.regnet', 'keras.api._v2.keras.applications.resnet', 'keras.api._v2.keras.applications.resnet50', 'keras.api._v2.keras.applications.resnet_rs', 'keras.api._v2.keras.applications.resnet_v2', 'keras.api._v2.keras.applications.vgg16', 'keras.api._v2.keras.applications.vgg19', 'keras.api._v2.keras.applications.xception', 'keras.api._v2.keras.applications', 'keras.api._v2.keras.backend.experimental', 'keras.api._v2.keras.backend', 'keras.api._v2.keras.callbacks.experimental', 'keras.api._v2.keras.callbacks', 'keras.api._v2.keras.constraints', 'keras.api._v2.keras.datasets.boston_housing', 'keras.api._v2.keras.datasets.cifar10', 'keras.api._v2.keras.datasets.cifar100', 'keras.api._v2.keras.datasets.fashion_mnist', 'keras.api._v2.keras.datasets.imdb', 'keras.api._v2.keras.datasets.mnist', 'keras.api._v2.keras.datasets.reuters', 'keras.api._v2.keras.datasets', 'keras.dtensor.optimizers', 'keras.api._v2.keras.dtensor.experimental.optimizers', 'keras.api._v2.keras.dtensor.experimental', 'keras.api._v2.keras.dtensor', 'keras.api._v2.keras.estimator', 'keras.api._v2.keras.experimental', 'keras.api._v2.keras.initializers', 'keras.api._v2.keras.layers.experimental.preprocessing', 'keras.api._v2.keras.layers.experimental', 'keras.feature_column.dense_features_v2', 'keras.api._v2.keras.layers', 'keras.api._v2.keras.losses', 'keras.api._v2.keras.metrics', 'keras.api._v2.keras.mixed_precision', 'keras.api._v2.keras.models.experimental', 'keras.api._v2.keras.models', 'keras.api._v2.keras.optimizers.experimental', 'keras.api._v2.keras.optimizers.legacy', 'keras.api._v2.keras.optimizers.schedules', 'keras.api._v2.keras.optimizers', 'keras.api._v2.keras.preprocessing.image', 'keras.api._v2.keras.preprocessing.sequence', 'keras.api._v2.keras.preprocessing.text', 'keras.api._v2.keras.preprocessing', 'keras.api._v2.keras.regularizers', 'keras.api._v2.keras.utils.experimental', 'keras.api._v2.keras.utils', 'keras.api._v2.keras.wrappers.scikit_learn', 'keras.api._v2.keras.wrappers', 'keras.api._v2.keras', 'keras.api._v2', 'tensorflow', 'jedi.inference.finder', 'numpydoc', 'numpydoc.docscrape', 'pygments.styles.default', 'jedi.inference.star_args', 'jupyter_require', 'matplotlib', 'matplotlib._api.deprecation', 'matplotlib._api', 'matplotlib._c_internal_utils', 'matplotlib.cbook', 'matplotlib.docstring', 'matplotlib._animation_data', 'matplotlib.animation', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImagePalette', 'PIL.ImageSequence', 'PIL.PngImagePlugin', 'matplotlib._path', 'matplotlib.bezier', 'matplotlib.path', 'matplotlib.transforms', 'matplotlib.ticker', 'matplotlib.scale', 'matplotlib._color_data', 'matplotlib.colors', 'matplotlib.fontconfig_pattern', 'matplotlib._enums', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver', 'dateutil.rrule', 'matplotlib.units', 'matplotlib.dates']
2023-02-03 10:05:46,398 [28472] DEBUG    matplotlib:224: [JupyterRequire] CACHEDIR=C:\Users\sunny\.matplotlib
2023-02-03 10:05:46,403 [28472] DEBUG    matplotlib.font_manager:1439: [JupyterRequire] Using fontManager instance from C:\Users\sunny\.matplotlib\fontlist-v330.json
2023-02-03 10:05:46,608 [28472] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-02-03 10:05:46,608 [28472] DEBUG    matplotlib.pyplot:290: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2023-02-03 10:05:46,727 [28472] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2023-02-03 10:05:46,728 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,728 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,728 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,728 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-02-03 10:05:46,728 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,728 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,729 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-02-03 10:05:46,729 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,729 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,729 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,729 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,729 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,729 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,729 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-02-03 10:05:46,729 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,730 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-02-03 10:05:46,730 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,730 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,730 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-02-03 10:05:46,730 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,730 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-02-03 10:05:46,730 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-02-03 10:05:46,730 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,731 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,731 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,731 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,731 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,731 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-02-03 10:05:46,731 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,731 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,731 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,731 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,732 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,732 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-02-03 10:05:46,732 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,732 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,732 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,732 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,732 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,732 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,732 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,733 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2023-02-03 10:05:46,733 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,733 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,733 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,733 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2023-02-03 10:05:46,733 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,733 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,733 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,733 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2023-02-03 10:05:46,733 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,733 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,733 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,733 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,733 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,734 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,734 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,734 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,734 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,734 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2023-02-03 10:05:46,734 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2023-02-03 10:05:46,734 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2023-02-03 10:05:46,734 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2023-02-03 10:05:46,735 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,735 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,735 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,735 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2023-02-03 10:05:46,735 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,735 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,735 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,735 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2023-02-03 10:05:46,735 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,736 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2023-02-03 10:05:46,736 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sitka' (SitkaVF.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,736 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,736 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2023-02-03 10:05:46,736 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,736 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,736 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,736 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,736 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2023-02-03 10:05:46,737 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,737 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,737 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,737 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,737 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,737 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2023-02-03 10:05:46,737 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,737 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,737 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,738 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,738 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2023-02-03 10:05:46,738 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,738 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,738 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,738 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,738 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,738 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,738 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,739 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,739 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,739 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,739 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,739 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,739 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,739 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,739 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,739 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Variable' (SegUIVar.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,741 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sitka' (SitkaVF-Italic.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,756 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2023-02-03 10:05:46,764 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2023-02-03 10:05:46,764 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2023-02-03 10:05:46,764 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,764 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,764 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2023-02-03 10:05:46,764 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,764 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,764 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,765 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,765 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,765 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,765 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,765 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,765 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,765 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,765 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,765 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,765 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2023-02-03 10:05:46,765 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,765 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2023-02-03 10:05:46,765 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2023-02-03 10:05:46,765 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2023-02-03 10:05:46,765 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2023-02-03 10:05:46,765 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2023-02-03 10:05:46,765 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,765 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,765 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,768 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,768 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,768 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,768 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,768 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,768 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,768 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,768 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,769 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,769 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,769 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,769 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,769 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,769 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2023-02-03 10:05:46,769 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,769 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2023-02-03 10:05:46,770 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2023-02-03 10:05:46,770 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2023-02-03 10:05:46,770 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2023-02-03 10:05:46,770 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,770 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,770 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,770 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,770 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,770 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2023-02-03 10:05:46,770 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,770 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,770 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,770 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2023-02-03 10:05:46,770 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,770 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:05:46,770 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2023-02-03 10:05:46,770 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,772 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2023-02-03 10:05:46,772 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2023-02-03 10:05:46,772 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:05:46,772 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Fluent Icons' (SegoeIcons.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:05:46,772 [28472] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2023-02-03 10:06:07,192 [28472] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-03 10:06:07,192 [28472] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 3
2023-02-03 10:06:07,192 [28472] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:3]
2023-02-03 10:06:07,201 [28472] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2023-02-03 10:06:07,202 [28472] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-03 10:07:25,244 [28472] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-03 10:07:25,244 [28472] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 3
2023-02-03 10:07:25,244 [28472] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-03 10:07:25,252 [28472] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 1 in part parser)
2023-02-03 10:07:25,253 [28472] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[2:2] new[2:2]
2023-02-03 10:07:25,253 [28472] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[2:2] new[2:2]
2023-02-03 10:07:25,253 [28472] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:3]
2023-02-03 10:07:25,254 [28472] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 3 to 3 (to 2 in part parser)
2023-02-03 10:07:25,254 [28472] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-03 10:09:12,871 [28472] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\AppData\Local\Temp/ipykernel_28472/643187296.py:3: UserWarning: linestyle is redundantly defined by the 'linestyle' keyword argument and the fmt string "-o" (-> linestyle='-'). The keyword argument will take precedence.
  plt.plot(exponential_smoothing(X,0.9),"-o",linestyle="dashed|")

2023-02-03 10:09:15,828 [28472] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sunny\AppData\Local\Temp/ipykernel_28472/978857784.py:3: UserWarning: linestyle is redundantly defined by the 'linestyle' keyword argument and the fmt string "-o" (-> linestyle='-'). The keyword argument will take precedence.
  plt.plot(exponential_smoothing(X,0.9),"-o",linestyle="dashed")

2023-02-03 10:19:28,022 [28472] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-03 10:19:28,027 [28472] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 5
2023-02-03 10:19:28,028 [28472] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:3] new[1:5]
2023-02-03 10:19:28,030 [28472] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 5 (to 4 in part parser)
2023-02-03 10:19:28,030 [28472] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-03 10:20:18,602 [28472] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2023-02-03 10:20:18,604 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,604 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,604 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,605 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2023-02-03 10:20:18,605 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,605 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,605 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2023-02-03 10:20:18,605 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,605 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,605 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,606 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,606 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,606 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,606 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2023-02-03 10:20:18,606 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,606 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2023-02-03 10:20:18,607 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,607 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,607 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2023-02-03 10:20:18,607 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,607 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2023-02-03 10:20:18,607 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2023-02-03 10:20:18,607 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,608 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,608 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,608 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,608 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,608 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2023-02-03 10:20:18,608 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,609 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,609 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,609 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,609 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,609 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2023-02-03 10:20:18,609 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,609 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,609 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,609 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,609 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,609 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,610 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,610 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
2023-02-03 10:20:18,610 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,610 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,610 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,610 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2023-02-03 10:20:18,610 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,611 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,611 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,611 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2023-02-03 10:20:18,611 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,611 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,611 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,612 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,612 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,612 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,612 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,612 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,612 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,612 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
2023-02-03 10:20:18,612 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24
2023-02-03 10:20:18,613 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2023-02-03 10:20:18,613 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24
2023-02-03 10:20:18,613 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,613 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,613 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,613 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2023-02-03 10:20:18,614 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,614 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,614 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,614 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2023-02-03 10:20:18,614 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,614 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2023-02-03 10:20:18,614 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sitka' (SitkaVF.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,615 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,615 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2023-02-03 10:20:18,615 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,615 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,615 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,615 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,616 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2023-02-03 10:20:18,616 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,616 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,616 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,616 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,616 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,616 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2023-02-03 10:20:18,616 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,618 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,618 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,618 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,618 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24
2023-02-03 10:20:18,618 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,618 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,618 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,618 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,619 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,619 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,619 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,619 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,619 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,619 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,619 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,619 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,620 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,620 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,620 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,620 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24
2023-02-03 10:20:18,620 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,620 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,620 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,620 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,620 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,621 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
2023-02-03 10:20:18,621 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,621 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145
2023-02-03 10:20:18,621 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
2023-02-03 10:20:18,621 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,621 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,621 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
2023-02-03 10:20:18,621 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,621 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,621 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
2023-02-03 10:20:18,621 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,621 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
2023-02-03 10:20:18,622 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,622 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,622 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,622 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2023-02-03 10:20:18,622 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2023-02-03 10:20:18,622 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2023-02-03 10:20:18,622 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
2023-02-03 10:20:18,623 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,623 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,623 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,623 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,623 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,623 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,623 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,623 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,624 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,624 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2023-02-03 10:20:18,624 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,624 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145
2023-02-03 10:20:18,624 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,624 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,624 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,624 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,624 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,624 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2023-02-03 10:20:18,624 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,624 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,626 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2023-02-03 10:20:18,626 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43
2023-02-03 10:20:18,626 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Variable' (SegUIVar.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,626 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,626 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,626 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,626 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,626 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,626 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,627 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,627 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,628 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,628 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,628 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,628 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,628 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
2023-02-03 10:20:18,628 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2023-02-03 10:20:18,628 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145
2023-02-03 10:20:18,628 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,628 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24
2023-02-03 10:20:18,629 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,629 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,629 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,629 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,629 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2023-02-03 10:20:18,629 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24
2023-02-03 10:20:18,629 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
2023-02-03 10:20:18,629 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,630 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,630 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,630 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2023-02-03 10:20:18,630 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2023-02-03 10:20:18,630 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,630 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,630 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
2023-02-03 10:20:18,630 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,630 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,631 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24
2023-02-03 10:20:18,631 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,631 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,631 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,631 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
2023-02-03 10:20:18,631 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,631 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,631 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,632 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25
2023-02-03 10:20:18,632 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,632 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25
2023-02-03 10:20:18,632 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,632 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2023-02-03 10:20:18,632 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,632 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,632 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,632 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,633 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,633 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,633 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145
2023-02-03 10:20:18,633 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145
2023-02-03 10:20:18,633 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24
2023-02-03 10:20:18,633 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2023-02-03 10:20:18,633 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2023-02-03 10:20:18,633 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,633 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,634 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,634 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,634 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,634 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,634 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,634 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,635 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,635 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,635 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,635 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,635 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,635 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,635 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,635 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,636 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525
2023-02-03 10:20:18,636 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
2023-02-03 10:20:18,636 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,636 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,636 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
2023-02-03 10:20:18,636 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,636 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,636 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,636 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2023-02-03 10:20:18,637 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,637 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
2023-02-03 10:20:18,637 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,637 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,637 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,637 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,637 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,637 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,638 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,638 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,638 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2023-02-03 10:20:18,638 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,638 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,638 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,638 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,638 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,639 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sitka' (SitkaVF-Italic.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,639 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,639 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
2023-02-03 10:20:18,639 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,639 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,639 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,639 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2023-02-03 10:20:18,639 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,640 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,640 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,640 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,640 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,640 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24
2023-02-03 10:20:18,640 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2023-02-03 10:20:18,640 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,640 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,640 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,641 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,641 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,641 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,641 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2023-02-03 10:20:18,641 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,641 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2023-02-03 10:20:18,641 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,641 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,642 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25
2023-02-03 10:20:18,642 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,642 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,642 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,642 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,642 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,642 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2023-02-03 10:20:18,642 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2023-02-03 10:20:18,642 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2023-02-03 10:20:18,643 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,643 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2023-02-03 10:20:18,643 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24
2023-02-03 10:20:18,643 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,643 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,643 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145
2023-02-03 10:20:18,643 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,643 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2023-02-03 10:20:18,644 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,644 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,644 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,644 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25
2023-02-03 10:20:18,644 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
2023-02-03 10:20:18,644 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,644 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,644 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,645 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,645 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,645 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2023-02-03 10:20:18,645 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
2023-02-03 10:20:18,645 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,645 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,645 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
2023-02-03 10:20:18,645 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,646 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
2023-02-03 10:20:18,646 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2023-02-03 10:20:18,646 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
2023-02-03 10:20:18,646 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,646 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,646 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
2023-02-03 10:20:18,646 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,646 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,646 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,647 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,647 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,647 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,647 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,647 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,647 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,647 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,647 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,648 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,648 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2023-02-03 10:20:18,648 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,648 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25
2023-02-03 10:20:18,648 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
2023-02-03 10:20:18,648 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
2023-02-03 10:20:18,648 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2023-02-03 10:20:18,648 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
2023-02-03 10:20:18,649 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,649 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,649 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,649 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,649 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,649 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,649 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,649 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,650 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,650 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,650 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,650 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,650 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,650 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,650 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,651 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,651 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2023-02-03 10:20:18,651 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,651 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145
2023-02-03 10:20:18,651 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145
2023-02-03 10:20:18,651 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2023-02-03 10:20:18,651 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2023-02-03 10:20:18,651 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,651 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,651 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,652 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,652 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,652 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
2023-02-03 10:20:18,652 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,652 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,652 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,652 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525
2023-02-03 10:20:18,652 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,653 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2023-02-03 10:20:18,653 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2023-02-03 10:20:18,653 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,653 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
2023-02-03 10:20:18,653 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2023-02-03 10:20:18,653 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2023-02-03 10:20:18,653 [28472] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(<Font 'Segoe Fluent Icons' (SegoeIcons.ttf) normal normal 400 normal>) = 10.05
2023-02-03 10:20:18,653 [28472] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\sunny\\anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2023-02-03 10:21:33,145 [28472] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-03 10:21:33,147 [28472] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 5; new: 1
2023-02-03 10:21:33,147 [28472] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:5] new[1:1]
2023-02-03 10:21:33,148 [28472] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-03 10:21:33,148 [28472] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-03 10:21:34,689 [28472] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-03 10:21:34,690 [28472] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-03 10:21:34,690 [28472] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-03 10:21:34,691 [28472] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-03 10:21:34,691 [28472] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-03 10:21:34,726 [28472] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\callbacks.py
2023-02-03 10:21:37,715 [28472] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-03 10:21:37,716 [28472] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-03 10:21:37,716 [28472] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-03 10:21:37,717 [28472] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-03 10:21:37,717 [28472] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-03 10:21:37,727 [28472] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\pandas\__init__.py
2023-02-03 14:21:28,321 [25996] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-03 14:21:28,325 [25996] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-03 14:21:28,326 [25996] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-03 14:21:28,346 [25996] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-03 14:21:28,353 [25996] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-03 14:21:28,354 [25996] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-03 14:21:28,597 [28472] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-03 14:21:28,608 [28472] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-03 14:21:28,610 [28472] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-03 14:21:28,646 [28472] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-03 14:21:28,648 [28472] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-03 14:21:28,655 [28472] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-24 17:57:21,743 [21664] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2023-02-24 17:57:21,743 [21664] DEBUG    root:93: [JupyterRequire] Initializing comms.
2023-02-24 17:57:21,744 [21664] INFO     root:247: [JupyterRequire] Initializing comms.
2023-02-24 17:57:21,746 [21664] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2023-02-24 17:57:21,746 [21664] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2023-02-24 17:57:21,748 [21664] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2023-02-24 17:59:41,970 [21664] DEBUG    tensorflow:32: [JupyterRequire] Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2023-02-24 17:59:42,618 [21664] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 7 to 5
2023-02-24 17:59:42,618 [21664] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 5 to 7
2023-02-24 17:59:42,618 [21664] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 7 to 5
2023-02-24 17:59:42,619 [21664] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 5 to 7
2023-02-24 17:59:46,043 [21664] INFO     numexpr.utils:145: [JupyterRequire] Note: NumExpr detected 12 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
2023-02-24 17:59:46,043 [21664] INFO     numexpr.utils:157: [JupyterRequire] NumExpr defaulting to 8 threads.
2023-02-24 18:00:13,505 [21664] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\__init__.py
2023-02-24 18:00:13,611 [21664] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\__init__.py
2023-02-24 18:00:13,619 [21664] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\api\__init__.py
2023-02-24 18:00:13,630 [21664] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\api\_v2\__init__.py
2023-02-24 18:00:13,640 [21664] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\api\_v2\keras\__init__.py
2023-02-24 18:00:13,652 [21664] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\api\_v2\keras\optimizers\__init__.py
2023-02-24 18:00:13,774 [21664] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\2and3\builtins.pyi
2023-02-24 18:00:13,791 [21664] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\python\__init__.py
2023-02-24 18:00:13,799 [21664] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\python\util\__init__.py
2023-02-24 18:00:13,821 [21664] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\AppData\Roaming\Python\Python39\site-packages\tensorflow\python\util\tf_export.py
2023-02-24 18:00:13,858 [21664] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\functools.py
2023-02-24 18:00:13,869 [21664] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\functools.pyi
2023-02-24 18:00:13,944 [21664] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\saving\__init__.py
2023-02-24 18:00:13,957 [21664] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\saving\object_registration.py
2023-02-24 18:00:14,554 [21664] DEBUG    parso.cache:152: [JupyterRequire] pickle loaded: C:\Users\sunny\anaconda3\lib\site-packages\keras\optimizers\optimizer_experimental\adam.py
2023-02-24 18:00:58,976 [21664] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-24 18:00:58,976 [21664] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 11; new: 1
2023-02-24 18:00:58,978 [21664] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:11] new[1:1]
2023-02-24 18:00:58,978 [21664] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-24 18:00:58,978 [21664] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-24 18:01:11,350 [21664] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-24 18:01:11,351 [21664] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-24 18:01:11,351 [21664] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-24 18:01:11,352 [21664] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-24 18:01:11,353 [21664] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-24 18:01:14,156 [21664] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-24 18:01:14,157 [21664] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2023-02-24 18:01:14,158 [21664] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2023-02-24 18:01:14,159 [21664] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2023-02-24 18:01:14,159 [21664] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-24 18:02:14,139 [21664] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-24 18:02:14,140 [21664] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 11
2023-02-24 18:02:14,140 [21664] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:11]
2023-02-24 18:02:14,141 [21664] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 11 (to 10 in part parser)
2023-02-24 18:02:14,142 [21664] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-24 18:02:15,332 [21664] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-24 18:02:15,333 [21664] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 11; new: 11
2023-02-24 18:02:15,333 [21664] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:10] new[1:10]
2023-02-24 18:02:15,334 [21664] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:7] new[1:7]
2023-02-24 18:02:15,334 [21664] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 8 to 11 (to 10 in part parser)
2023-02-24 18:02:15,335 [21664] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[11:11] new[11:11]
2023-02-24 18:02:15,335 [21664] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2023-02-24 18:02:15,861 [21664] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2023-02-24 18:02:15,861 [21664] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 11; new: 11
2023-02-24 18:02:15,862 [21664] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:10] new[1:10]
2023-02-24 18:02:15,862 [21664] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:7] new[1:7]
2023-02-24 18:02:15,863 [21664] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 8 to 11 (to 10 in part parser)
2023-02-24 18:02:15,863 [21664] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[11:11] new[11:11]
2023-02-24 18:02:15,864 [21664] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
